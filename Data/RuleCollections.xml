<?xml version="1.0" encoding="utf-8"?>
<RuleCollections xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Collections>
    <RuleCollection>
      <Name>Wintellect.Analyzers</Name>
      <Rules>
        <Rule>
          <Id>Wintellect006</Id>
          <Category>Design</Category>
          <Title>Assemblies need the AssemblyCompanyAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Specifying the AssemblyCompanyAttribute identifies the company that produced the assembly</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add a filled out AssemblyCompanyAttribute to the assembly properties</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect006-AssembliesHaveCompanyAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect007</Id>
          <Category>Design</Category>
          <Title>Assemblies need the AssemblyCopyrightAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Specifying the AssemblyCopyrightAttribute sets who owns the copyright to the assembly</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add a filled out AssemblyCopyrightAttribute to the assembly properties</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect007-AssembliesHaveCopyrightAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect008</Id>
          <Category>Design</Category>
          <Title>Assemblies need the AssemblyDescriptionAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Specifying the AssemblyDescriptionAttribute declares the purpose of the assembly</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add a filled out AssemblyDescriptionAttribute to the assembly properties</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect008-AssembliesHaveDescriptionAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect009</Id>
          <Category>Design</Category>
          <Title>Assemblies need the AssemblyTitleDescriptionAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Specifying the AssemblyTitleAttribute helps identify the assembly</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add a filled out AssemblyTitleAttribute to the assembly properties</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect009-AssembliesHaveTitleAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect014</Id>
          <Category>Design</Category>
          <Title>Catch blocks should rethrow or throw</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Best practices dictate that any catch block should rethrow or throw and not eat exceptions</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Catch blocks should rethrow or throw</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect014-CatchBlocksShouldRethrow.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect010</Id>
          <Category>Documentation</Category>
          <Title>All direct throws must be documented with &lt;exception&gt; tags</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>All direct throws must always be documented with &lt;exception&gt; tags</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Document the direct throw of type '{0}' with an &lt;exception&gt; tag</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect010-ExceptionDocumentationMissing.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect011</Id>
          <Category>Documentation</Category>
          <Title>SuppressionMessageAttribute needs to specify the Justification parameter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>You must always specify the Justification parameter with the SuppressionMessage attribute</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The SuppressionMessage on '{0}' needs the Justification parameter filled out</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect011-SuppressMessageMissingJustification.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect005</Id>
          <Category>Performance</Category>
          <Title>Avoid calling methods with param array arguments in loops</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Methods with variable length arguments (param array) can lead to performance problems inside loops</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Call to a method using a param array as arguments '{0}' in a loop</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect005-AvoidCallingMethodsWithParamArgInLoops.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect004</Id>
          <Category>Usage</Category>
          <Title>Use explicit types instead of predefined to avoid confusion</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Being explicit about your types is better according to CLR via C# by Jeffrey Richter</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Convert '{0}' to the explicit type '{1}'</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect004-AvoidPredefinedTypes.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect012</Id>
          <Category>Usage</Category>
          <Title>New classes should be declared as sealed</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>When writing new classes, they should be declared as sealed</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The class '{0}' should be declared sealed if this is a newly written class</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect012-ClassesShouldBeSealed.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect002</Id>
          <Category>Usage</Category>
          <Title>Always use Debug.Assert methods that have a message parameter</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Always use the multiple parameter version of Debug.Assert for better error reporting</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Never use the single parameter Debug.Assert</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect002-CallAssertMethodsWithMessageParameters.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect003</Id>
          <Category>Formatting</Category>
          <Title>If and else statements must use braces</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If and else statements must use braces even for single line results</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' statements must have braces</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect003-IfAndElseMustHaveBraces.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect001</Id>
          <Category>Usage</Category>
          <Title>All Task or Task&lt;T&gt; returning method names must end with Async</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Methods returning Tasks must end in "Task" to indicate they are asynchronous</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Method name {0} should be renamed {0}Async</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect001-ReturningTaskRequiresAsync.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Wintellect013</Id>
          <Category>Usage</Category>
          <Title>Use a DebuggerDisplay attribute</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>A DebugggerDisplayAttribute should be used on all public classes to make debugging of the class easier</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The public class '{0}' does not have a DebuggerDisplay attribute applied</MessageFormat>
          <HelpLinkUri>http://code.wintellect.com/Wintellect.Analyzers/WebPages/Wintellect013-UseDebuggerDisplayAttribute.html</HelpLinkUri>
        </Rule>
      </Rules>
    </RuleCollection>
    <RuleCollection>
      <Name>DNA.CSharp</Name>
      <Rules>
        <Rule>
          <Id>DNA001</Id>
          <Category>Syntax</Category>
          <Title>List(Of T) is improper for data-binding</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' is of type List(Of T). Consider assigning an object of type ObservableCollection(Of T) instead.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>DNA200</Id>
          <Category>Naming</Category>
          <Title>Names of asynchronous methods whould end with Async</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Name of asynchronous method '{0}' does not end with Async</MessageFormat>
          <HelpLinkUri>https://github.com/AlessandroDelSole/DotNetAnalyzers/wiki/DNA-200---Names-of-asynchronous-methods-should-end-with-Async</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>DNA101</Id>
          <Category>Syntax</Category>
          <Title>[EnableQuery] is missing</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' method should be decorated with EnableQuery</MessageFormat>
          <HelpLinkUri>https://github.com/AlessandroDelSole/DotNetAnalyzers/wiki/DNA-101---%5BEnableQuery%5D-is-missing</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>DNA102</Id>
          <Category>Syntax</Category>
          <Title>[FromODataUri] attribute is missing</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' is the first parameter and should be decorated with [FromODataUri]</MessageFormat>
          <HelpLinkUri>https://github.com/AlessandroDelSole/DotNetAnalyzers/wiki/DNA-102----FromODataUri--attribute-is-missing</HelpLinkUri>
        </Rule>
      </Rules>
    </RuleCollection>
    <RuleCollection>
      <Name>Azure</Name>
      <Rules>
        <Rule>
          <Id>AP4000</Id>
          <Category>Usage</Category>
          <Title>Consider using CloudConfigurationManager</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Use CloudConfigurationManager which is capable of reading the configuration file appropriate to the application environment.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider using CloudConfigurationManager</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=402626</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP5000</Id>
          <Category>Usage</Category>
          <Title>Configure diagnostics settings in a configuration file</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Instead of configuring diagnostics settings in your code such as by using the Microsoft.WindowsAzure.Diagnostics programming API, you should configure diagnostics settings in the diagnostics.wadcfg file. (Or, diagnostics.wadcfgx if you use Azure SDK 2.5). By doing this, you can change diagnostics settings without having to recompile your code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Configure diagnostics settings in a configuration file</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=402627</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP4001</Id>
          <Category>Usage</Category>
          <Title>Do not use hard-coded connection strings</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If you use hard-coded connection strings and you need to update them later, you'll have to make changes to your source code and recompile the application. However, if you store your connection strings in a configuration file, you can change them later by simply updating the configuration file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not use hard-coded connection strings</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=420469</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP2003</Id>
          <Category>Performance</Category>
          <Title>Consider using asynchronous Service Bus methods</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Synchronous Service Bus methods, such as Send, Receive, and Delete, wait for asynchronous operations to complete before processing the next operation. By using asynchronous methods, you can run multiple asynchronous operations concurrently and increase the number of operations that can run at a time.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider using asynchronous Service Bus methods</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=509813</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP2002</Id>
          <Category>Usage</Category>
          <Title>Consider using the OnMessage method instead of Receive</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The OnMessage method is a simpler solution than the Receive method for receiving a message since OnMessage uses an internal message pump and doesn't require implementing a receive loop in your application. If you choose to use Receive, make sure its timespan interval is more than one minute to avoid timing out before a message is fully received.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider using the OnMessage method instead of Receive</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=444500</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP2004</Id>
          <Category>Performance</Category>
          <Title>Consider partitioning Service Bus queues and topics</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A Service Bus queue or topic that isn't partitioned is limited in performance throughout and availability due to it using a single message broker and messaging store. To increase the overall throughout and service availability, partition the Service Bus queues and topics so they're handle by multiple message brokers and stored in multiple messaging stores.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider partitioning Service Bus queues and topics</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=509834</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP2000</Id>
          <Category>Security</Category>
          <Title>Consider using Service Bus Shared Access Signature authentication</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Use Shared Access Signature for authentication. Access Control Service (ACS) is being deprecated for service bus authentication.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider using Service Bus Shared Access Signature authentication</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=402623</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP0000</Id>
          <Category>Performance</Category>
          <Title>Avoid using the in-process Session State mode</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The default in-process Session State mode stores session state in memory on the webserver which will be lost after the server restarts. To avoid data loss, store your session state data in an external state provider, such as the Azure Redis Cache.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Avoid using the in-process Session State mode</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=402621</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP6000</Id>
          <Category>Performance</Category>
          <Title>Avoid declaring DbContext objects as static</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Static DbContext objects aren't disposed until the application domain is unloaded. As a result, static DbContext objects can consume a lot of memory. The best practice is to declare DbContext as a local variable or non-static instance field, use it for a task, and let it be disposed afterwards.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Avoid declaring DbContext objects as static</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=506770</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP3001</Id>
          <Category>Security</Category>
          <Title>Avoid setting SharedAccessStartTime to current time</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>SharedAccessStartTime should not be set to current time. If you want to start Shared Access policy immediately then you don't need to set the property. You only need to set the property if you want to start the Shared Access policy at a later time.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Avoid setting SharedAccessStartTime to current time</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=402625</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP3002</Id>
          <Category>Security</Category>
          <Title>Shared Access Policy expiry time must be more than five minutes</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There can be up to a five minute difference in clocks among datacenters at different locations due to clock skew. To prevent the SAS policy token from expiring earlier than planned, set the expiry time to be more than five minutes.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Shared Access Policy expiry time must be more than five minutes</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=509818</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP3000</Id>
          <Category>Performance</Category>
          <Title>Avoid using current time as partition key</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Avoid using partition keys based on current time as it can result in a single partition handling a large percentage of traffic to a table and reduce the scalability of your application. If your application needs to perform a large number of entity insertions (&gt; 2000/sec), then consider alternative partition keys to spread the insertions across multiple partitions.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Avoid using current time as partition key</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=402624</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AP1000</Id>
          <Category>Usage</Category>
          <Title>Do not use async in Run method</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Create an async method outside of the Run method and call that method from Run. Declaring Run method as async will cause the worker role to enter a restart loop.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not use async in Run method</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=402622</HelpLinkUri>
        </Rule>
      </Rules>
    </RuleCollection>
    <RuleCollection>
      <Name>Microsoft.CodeAnalysis.FxCop</Name>
      <Rules>
        <Rule>
          <Id>CA2001</Id>
          <Category>Reliability</Category>
          <Title>Avoid calling problematic methods</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A member calls a potentially dangerous or problematic method.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove the call to GC.Collect from {0}. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA3075</Id>
          <Category>Security</Category>
          <Title>Insecure DTD processing in XML</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://aka.ms/CA3075</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2229</Id>
          <Category>Usage</Category>
          <Title>Implement serialization constructors</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182343.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2235</Id>
          <Category>Usage</Category>
          <Title>Mark all non-serializable fields</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An instance field of a type that is not serializable is declared in a type that is serializable.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field {0} is a member of type {1} which is serializable but is of type {2} which is not serializable</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182349.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2237</Id>
          <Category>Usage</Category>
          <Title>Mark ISerializable types with serializable</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>To be recognized by the common language runtime as serializable, types must be marked by using the SerializableAttribute attribute even when the type uses a custom serialization routine through implementation of the ISerializable interface.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add [Serializable] to {0} as this type implements ISerializable</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182350.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1058</Id>
          <Category>Design</Category>
          <Title>Types should not extend certain base types</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An externally visible type extends certain base types. Use one of the alternatives.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182171.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA3077</Id>
          <Category>Security</Category>
          <Title>Insecure Processing in API Design, XmlDocument and XmlTextReader</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Enabling DTD processing on all instances derived from XmlTextReader or  XmlDocument and using XmlUrlResolver for resolving external XML entities may lead to information disclosure. Ensure to set the XmlResolver property to null, create an instance of XmlSecureResolver when processing untrusted input, or use XmlReader.Create method with a secure XmlReaderSettings argument. Unless you need to enable it, ensure the DtdProcessing property is set to false. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://aka.ms/CA3077</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA3076</Id>
          <Category>Security</Category>
          <Title>Insecure XSLT script processing.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Providing an insecure XsltSettings instance and an insecure XmlResolver instance to XslCompiledTransform.Load method is potentially unsafe as it allows processing script within XSL, which on an untrusted XSL input may lead to malicious code execution. Either replace the insecure XsltSettings argument with XsltSettings.Default or an instance that has disabled document function and script execution, or replace the XmlResolver argurment with null or an XmlSecureResolver instance. This message may be suppressed if the input is known to be from a trusted source and external resource resolution from locations that are not known in advance must be supported.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://aka.ms/CA3076</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2153</Id>
          <Category>Security</Category>
          <Title>Do Not Catch Corrupted State Exceptions</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Catching corrupted state exceptions could mask errors (such as access violations), resulting in inconsistent state of execution or making it easier for attackers to compromise system. Instead, catch and handle a more specific set of exception type(s) or re-throw the exception</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is catching corrupted state exception.</MessageFormat>
          <HelpLinkUri>http://aka.ms/CA2153</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA5350</Id>
          <Category>Security</Category>
          <Title>Do Not Use Weak Cryptographic Algorithms</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Cryptographic algorithms degrade over time as attacks become for advances to attacker get access to more computation. Depending on the type and application of this cryptographic algorithm, further degradation of the cryptographic strength of it may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA-2 512, SHA-2 384, or SHA-2 256.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} uses a weak cryptographic algorithm {1}</MessageFormat>
          <HelpLinkUri>http://aka.ms/CA5350</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA5351</Id>
          <Category>Security</Category>
          <Title>Do Not Use Broken Cryptographic Algorithms</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An attack making it computationally feasible to break this algorithm exists. This allows attackers to break the cryptographic guarantees it is designed to provide. Depending on the type and application of this cryptographic algorithm, this may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA512, SHA384, or SHA256. Replace digital signature uses with RSA with a key length greater than or equal to 2048-bits, or ECDSA with a key length greater than or equal to 256 bits.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} uses a broken cryptographic algorithm {1}</MessageFormat>
          <HelpLinkUri>http://aka.ms/CA5351</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1300</Id>
          <Category>Globalization</Category>
          <Title>Specify MessageBoxOptions</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>To correctly display a message box for cultures that use a right-to-left reading order, the RightAlign and RtlReading members of the MessageBoxOptions enumeration must be passed to the Show method.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Specify MessageBoxOptions</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1301</Id>
          <Category>Globalization</Category>
          <Title>Avoid duplicate accelerators</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An access key, also known as an accelerator, enables keyboard access to a control by using the ALT key. When multiple controls have duplicate access keys, the behavior of the access key is not well defined.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Avoid duplicate accelerators</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1306</Id>
          <Category>Globalization</Category>
          <Title>Set locale for data types</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The locale determines culture-specific presentation elements for data, such as formatting that is used for numeric values, currency symbols, and sort order. When you create a DataTable or DataSet, you should explicitly set the locale.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Set locale for data types</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2212</Id>
          <Category>Usage</Category>
          <Title>Do not mark serviced components with WebMethod</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A method in a type that inherits from System.EnterpriseServices.ServicedComponent is marked by using System.Web.Services.WebMethodAttribute. Because WebMethodAttribute and a ServicedComponent method have conflicting behavior and requirements for context and transaction flow, the behavior of the method will be incorrect in some scenarios.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not mark serviced components with WebMethod</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2232</Id>
          <Category>Usage</Category>
          <Title>Mark Windows Forms entry points with STAThread</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>STAThreadAttribute indicates that the COM threading model for the application is a single-threaded apartment. This attribute must be present on the entry point of any application that uses Windows Forms; if it is omitted, the Windows components might not work correctly.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Mark Windows Forms entry points with STAThread</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2236</Id>
          <Category>Usage</Category>
          <Title>Call base class methods on ISerializable types</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>To fix a violation of this rule, call the base type GetObjectData method or serialization constructor from the corresponding derived type method or constructor.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Call base class methods on ISerializable types</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2238</Id>
          <Category>Usage</Category>
          <Title>Implement serialization methods correctly</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A method that handles a serialization event does not have the correct signature, return type, or visibility.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change its accessibility to private.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2239</Id>
          <Category>Usage</Category>
          <Title>Provide deserialization methods for optional fields</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A type has a field that is marked by using the System.Runtime.Serialization.OptionalFieldAttribute attribute, and the type does not provide deserialization event handling methods.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Add a 'private void OnDeserialized(StreamingContext)' method to type {0} and attribute it with the System.Runtime.Serialization.OnDeserializedAttribute.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2240</Id>
          <Category>Usage</Category>
          <Title>Implement ISerializable correctly</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>To fix a violation of this rule, make the GetObjectData method visible and overridable, and make sure that all instance fields are included in the serialization process or explicitly marked by using the NonSerializedAttribute attribute.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Add an implementation of GetObjectData to type {0}.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2007</Id>
          <Category>Reliability</Category>
          <Title>Do not directly await a Task</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>While authoring a library where the consumer is not known and when there is no need for a SynchronizationContext,  consider using ConfigureAwait(false). Otherwise, the consumers of the library may face deadlocks by consuming the asynchronous methods in a blocking fashion.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not directly await a Task without calling ConfigureAwait</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1027</Id>
          <Category>Design</Category>
          <Title>Mark enums with FlagsAttribute</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An enumeration is a value type that defines a set of related named constants. Apply FlagsAttribute to an enumeration when its named constants can be meaningfully combined.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Mark enums with FlagsAttribute</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182159.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2217</Id>
          <Category>Usage</Category>
          <Title>Do not mark enums with FlagsAttribute</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An externally visible enumeration is marked by using FlagsAttribute, and it has one or more values that are not powers of two or a combination of the other defined values on the enumeration.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not mark enums with FlagsAttribute</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182335.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1066</Id>
          <Category>Design</Category>
          <Title>Type {0} should implement IEquatable&lt;T&gt; because it overrides Equals</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When a type T overrides Object.Equals(object), the implementation must cast the object argument to the correct type T before performing the comparison. If the type implements IEquatable&lt;T&gt;, and therefore offers the method T.Equals(T), and if the argument is known at compile time to be of type T, then the compiler can call IEquatable&lt;T&gt;.Equals(T) instead of Object.Equals(object), and no cast is necessary, improving performance.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Implement IEquatable when overriding Object.Equals</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=734907</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1067</Id>
          <Category>Design</Category>
          <Title>Override Object.Equals(object) when implementing IEquatable&lt;T&gt;</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When a type T implements the interface IEquatable&lt;T&gt;, it suggests to a user who sees a call to the Equals method in source code that an instance of the type can be equated with an instance of any other type. The user might be confused if their attempt to equate the type with an instance of another type fails to compile. This violates the "principle of least surprise".</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type {0} should override Equals because it implements IEquatable&lt;T&gt;</MessageFormat>
          <HelpLinkUri>http://go.microsoft.com/fwlink/?LinkId=734909</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1720</Id>
          <Category>Naming</Category>
          <Title>Identifier contains type name</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>
Names of parameters and members are better used to communicate their meaning than to describe their type, which is expected to be provided by development tools. For names of members, if a data type name must be used, use a language-independent name instead of a language-specific one.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Identifier '{0}' contains type name</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb531486.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1016</Id>
          <Category>Design</Category>
          <Title>Mark assemblies with assembly version</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The .NET Framework uses the version number to uniquely identify an assembly, and to bind to types in strongly named assemblies. The version number is used together with version and publisher policy. By default, applications run only with the assembly version with which they were built.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Mark assemblies with assembly version</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182155.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1014</Id>
          <Category>Design</Category>
          <Title>Mark assemblies with CLSCompliant</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The Common Language Specification (CLS) defines naming restrictions, data types, and rules to which assemblies must conform if they will be used across programming languages. Good design dictates that all assemblies explicitly indicate CLS compliance by using CLSCompliantAttribute . If this attribute is not present on an assembly, the assembly is not compliant.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Mark assemblies with CLSCompliant</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182156.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1008</Id>
          <Category>Design</Category>
          <Title>Enums should have zero value</Title>
          <CustomTags>
            <string>Telemetry</string>
            <string>RuleRename</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The default value of an uninitialized enumeration, just as other value types, is zero. A nonflags-attributed enumeration should define a member by using the value of zero so that the default value is a valid value of the enumeration. If an enumeration that has the FlagsAttribute attribute applied defines a zero-valued member, its name should be ""None"" to indicate that no values have been set in the enumeration.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>In enum {0}, change the name of {1} to 'None'.</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182149.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1012</Id>
          <Category>Design</Category>
          <Title>Abstract types should not have constructors</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Constructors on abstract types can be called only by derived types. Because public constructors create instances of a type, and you cannot create instances of an abstract type, an abstract type that has a public constructor is incorrectly designed.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Abstract type {0} should not have constructors</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182126.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1017</Id>
          <Category>Design</Category>
          <Title>Mark assemblies with ComVisible</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>ComVisibleAttribute determines how COM clients access managed code. Good design dictates that assemblies explicitly indicate COM visibility. COM visibility can be set for the whole assembly and then overridden for individual types and type members. If this attribute is not present, the contents of the assembly are visible to COM clients.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Consider changing the ComVisible attribute on {0} to false, and opting in at the type level.</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182157.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1018</Id>
          <Category>Design</Category>
          <Title>Mark attributes with AttributeUsageAttribute</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Specify AttributeUsage on {0}.</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182158.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1043</Id>
          <Category>Design</Category>
          <Title>Use Integral Or String Argument For Indexers</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Indexers, that is, indexed properties, should use integer or string types for the index. These types are typically used for indexing data structures and increase the usability of the library. Use of the Object type should be restricted to those cases where the specific integer or string type cannot be specified at design time. If the design requires other types for the index, reconsider whether the type represents a logical data store. If it does not represent a logical data store, use a method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use Integral Or String Argument For Indexers</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182180.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1024</Id>
          <Category>Design</Category>
          <Title>Use properties where appropriate</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A public or protected method has a name that starts with ""Get"", takes no parameters, and returns a value that is not an array. The method might be a good candidate to become a property.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Use properties where appropriate</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182181.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1033</Id>
          <Category>Design</Category>
          <Title>Interface methods should be callable by child types</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An unsealed externally visible type provides an explicit method implementation of a public interface and does not provide an alternative externally visible method that has the same name.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Interface methods should be callable by child types</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/library/ms182153.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1036</Id>
          <Category>Design</Category>
          <Title>Override methods on comparable types</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A public or protected type implements the System.IComparable interface. It does not override Object.Equals nor does it overload the language-specific operator for equality, inequality, less than, or greater than.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} should override Equals since it implements IComparable.</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182163.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1052</Id>
          <Category>Design</Category>
          <Title>Static holder types should be Static or NotInheritable</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type '{0}' is a static holder type but is neither static nor NotInheritable</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182168.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1060</Id>
          <Category>Design</Category>
          <Title>Move pinvokes to native methods class</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Platform Invocation methods, such as those that are marked by using the System.Runtime.InteropServices.DllImportAttribute attribute, or methods that are defined by using the Declare keyword in Visual Basic, access unmanaged code. These methods should be of the NativeMethods, SafeNativeMethods, or UnsafeNativeMethods class.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Move pinvokes to native methods class</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182161.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1708</Id>
          <Category>Naming</Category>
          <Title>Identifiers should differ by more than case</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Identifiers for namespaces, types, members, and parameters cannot differ only by case because languages that target the common language runtime are not required to be case-sensitive.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Names of '{0}' and '{1}' should differ by more than case.</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182242.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1715</Id>
          <Category>Naming</Category>
          <Title>Identifiers should have correct prefix</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Identifiers should have correct prefix</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Prefix interface name {0} with 'I'.</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182243.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2211</Id>
          <Category>Usage</Category>
          <Title>Non-constant fields should not be visible</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Static fields that are neither constants nor read-only are not thread-safe. Access to such a field must be carefully controlled and requires advanced programming techniques to synchronize access to the class object.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Non-constant fields should not be visible</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182353.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2222</Id>
          <Category>Usage</Category>
          <Title>Do not decrease inherited member visibility</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>You should not change the access modifier for inherited members. Changing an inherited member to private does not prevent callers from accessing the base class implementation of the method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not decrease inherited member visibility</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182332.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2225</Id>
          <Category>Usage</Category>
          <Title>Operator overloads have named alternates</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An operator overload was detected, and the expected named alternative method was not found. The named alternative member provides access to the same functionality as the operator and is provided for developers who program in languages that do not support overloaded operators.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Provide a method named '{0}' as a friendly alternate for operator {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182355.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2226</Id>
          <Category>Usage</Category>
          <Title>Operators should have symmetrical overloads</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A type implements the equality or inequality operator and does not implement the opposite operator.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Since '{0}' redefines operator '{1}', it should also redefine operator '{2}'</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182356.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2227</Id>
          <Category>Usage</Category>
          <Title>Collection properties should be read only</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A writable collection property allows a user to replace the collection with a different collection. A read-only property stops the collection from being replaced but still allows the individual members to be set.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Collection properties should be read only</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/library/ms182327.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2231</Id>
          <Category>Usage</Category>
          <Title>Overload operator equals on overriding value type Equals</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>In most programming languages there is no default implementation of the equality operator (==) for value types. If your programming language supports operator overloads, you should consider implementing the equality operator. Its behavior should be identical to that of Equals</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Overload operator equals on overriding value type Equals</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182359.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1068</Id>
          <Category>Design</Category>
          <Title>CancellationToken parameters must come last</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Method '{0}' should take CancellationToken as the last parameter</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1000</Id>
          <Category>Design</Category>
          <Title>Do not declare static members on generic types</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When a static member of a generic type is called, the type argument must be specified for the type. When a generic instance member that does not support inference is called, the type argument must be specified for the member. In these two cases, the syntax for specifying the type argument is different and easily confused.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not declare static members on generic types</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182139.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1010</Id>
          <Category>Design</Category>
          <Title>Collections should implement generic interface</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>To broaden the usability of a collection, implement one of the generic collection interfaces. Then the collection can be used to populate generic collection types.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Collections should implement generic interface</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182132.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1028</Id>
          <Category>Design</Category>
          <Title>Enum Storage should be Int32</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An enumeration is a value type that defines a set of related named constants. By default, the System.Int32 data type is used to store the constant value. Although you can change this underlying type, it is not required or recommended for most scenarios.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>If possible, make the underlying type of {0} System.Int32 instead of {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182147.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1030</Id>
          <Category>Design</Category>
          <Title>Use events where appropriate</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>This rule detects methods that have names that ordinarily would be used for events. If a method is called in response to a clearly defined state change, the method should be invoked by an event handler. Objects that call the method should raise events instead of calling the method directly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider making '{0}' an event.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182177.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1034</Id>
          <Category>Design</Category>
          <Title>Nested types should not be visible</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A nested type is a type that is declared in the scope of another type. Nested types are useful to encapsulate private implementation details of the containing type. Used for this purpose, nested types should not be externally visible.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182162.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1041</Id>
          <Category>Design</Category>
          <Title>Provide ObsoleteAttribute message</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A type or member is marked by using a System.ObsoleteAttribute attribute that does not have its ObsoleteAttribute.Message property specified. When a type or member that is marked by using ObsoleteAttribute is compiled, the Message property of the attribute is displayed. This gives the user information about the obsolete type or member.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Provide a message for the ObsoleteAttribute that marks {0} as Obsolete</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182166.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1044</Id>
          <Category>Design</Category>
          <Title>Properties should not be write only</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Although it is acceptable and often necessary to have a read-only property, the design guidelines prohibit the use of write-only properties. This is because letting a user set a value, and then preventing the user from viewing that value, does not provide any security. Also, without read access, the state of shared objects cannot be viewed, which limits their usefulness.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because property {0} is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182165.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1050</Id>
          <Category>Design</Category>
          <Title>Declare types in namespaces</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Types are declared in namespaces to prevent name collisions and as a way to organize related types in an object hierarchy.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Declare types in namespaces</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182134.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1051</Id>
          <Category>Design</Category>
          <Title>Do not declare visible instance fields</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The primary use of a field should be as an implementation detail. Fields should be private or internal and should be exposed by using properties.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not declare visible instance fields</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182141.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1054</Id>
          <Category>Design</Category>
          <Title>Uri parameters should not be strings</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If a method takes a string representation of a URI, a corresponding overload should be provided that takes an instance of the URI class, which provides these services in a safe and secure manner.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the type of parameter {0} of method {1} from string to System.Uri, or provide an overload to {1} that allows {0} to be passed as a System.Uri object.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182174.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1055</Id>
          <Category>Design</Category>
          <Title>Uri return values should not be strings</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>This rule assumes that the method returns a URI. A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the return type of method {0} from string to System.Uri.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182176.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1056</Id>
          <Category>Design</Category>
          <Title>Uri properties should not be strings</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>This rule assumes that the property represents a Uniform Resource Identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the type of property {0} from string to System.Uri.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182175.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1063</Id>
          <Category>Design</Category>
          <Title>Implement IDisposable Correctly</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove IDisposable from the list of interfaces implemented by {0} and override the base class Dispose implementation instead.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/library/ms244737.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1064</Id>
          <Category>Design</Category>
          <Title>Exceptions should be public</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An internal exception is visible only inside its own internal scope. After the exception falls outside the internal scope, only the base exception can be used to catch the exception. If the internal exception is inherited from T:System.Exception, T:System.SystemException, or T:System.ApplicationException, the external code will not have sufficient information to know what to do with the exception.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Exceptions should be public</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264484.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1065</Id>
          <Category>Design</Category>
          <Title>Do not raise exceptions in unexpected locations</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A method that is not expected to throw exceptions throws an exception.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb386039.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1707</Id>
          <Category>Naming</Category>
          <Title>Identifiers should not contain underscores</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the underscores from assembly name {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182245.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1710</Id>
          <Category>Naming</Category>
          <Title>Identifiers should have correct suffix</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>By convention, the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, have a suffix that is associated with the base type or interface.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename {0} to end in '{1}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182244.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1711</Id>
          <Category>Naming</Category>
          <Title>Identifiers should not have incorrect suffix</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>By convention, only the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Rename type name {0} so that it does not end in '{1}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182247.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1714</Id>
          <Category>Naming</Category>
          <Title>Flags enums should have plural names</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A public enumeration has the System.FlagsAttribute attribute, and its name does not end in ""s"". Types that are marked by using FlagsAttribute have names that are plural because the attribute indicates that more than one value can be specified.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Flags enums should have plural names</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264486.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1717</Id>
          <Category>Naming</Category>
          <Title>Only FlagsAttribute enums should have plural names</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Naming conventions dictate that a plural name for an enumeration indicates that more than one value of the enumeration can be specified at the same time.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Only FlagsAttribute enums should have plural names</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264487.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1716</Id>
          <Category>Naming</Category>
          <Title>Identifiers should not match keywords</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A namespace name or a type name matches a reserved keyword in a programming language. Identifiers for namespaces and types should not match keywords that are defined by languages that target the common language runtime.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182248.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1721</Id>
          <Category>Naming</Category>
          <Title>Property names should not match get methods</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a public or protected member starts with ""Get"" and otherwise matches the name of a public or protected property. ""Get"" methods and properties should have names that clearly distinguish their function.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The property name '{0}' is confusing given the existence of method '{1}'. Rename or remove one of these members.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182253.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1724</Id>
          <Category>Naming</Category>
          <Title>Type names should not match namespaces</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Type names should not match the names of namespaces that are defined in the .NET Framework class library. Violating this rule can reduce the usability of the library.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The type name {0} conflicts in whole or in part with the namespace name '{1}'. Change either name to eliminate the conflict.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182257.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1725</Id>
          <Category>Naming</Category>
          <Title>Parameter names should match base declaration</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Consistent naming of parameters in an override hierarchy increases the usability of the method overrides. A parameter name in a derived method that differs from the name in the base declaration can cause confusion about whether the method is an override of the base method or a new overload of the method.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1815</Id>
          <Category>Performance</Category>
          <Title>Override equals and operator equals on value types</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>For value types, the inherited implementation of Equals uses the Reflection library and compares the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or to use instances as hash table keys, your value type should implement Equals.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} should override Equals.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182276.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1819</Id>
          <Category>Performance</Category>
          <Title>Properties should not return arrays</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Arrays that are returned by properties are not write-protected, even when the property is read-only. To keep the array tamper-proof, the property must return a copy of the array. Typically, users will not understand the adverse performance implications of calling such a property.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Properties should not return arrays</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/0fss9skc.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2234</Id>
          <Category>Usage</Category>
          <Title>Pass system uri objects instead of strings</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A call is made to a method that has a string parameter whose name contains "uri", "URI", "urn", "URN", "url", or "URL". The declaring type of the method contains a corresponding method overload that has a System.Uri parameter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Modify '{0}' to call '{1}' instead of '{2}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182360.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Async001</Id>
          <Category>Usage</Category>
          <Title>Avoid Async Void</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>#N/A</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Avoid Async Void</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>Async002</Id>
          <Category>Naming</Category>
          <Title>Async Method Names Should End in Async</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>#N/A</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Async Method Names Should End in Async</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>Async003</Id>
          <Category>Usage</Category>
          <Title>Don't Pass Async Lambdas as Void Returning Delegate Types</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>#N/A</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Don't Pass Async Lambdas as Void Returning Delegate Types</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>Async004</Id>
          <Category>Usage</Category>
          <Title>Don't Store Async Lambdas as Void Returning Delegate Types</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>#N/A</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Don't Store Async Lambdas as Void Returning Delegate Types</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>Async005</Id>
          <Category>Library</Category>
          <Title>Propagate CancellationTokens When Possible</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>#N/A</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Propagate CancellationTokens When Possible</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>Async006</Id>
          <Category>Usage</Category>
          <Title>Don't Mix Blocking and Async</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>#N/A</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Don't Mix Blocking and Async</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1001</Id>
          <Category>Design</Category>
          <Title>Types that own disposable fields should be disposable</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A class declares and implements an instance field that is a System.IDisposable type, and the class does not implement IDisposable. A class that declares an IDisposable field indirectly owns an unmanaged resource and should implement the IDisposable interface.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type '{0}' owns disposable fields but is not disposable</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182172.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1003</Id>
          <Category>Design</Category>
          <Title>Use generic event handler instances</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A type contains a delegate that returns void, whose signature contains two parameters (the first an object and the second a type that is assignable to EventArgs), and the containing assembly targets Microsoft .NET Framework?2.0.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove {0} and replace its usage with EventHandler&lt;T&gt;</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182178.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1019</Id>
          <Category>Design</Category>
          <Title>Define accessors for attribute arguments</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Add a public read-only property accessor for positional argument {0} of Attribute {1}.</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182136.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1032</Id>
          <Category>Design</Category>
          <Title>Implement standard exception constructors</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Failure to provide the full set of constructors can make it difficult to correctly handle exceptions.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add the following constructor to {0}: {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182151.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1040</Id>
          <Category>Design</Category>
          <Title>Avoid empty interfaces</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Interfaces define members that provide a behavior or usage contract. The functionality that is described by the interface can be adopted by any type, regardless of where the type appears in the inheritance hierarchy. A type implements an interface by providing implementations for the members of the interface. An empty interface does not define any members; therefore, it does not define a contract that can be implemented.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Avoid empty interfaces</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182128.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1726</Id>
          <Category>Naming</Category>
          <Title>Use preferred terms</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of an externally visible identifier includes a term for which an alternative, preferred term exists. Alternatively, the name includes the term ""Flag"" or ""Flags"".</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Replace the term '{0}' in assembly name {1} with the preferred alternate '{2}'.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1009</Id>
          <Category>Compatibility</Category>
          <Title>Only internal implementations of this interface are allowed.</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>The author of this interface did not intend to have third party implementations of this interface and reserves the right to change it. Implementing this interface could therefore result in a source or binary compatibility issue with a future version of this interface.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type {0} cannot implement interface {1} because {1} is not available for public implementation.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1001</Id>
          <Category>AnalyzerCorrectness</Category>
          <Title>Missing diagnostic analyzer attribute.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Non-abstract sub-types of DiagnosticAnalyzer should be marked with DiagnosticAnalyzerAttribute(s). The argument to this attribute(s), if any, determine the supported languages for the analyzer. Analyzer types without this attribute will be ignored by the analysis engine.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Missing 'Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute' attribute.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1004</Id>
          <Category>AnalyzerCorrectness</Category>
          <Title>Recommend adding language support to diagnostic analyzer.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Diagnostic analyzer is marked as supporting only one language, but the analyzer assembly doesn't seem to refer to any language specific CodeAnalysis assemblies, and so is likely to work for more than one language. Consider adding an additional language argument to DiagnosticAnalyzerAttribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Diagnostic analyzer '{0}' may be able to support both C# and Visual Basic. Consider adding an argument to DiagnosticAnalyzerAttribute for '{1}' language support.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1014</Id>
          <Category>AnalyzerCorrectness</Category>
          <Title>Do not ignore values returned by methods on immutable objects.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Many objects exposed by Roslyn are immutable. The return value from a method invocation on these objects should not be ignored.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' is immutable and '{1}' will not have any effect on it. Consider using the return value from '{1}'.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1007</Id>
          <Category>AnalyzerLocalization</Category>
          <Title>Provide localizable arguments to diagnostic descriptor constructor.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If your diagnostic analyzer and it's reported diagnostics need to be localizable, then the supported DiagnosticDescriptors used for constructing the diagnostics must also be localizable. If so, then localizable argument(s) must be provided for parameter 'title' (and optionally 'description') to the diagnostic descriptor constructor to ensure that the descriptor is localizable.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Consider providing localizable arguments of type '{0}' to diagnostic descriptor constructor to ensure the descriptor is localizable.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1002</Id>
          <Category>AnalyzerCorrectness</Category>
          <Title>Missing kind argument when registering an analyzer action.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>You must specify at least one syntax, symbol or operation kind when registering a syntax, symbol, or operation analyzer action respectively. Otherwise, the registered action will never be invoked during analysis.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Specify at least one SymbolKind of interest when registering a symbol analyzer action.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1003</Id>
          <Category>AnalyzerCorrectness</Category>
          <Title>Unsupported SymbolKind argument when registering a symbol analyzer action.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>SymbolKind '{0}' is not supported for symbol analyzer actions.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1006</Id>
          <Category>AnalyzerCorrectness</Category>
          <Title>Invalid type argument for DiagnosticAnalyzer's Register method.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>DiagnosticAnalyzer's language-specific Register methods, such as RegisterSyntaxNodeAction, RegisterCodeBlockStartAction and RegisterCodeBlockEndAction, expect a language-specific 'SyntaxKind' type argument for it's 'TLanguageKindEnumName' type parameter. Otherwise, the registered analyzer action can never be invoked during analysis.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type argument '{0}' for type parameter '{1}' of method '{2}' is not a SyntaxKind enum.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1012</Id>
          <Category>AnalyzerPerformance</Category>
          <Title>Start action has no registered actions.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An analyzer start action enables performing stateful analysis over a given code unit, such as a code block, compilation, etc. Careful design is necessary to achieve efficient analyzer execution without memory leaks. Use the following guidelines for writing such analyzers:
1. Define a new scope for the registered start action, possibly with a private nested type for analyzing each code unit.
2. If required, define and initialize state in the start action.
3. Register at least one non-end action that refers to this state in the start action. If no such action is necessary, consider replacing the start action with a non-start action. For example, a CodeBlockStartAction with no registered actions or only a registered CodeBlockEndAction should be replaced with a CodeBlockAction.
4. If required, register an end action to report diagnostics based on the final state.
</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' does not register any analyzer actions. Consider moving actions registered in '{1}' that depend on this start action to '{0}'.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1013</Id>
          <Category>AnalyzerPerformance</Category>
          <Title>Start action has no registered non-end actions.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An analyzer start action enables performing stateful analysis over a given code unit, such as a code block, compilation, etc. Careful design is necessary to achieve efficient analyzer execution without memory leaks. Use the following guidelines for writing such analyzers:
1. Define a new scope for the registered start action, possibly with a private nested type for analyzing each code unit.
2. If required, define and initialize state in the start action.
3. Register at least one non-end action that refers to this state in the start action. If no such action is necessary, consider replacing the start action with a non-start action. For example, a CodeBlockStartAction with no registered actions or only a registered CodeBlockEndAction should be replaced with a CodeBlockAction.
4. If required, register an end action to report diagnostics based on the final state.
</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' does not register any analyzer actions, except for a '{1}'. Consider replacing this start/end action pair with a '{2}' or moving actions registered in '{3}' that depend on this start action to '{0}'.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1008</Id>
          <Category>AnalyzerPerformance</Category>
          <Title>Avoid storing per-compilation data into the fields of a diagnostic analyzer.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Instance of a diagnostic analyzer might outlive the lifetime of compilation. Hence, storing per-compilation data, such as symbols, into the fields of a diagnostic analyzer might cause stale compilations to stay alive and cause memory leaks.  Instead, you should store this data on a separate type instantiated in a compilation start action, registered using 'AnalysisContext.RegisterCompilationStartAction' API. An instance of this type will be created per-compilation and it won't outlive compilation's lifetime, hence avoiding memory leaks.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Avoid storing per-compilation data of type '{0}' into the fields of a diagnostic analyzer.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1005</Id>
          <Category>AnalyzerCorrectness</Category>
          <Title>ReportDiagnostic invoked with an unsupported DiagnosticDescriptor.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>ReportDiagnostic should only be invoked with supported DiagnosticDescriptors that are returned from DiagnosticAnalyzer.SupportedDiagnostics property. Otherwise, the reported diagnostic will be filtered out by the analysis engine.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>ReportDiagnostic invoked with an unsupported DiagnosticDescriptor '{0}'.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1010</Id>
          <Category>Correctness</Category>
          <Title>Create code actions should have a unique EquivalenceKey for FixAll occurrences support.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A CodeFixProvider that intends to support fix all occurrences must classify the registered code actions into equivalence classes by assigning it an explicit, non-null equivalence key which is unique across all registered code actions by this fixer. This enables the FixAllProvider to fix all diagnostics in the required scope by applying code actions from this fixer that are in the equivalence class of the trigger code action.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Provide an explicit argument for optional parameter '{0}', which is non-null and unique across all code actions created by this fixer.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS1011</Id>
          <Category>Correctness</Category>
          <Title>Use code actions that have a unique EquivalenceKey for FixAll occurrences support.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A CodeFixProvider that intends to support fix all occurrences must classify the registered code actions into equivalence classes by assigning it an explicit, non-null equivalence key which is unique across all registered code actions by this fixer. This enables the FixAllProvider to fix all diagnostics in the required scope by applying code actions from this fixer that are in the equivalence class of the trigger code action.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' has the default value of 'null' for property '{1}'. Either override this property on '{0}' to return a non-null and unique value across all code actions per-fixer or use such an existing code action.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0006</Id>
          <Category>Reliability</Category>
          <Title>Do not mix attributes from different versions of MEF</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>#N/A</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not mix attributes from different versions of MEF</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0023</Id>
          <Category>Reliability</Category>
          <Title>Parts exported with MEFv2 must be marked as Shared</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>#N/A</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Parts exported with MEFv2 must be marked as Shared</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1801</Id>
          <Category>Performance</Category>
          <Title>Review unused parameters</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A method signature includes a parameter that is not used in the method body.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameter {0} of method {1} is never used. Remove the parameter or use it in the method body.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182268.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1806</Id>
          <Category>Performance</Category>
          <Title>Do not ignore method results</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} creates a new instance of {1} which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182273.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1823</Id>
          <Category>Performance</Category>
          <Title>Avoid unused private fields</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Private fields were detected that do not appear to be accessed in the assembly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Unused field '{0}'.</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms245042.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1500</Id>
          <Category>Maintainability</Category>
          <Title>Variable names should not match field names</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An instance method declares a parameter or a local variable whose name matches an instance field of the declaring type, leading to errors.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>{0}, a variable declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1812</Id>
          <Category>Performance</Category>
          <Title>Avoid uninstantiated internal classes</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An instance of an assembly-level type is not created by code in the assembly.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Avoid uninstantiated internal classes</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2214</Id>
          <Category>Usage</Category>
          <Title>Do not call overridable methods in constructors</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not call overridable methods in constructors</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182331.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2219</Id>
          <Category>Usage</Category>
          <Title>Do not raise exceptions in finally clauses</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When an exception is raised in a finally clause, the new exception hides the active exception. This makes the original error difficult to detect and debug.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not raise an exception from within a finally clause. </MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb386041.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1821</Id>
          <Category>Performance</Category>
          <Title>Remove empty Finalizers</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Finalizers should be avoided where possible, to avoid the additional performance overhead involved in tracking object lifetime.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove empty Finalizers</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/bb264476.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1802</Id>
          <Category>Performance</Category>
          <Title>Use literals where appropriate</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A field is declared static and read-only (Shared and ReadOnly in Visual Basic), and is initialized by using a value that is computable at compile time. Because the value that is assigned to the targeted field is computable at compile time, change the declaration to a const (Const in Visual Basic) field so that the value is computed at compile time instead of at run?time.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field {0} is declared as 'static readonly' but is initialized with a constant value '{1}'. Mark this field as 'const' instead.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182280.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1814</Id>
          <Category>Performance</Category>
          <Title>Prefer jagged arrays over multidimensional</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A jagged array is an array whose elements are arrays. The arrays that make up the elements can be of different sizes, leading to less wasted space for some sets of data.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is a multidimensional array. Replace it with a jagged array if possible.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182277.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1822</Id>
          <Category>Performance</Category>
          <Title>Mark members as static</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Members that do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. This can give you a measurable performance gain for performance-sensitive code.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Member {0} does not access instance data and can be marked as static (Shared in VisualBasic)</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2119</Id>
          <Category>Security</Category>
          <Title>Seal methods that satisfy private interfaces</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An inheritable public type provides an overridable method implementation of an internal (Friend in Visual Basic) interface. To fix a violation of this rule, prevent the method from being overridden outside the assembly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Seal methods that satisfy private interfaces</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182313.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2200</Id>
          <Category>Usage</Category>
          <Title>Rethrow to preserve stack details.</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Re-throwing caught exception changes stack information.</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182363.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2000</Id>
          <Category>Reliability</Category>
          <Title>Dispose Objects Before Losing Scope</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Because an exceptional event might occur that will prevent the finalizer of an object from running, the object should be explicitly disposed before all references to it are out of scope.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Dispose Objects Before Losing Scope</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2109</Id>
          <Category>Security</Category>
          <Title>Review visible event handlers</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A public or protected event-handling method was detected. Event-handling methods should not be exposed unless absolutely necessary.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Consider making {0} not externally visible or ensure that it is benign code.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0016</Id>
          <Category>ApiDesign</Category>
          <Title>Add public types and members to the declared API</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>All public types and members should be declared in PublicAPI.txt. This draws attention to API changes in the code reviews and source control history, and helps prevent breaking changes.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Symbol '{0}' is not part of the declared API.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0017</Id>
          <Category>ApiDesign</Category>
          <Title>Remove deleted types and members from the declared API</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When removing a public type or member the corresponding entry in PublicAPI.txt should also be removed. This draws attention to API changes in the code reviews and source control history, and helps prevent breaking changes.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Symbol '{0}' is part of the declared API, but is either not public or could not be found</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0022</Id>
          <Category>ApiDesign</Category>
          <Title>Constructor make noninheritable base class inheritable</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Constructor makes its noninheritable base class inheritable, thereby exposing its protected members.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0024</Id>
          <Category>ApiDesign</Category>
          <Title>The contents of the public API files are invalid</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The contents of the public API files are invalid: {0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0025</Id>
          <Category>ApiDesign</Category>
          <Title>Do not duplicate symbols in public API files</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The symbol '{0}' appears more than once in the public API files.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0005</Id>
          <Category>Performance</Category>
          <Title>Do not use generic CodeAction.Create to create CodeAction</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not use generic CodeAction.Create to create CodeAction</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0019</Id>
          <Category>Reliability</Category>
          <Title>SymbolDeclaredEvent must be generated for source symbols</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Compilation event queue is required to generate symbol declared events for all declared source symbols. Hence, every source symbol type or one of its base types must generate a symbol declared event.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>SymbolDeclaredEvent must be generated for source symbols</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0001</Id>
          <Category>Performance</Category>
          <Title>Use SpecializedCollections.EmptyEnumerable()</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use SpecializedCollections.EmptyEnumerable()</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0002</Id>
          <Category>Performance</Category>
          <Title>Use SpecializedCollections.SingletonEnumerable()</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use SpecializedCollections.SingletonEnumerable()</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0013</Id>
          <Category>Performance</Category>
          <Title>Do not invoke Diagnostic.Descriptor</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Accessing the Descriptor property of Diagnostic in compiler layer leads to unnecessary string allocations for fields of the descriptor that are not utilized in command line compilation. Hence, you should avoid accessing the Descriptor of the compiler diagnostics here. Instead you should directly access these properties off the Diagnostic type.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not invoke property '{0}' on type '{1}', instead directly access the required member{2} on '{1}'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0012</Id>
          <Category>Reliability</Category>
          <Title>Do not call ToImmutableArray on an ImmutableArray value</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>#N/A</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not call ToImmutableArray on an ImmutableArray value</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1824</Id>
          <Category>Performance</Category>
          <Title>Mark assemblies with NeutralResourcesLanguageAttribute</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language that was used to display the resources of a neutral culture for an assembly. This improves lookup performance for the first resource that you load and can reduce your working set.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Mark assemblies with NeutralResourcesLanguageAttribute</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb385967.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1813</Id>
          <Category>Performance</Category>
          <Title>Avoid unsealed attributes</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The .NET Framework class library provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy. Sealing the attribute eliminates the search through the inheritance hierarchy and can improve performance.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Avoid unsealed attributes</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182267.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1820</Id>
          <Category>Performance</Category>
          <Title>Test for empty strings using string length</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Comparing strings by using the String.Length property or the String.IsNullOrEmpty method is significantly faster than using Equals.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Test for empty strings using 'string.Length' property or 'string.IsNullOrEmpty' method instead of an Equality check.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/library/ms182279.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2002</Id>
          <Category>Reliability</Category>
          <Title>Do not lock on objects with weak identity</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not lock on objects with weak identity</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182290.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2216</Id>
          <Category>Usage</Category>
          <Title>Disposable types should declare finalizer</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A type that implements System.IDisposable and has fields that suggest the use of unmanaged resources does not implement a finalizer, as described by Object.Finalize.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Disposable types should declare finalizer</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182329.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2241</Id>
          <Category>Usage</Category>
          <Title>Provide correct arguments to formatting methods</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The format argument that is passed to System.String.Format does not contain a format item that corresponds to each object argument, or vice versa.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Provide correct arguments to formatting methods</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182361.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2242</Id>
          <Category>Usage</Category>
          <Title>Test for NaN correctly</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>This expression tests a value against Single.Nan or Double.Nan. Use Single.IsNan(Single) or Double.IsNan(Double) to test the value.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Test for NaN correctly</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264491.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2243</Id>
          <Category>Usage</Category>
          <Title>Attribute string literals should parse correctly</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The string literal parameter of an attribute does not parse correctly for a URL, a GUID, or a version.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In the constructor of '{0}', change the value of argument '{1}', which is currently "{2}", to something that can be correctly parsed as '{3}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264490.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1304</Id>
          <Category>Globalization</Category>
          <Title>Specify CultureInfo</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A method or constructor calls a member that has an overload that accepts a System.Globalization.CultureInfo parameter, and the method or constructor does not call the overload that takes the CultureInfo parameter. When a CultureInfo or System.IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The behavior of '{0}' could vary based on the current user's locale settings. Replace this call in '{1}' with a call to '{2}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182189.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1305</Id>
          <Category>Globalization</Category>
          <Title>Specify IFormatProvider</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be based on the input from/output displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider'. Otherwise, if the result will be stored and accessed by software, such as when it is loaded from disk/database and when it is persisted to disk/database, specify 'CultureInfo.InvariantCulture'</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The behavior of '{0}' could vary based on the current user's locale settings. Replace this call in '{1}' with a call to '{2}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182190.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1307</Id>
          <Category>Globalization</Category>
          <Title>Specify StringComparison</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A string comparison operation uses a method overload that does not set a StringComparison parameter. If the result will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The behavior of '{0}' could vary based on the current user's locale settings. Replace this call in '{1}' with a call to '{2}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb386080.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1308</Id>
          <Category>Globalization</Category>
          <Title>Normalize strings to uppercase</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Strings should be normalized to uppercase. A small group of characters cannot make a round trip when they are converted to lowercase. To make a round trip means to convert the characters from one locale to another locale that represents character data differently, and then to accurately retrieve the original characters from the converted characters.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In method '{0}', replace the call to '{1}' with '{2}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb386042.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1816</Id>
          <Category>Usage</Category>
          <Title>Dispose methods should call SuppressFinalize</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual?Basic).</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change {0} to call {1}. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-US/library/ms182269.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2208</Id>
          <Category>Usage</Category>
          <Title>Instantiate argument exceptions correctly</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182347.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1309</Id>
          <Category>Globalization</Category>
          <Title>Use ordinal stringcomparison</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A string comparison operation that is nonlinguistic does not set the StringComparison parameter to either Ordinal or OrdinalIgnoreCase. By explicitly setting the parameter to either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, becomes more correct, and becomes more reliable.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Use ordinal stringcomparison</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/bb385972.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1601</Id>
          <Category>Mobility</Category>
          <Title>Do not use timers that prevent power state changes</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Higher-frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not use timers that prevent power state changes</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2201</Id>
          <Category>Usage</Category>
          <Title>Do not raise reserved exception types</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An exception of type that is not sufficiently specific or reserved by the runtime should never be raised by user code. This makes the original error difficult to detect and debug. If this exception instance might be thrown, use a different exception type.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Exception type {0} is not sufficiently specific.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182338.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1810</Id>
          <Category>Performance</Category>
          <Title>Initialize reference type static fields inline</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A reference type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Initialize all static fields in '{0}' when those fields are declared and remove the explicit static constructor</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182275.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2207</Id>
          <Category>Usage</Category>
          <Title>Initialize value type static fields inline</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A value type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Initialize all static fields in '{0}' when those fields are declared and remove the explicit static constructor</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182346.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2215</Id>
          <Category>Usage</Category>
          <Title>Dispose Methods Should Call Base Class Dispose</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If a type inherits from a disposable type, it must call the Dispose method of the base type from its own Dispose method.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Dispose Methods Should Call Base Class Dispose</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1825</Id>
          <Category>Performance</Category>
          <Title>Avoid zero-length array allocations.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Avoid unnecessary zero-length array allocations.  Use Array.Empty&lt;T&gt;() instead.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0014</Id>
          <Category>Performance</Category>
          <Title>Do not use Enumerable methods on indexable collections. Instead use the collection directly</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>This collection is directly indexable. Going through LINQ here causes unnecessary allocations and CPU work.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not use Enumerable methods on indexable collections. Instead use the collection directly</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1401</Id>
          <Category>Interoperability</Category>
          <Title>P/Invokes should not be visible</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A public or protected method in a public type has the System.Runtime.InteropServices.DllImportAttribute attribute (also implemented by the Declare keyword in Visual Basic). Such methods should not be exposed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>P/Invoke method '{0}' should not be visible</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182209.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2101</Id>
          <Category>Globalization</Category>
          <Title>Specify marshaling for P/Invoke string arguments</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A platform invoke member allows partially trusted callers, has a string parameter, and does not explicitly marshal the string. This can cause a potential security vulnerability.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Specify marshaling for P/Invoke string arguments</MessageFormat>
          <HelpLinkUri>http://msdn.microsoft.com/library/ms182319.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2205</Id>
          <Category>Usage</Category>
          <Title>Use managed equivalents of win32 api</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An operating system invoke method is defined and a method that has the equivalent functionality is located in the .NET Framework class library.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Use managed equivalents of win32 api</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0015</Id>
          <Category>Reliability</Category>
          <Title>Always consume the value returned by methods marked with PreserveSigAttribute</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>PreserveSigAttribute indicates that a method will return an HRESULT, rather than throwing an exception. Therefore, it is important to consume the HRESULT returned by the method, so that errors can be detected. Generally, this is done by calling Marshal.ThrowExceptionForHR.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consume the hresult returned by method '{0}' and call Marshal.ThrowExceptionForHR.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1414</Id>
          <Category>Interoperability</Category>
          <Title>Mark boolean PInvoke arguments with MarshalAs</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The Boolean data type has multiple representations in unmanaged code.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Add the MarshalAsAttribute to parameter {0} of P/Invoke {1}. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0018</Id>
          <Category>Reliability</Category>
          <Title>Do not create tasks without passing a TaskScheduler</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Do not create tasks unless you are using one of the overloads that takes a TaskScheduler. The default is to schedule on TaskScheduler.Current, which would lead to deadlocks. Either use TaskScheduler.Default to schedule on the thread pool, or explicitly pass TaskScheduler.Current to make your intentions clear.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not create tasks without passing a TaskScheduler</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA1704</Id>
          <Category>Naming</Category>
          <Title>Identifiers should be spelled correctly</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of an externally visible identifier contains one or more words that are not recognized by the Microsoft spelling checker library.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Correct the spelling of '{0}' in assembly name {1}.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RS0010</Id>
          <Category>Documentation</Category>
          <Title>Avoid using cref tags with a prefix</Title>
          <CustomTags>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Use of cref tags with prefixes should be avoided, since it prevents the compiler from verifying references and the IDE from updating references during refactorings. It is permissible to suppress this error at a single documentation site if the cref must use a prefix because the type being mentioned is not findable by the compiler. For example, if a cref is mentioning a special attribute in the full framework but you're in a file that compiles against the portable framework, or if you want to reference a type at higher layer of Roslyn, you should suppress the error. You should not suppress the error just because you want to take a shortcut and avoid using the full syntax.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Avoid using cref tags with a prefix</MessageFormat>
          <HelpLinkUri />
        </Rule>
      </Rules>
    </RuleCollection>
    <RuleCollection>
      <Name>RefactoringEssentials</Name>
      <Rules>
        <Rule>
          <Id>RECS0120</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Constructor in abstract class should not be public</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Constructor in abstract class should not be public</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0039</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;().Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;().Any()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0080</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt; (extended cases)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0133</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Parameter name differs in base declaration</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameter name differs in base declaration</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0149</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Finds potentially erroneous calls to Object.Equals</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Call to base.Equals resolves to Object.Equals, which is reference equality</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0125</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Check if a namespace corresponds to a file location</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0110</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Condition is always 'true' or always 'false'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Condition is always '{0}'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0093</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Convert 'if' to '&amp;&amp;' expression</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0095</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Warns about using lock (this) or MethodImplOptions.Synchronized</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0077</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Simplify negative relational expression</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Simplify negative relational expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0083</Id>
          <Category>Code Notifications</Category>
          <Title>Shows NotImplementedException throws in the quick task bar</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Not implemented</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0099</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Parameter is assigned but its value is never used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameter is assigned but its value is never used</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0084</Id>
          <Category>Redundancies in Code</Category>
          <Title>Value assigned to a variable or parameter is not used in all execution path</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Assignment is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0129</Id>
          <Category>Redundancies in Code</Category>
          <Title>Removes 'internal' modifiers that are not required</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'internal' modifier is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0145</Id>
          <Category>Redundancies in Code</Category>
          <Title>Removes 'private' modifiers that are not required</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'private' modifier is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0112</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Checks if static events are removed</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Subscription to static events without unsubscription may cause memory leaks</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0081</Id>
          <Category>Compiler Warnings</Category>
          <Title>Validate Xml docs</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0003</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Call to base member with implicit default parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Call to base member with implicit default parameters</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0016</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Bitwise operation on enum which has no [Flags] attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Bitwise operation on enum not marked with [Flags] attribute</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0017</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Possible compare of value type with 'null'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Possible compare of value type with 'null'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0018</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Comparison of floating point numbers with equality operator</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0019</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>'?:' expression has identical true and false branches</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'?:' expression has identical true and false branches</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0020</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Delegate subtraction has unpredictable result</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Delegate subtraction has unpredictable result</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0021</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Warns about calls to virtual member functions occuring in the constructor</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Virtual member call in constructor</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0022</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>A catch clause that catches System.Exception and has an empty body</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Empty general catch clause suppresses any error</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0088</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Comparing equal expression for equality is usually useless</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with '{0}'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0023</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Event unsubscription via anonymous delegate is useless</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Event unsubscription via anonymous delegate is useless</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0130</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>'for' loop control variable is never modified</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'for' loop control variable is never modified</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0155</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Finds issues with format strings</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0135</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Function does not reach its end or a 'return' statement by any of possible execution paths</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} never reaches end or a 'return' statement</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0117</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Local variable has the same name as a member and hides it</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Local variable '{0}' hides {1} '{2}'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0024</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Lowercase 'l' is often confused with '1'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Long literal ends with 'l' instead of 'L'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0146</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Member hides static member from outer class</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} '{1}' hides {2} from outer class</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0137</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Method with optional parameter is hidden by overload</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} with optional parameter is hidden by overload</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0025</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Non-readonly field referenced in 'GetHashCode()'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Non-readonly field referenced in 'GetHashCode()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0143</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Cannot resolve symbol in text argument</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The parameter '{0}' can't be resolved</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0162</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>The parameter name is on the wrong argument</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The parameter name is on the wrong argument</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0026</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Possible unassigned object created by 'new'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Possible unassigned object created by 'new' expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0027</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Operator Is can be used instead of comparing object GetType() and instances of System.Type object</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Operator 'is' can be used</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0124</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>The value of an optional parameter in a method does not match the base method</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Optional parameter value {0} differs from base {1} '{2}'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0028</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>C# doesn't support optional 'ref' or 'out' parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>C# doesn't support optional 'ref' or 'out' parameters</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0082</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Parameter has the same name as a member and hides it</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0136</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Parameter name differs in partial method definition</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameter name differs in partial method definition should be '{0}'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0089</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Invocation of polymorphic field event leads to unpredictable result since invocation lists are not virtual</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The event `{0}' can only appear on the left hand side of `+=' or `-=' operator</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0111</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Check if a readonly field is used as assignment target</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0139</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Possible multiple enumeration of IEnumerable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Possible multiple enumeration of IEnumerable</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0157</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>[ThreadStatic] doesn't work with instance fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>ThreadStatic does nothing on instance fields</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0029</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Warns about property or indexer setters and event adders or removers that do not use the value parameter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The {0} does not use the 'value' parameter</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0009</Id>
          <Category>NUnit</Category>
          <Title>Non public methods are not found by NUnit</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>NUnit test methods should be public</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0002</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>Convert anonymous method to method group</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0010</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>'?:' expression can be converted to '??' expression</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'?:' expression can be converted to '??' expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0152</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>Convert 'if' to '??'</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Convert to '??' expresssion</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0012</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>'if' statement can be re-written as 'switch' statement</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Convert to 'switch' statement</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0013</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>Convert 'Nullable&lt;T&gt;' to the short form 'T?'</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Nullable type can be simplified</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0161</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>Convert property to auto property</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Convert to auto property</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0132</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>Convert to lambda with expression</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Can be converted to expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0014</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>If all fields, properties and methods members are static, the class can be made static.</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>This class is recommended to be defined as static</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0090</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>Foreach loops are more efficient</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'for' loop can be converted to 'foreach'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0015</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>If an extension method is called as static method convert it to method syntax</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Convert static method call to extension method call</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0091</Id>
          <Category>Language Usage Opportunities</Category>
          <Title>Use 'var' keyword when possible</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use 'var' keyword</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0004</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>An empty public constructor without parameters is redundant.</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Empty constructor is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0005</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>Empty destructor is redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Empty destructor is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0006</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>Empty namespace declaration is redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Empty namespace declaration is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0007</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>The default underlying type of enums is int, so defining it explicitly is redundant.</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Default underlying type of enums is already int</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0001</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>Class is declared partial but has only one part</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Partial class with single part</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0126</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>This is generated by the compiler and can be safely removed</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant base constructor call</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0122</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>Initializing field with default value is redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Initializing field by default value is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0159</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>The override of a virtual member is redundant because it consists of only a call to the base</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant method override</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0008</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>'sealed' modifier is redundant in sealed classes</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'sealed' modifier is redundant in sealed classes</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0154</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>Parameter is never used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameter '{0}' is never used</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0096</Id>
          <Category>Redundancies in Symbol Declarations</Category>
          <Title>Type parameter is never used</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type parameter '{0}' is never used</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0085</Id>
          <Category>Redundancies in Code</Category>
          <Title>When initializing explicitly typed local variable or array type, array creation expression can be replaced with array initializer.</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant array creation expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0065</Id>
          <Category>Redundancies in Code</Category>
          <Title>Expression is always 'true' or always 'false'</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Expression is always '{0}'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0098</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Finds redundant null coalescing expressions such as expr ?? expr</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0066</Id>
          <Category>Redundancies in Code</Category>
          <Title>Double negation is redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Double negation is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0067</Id>
          <Category>Redundancies in Code</Category>
          <Title>Empty statement is redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Empty statement is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0068</Id>
          <Category>Redundancies in Code</Category>
          <Title>'true' is redundant as for statement condition</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>true is redundant as for statement condition, thus can be safely ommited</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0069</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant explicit property name</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The name can be inferred from the initializer expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0141</Id>
          <Category>Redundancies in Code</Category>
          <Title>Default argument value is redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The parameter is optional with the same default value</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0070</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant explicit argument name specification</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant argument name specification</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0071</Id>
          <Category>Redundancies in Code</Category>
          <Title>Parentheses are redundant if attribute has no arguments</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parentheses are redundant if attribute has no arguments</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0072</Id>
          <Category>Redundancies in Code</Category>
          <Title>'base.' is redundant and can safely be removed</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'base.' is redundant and can safely be removed</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0121</Id>
          <Category>Redundancies in Code</Category>
          <Title>Comparison of a boolean value with 'true' or 'false' constant</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Comparison with '{0}' is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0073</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant case label</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'case' label is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0109</Id>
          <Category>Redundancies in Code</Category>
          <Title>Catch clause with a single 'throw' statement is redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0134</Id>
          <Category>Redundancies in Code</Category>
          <Title>Check for inequality before assignment is redundant if (x != value) x = value;</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant condition check before assignment</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0113</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant comma in array initializer</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant comma in array initializer</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0100</Id>
          <Category>Redundancies in Code</Category>
          <Title>When 'is' keyword is used, which implicitly check null</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant comparison with 'null'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0164</Id>
          <Category>Redundancies in Code</Category>
          <Title>Explicit delegate creation expression is redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant explicit delegate declaration</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0074</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant empty 'default' switch branch</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant empty 'default' switch branch</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0118</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant empty finally block</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant empty finally block</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0086</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant 'IEnumerable.Cast&lt;T&gt;' or 'IEnumerable.OfType&lt;T&gt;' call</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant '{0}' call</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0078</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant explicit type in array creation</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant explicit array type specification</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0103</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant explicit size in array creation</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the redundant size indicator</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0138</Id>
          <Category>Redundancies in Code</Category>
          <Title>Value types are implicitly convertible to nullables</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant explicit nullable type creation</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0101</Id>
          <Category>Redundancies in Code</Category>
          <Title>Type is either mentioned in the base type list of another part or in another base type</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0147</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant 'else' keyword</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant 'else' keyword</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0094</Id>
          <Category>Redundancies in Code</Category>
          <Title>Explicit type specification can be removed as it can be implicitly inferred</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant lambda explicit type specification</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0140</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant lambda signature parentheses</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant lambda signature parentheses</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0079</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant operand in logical conditional expression</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant operand in logical conditional expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0104</Id>
          <Category>Redundancies in Code</Category>
          <Title>When object creation uses object or collection initializer, empty argument list is redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Empty argument list is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0144</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant empty object or collection initializer</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Empty object or collection initializer is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0123</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant 'string.ToCharArray()' call</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant 'string.ToCharArray()' call</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0075</Id>
          <Category>Redundancies in Code</Category>
          <Title>Redundant conditional expression</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant conditional expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0106</Id>
          <Category>Redundancies in Code</Category>
          <Title>Finds calls to ToString() which would be generated automatically by the compiler</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redundant 'ToString()' call</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0158</Id>
          <Category>Redundancies in Code</Category>
          <Title>Unsafe modifier in redundant in unsafe context or when no unsafe constructs are used</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'unsafe' modifier is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0076</Id>
          <Category>Redundancies in Code</Category>
          <Title>Remove redundant statement</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Statement is redundant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0128</Id>
          <Category>Redundancies in Code</Category>
          <Title>Detects when no delegate parameter is used in the anonymous method body</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Specifying signature is redundant because no parameter is used</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0114</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Use method IsInstanceOfType</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use method IsInstanceOfType (...)</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0116</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace usages of 'Count()' with call to 'Any()'</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use '{0}' for increased performance</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0148</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>'is' operator can be used</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use 'is' operator</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0142</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Use array creation expression</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use array create expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0063</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Warns when a culture-aware 'StartsWith' call is used by default.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'StartsWith' is culture-aware and missing a StringComparison argument</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0062</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Warns when a culture-aware 'LastIndexOf' call is used by default.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'LastIndexOf' is culture-aware and missing a StringComparison argument</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0060</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Warns when a culture-aware 'IndexOf' call is used by default.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'IndexOf' is culture-aware and missing a StringComparison argument</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0061</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Warns when a culture-aware 'EndsWith' call is used by default.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'EndsWith' is culture-aware and missing a StringComparison argument</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0064</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Warns when a culture-aware 'string.CompareTo' call is used by default</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'string.CompareTo' is culture-aware</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0119</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Warns when a culture-aware 'Compare' call is used by default</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'string.Compare' is culture-aware</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0087</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Simplify LINQ expression</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Simplify LINQ expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0059</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Conditional expression can be simplified</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Simplify conditional expression</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0127</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Uses shorter string.IsNullOrEmpty call instead of a longer condition</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Expression can be replaced with '{0}'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0058</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Redundant Where() call with predicate followed by SingleOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with single call to 'SingleOrDefault()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0057</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Redundant Where() call with predicate followed by Single()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with single call to 'Single()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0056</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Redundant Where() call with predicate followed by LongCount()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with single call to 'LongCount()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0055</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Redundant Where() call with predicate followed by LastOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with single call to 'LastOrDefault()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0054</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Redundant Where() call with predicate followed by Last()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with single call to 'Last()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0053</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Redundant Where() call with predicate followed by FirstOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with single call to 'FirstOrDefault()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0052</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Redundant Where() call with predicate followed by First()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with single call to 'First()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0051</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Redundant Where() call with predicate followed by Count()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with single call to 'Count()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0050</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Redundant Where() call with predicate followed by Any()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with single call to 'Any()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0049</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with simple assignment</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with simple assignment</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0048</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;().Where()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;().Where()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0047</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;().SingleOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;().SingleOrDefault()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0046</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;().Single()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;().Single()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0045</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;().LongCount()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;().LongCount()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0044</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;().LastOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;().LastOrDefault()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0043</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;().Last()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;().Last()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0038</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0042</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;().FirstOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;().FirstOrDefault()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0041</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;().First()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;().First()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0040</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to OfType&lt;T&gt;().Count()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace with 'OfType&lt;T&gt;().Count()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0037</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to LastOrDefault&lt;T&gt;()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Expression can be simlified to 'LastOrDefault&lt;T&gt;()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0036</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Replace with call to FirstOrDefault&lt;T&gt;()</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Expression can be simlified to 'FirstOrDefault&lt;T&gt;()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0131</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Check for reference equality instead</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'Object.ReferenceEquals' is always false because it is called with value type</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0035</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Possible mistaken call to 'object.GetType()'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Possible mistaken call to 'object.GetType()'</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0102</Id>
          <Category>Redundancies in Code</Category>
          <Title>Finds parameters that can be demoted to a base class</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameter can be declared with base type</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0092</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Convert field to readonly</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Convert field to readonly</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0034</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Empty control statement body</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>';' should be avoided. Use '{}' instead</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0153</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Convert local variable or field to constant</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Convert to constant</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0033</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Convert 'if' to '||' expression</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0032</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Convert 'if-do-while' to 'while' statement</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Statement can be simplified to 'while' statement</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0031</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Base parameter has 'params' modifier, but missing in overrider</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Base method '{0}' has a 'params' modifier</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0030</Id>
          <Category>Common Practices and Code Improvements</Category>
          <Title>Suggests using the class declaring a static function when calling it</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Call to static member via a derived class</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0163</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Suggest the usage of the nameof operator</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use 'nameof({0})' expression instead.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0108</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Warns about static fields in generic types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Static field in generic type</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>RECS0165</Id>
          <Category>Potential Code Quality Issues</Category>
          <Title>Asynchronous methods should return a Task instead of void</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>Telemetry</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Asynchronous method '{0}' should not return void</MessageFormat>
          <HelpLinkUri />
        </Rule>
      </Rules>
    </RuleCollection>
    <RuleCollection>
      <Name>CodeCracker.CSharp</Name>
      <Rules>
        <Rule>
          <Id>CC0095</Id>
          <Category>Style</Category>
          <Title>Use string interpolation instead of arguments on Console.WriteLine</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>String interpolation allows for better reading of the resulting string when compared to Console.WriteLine arguments. You should use Console.WriteLine with arguments only when another method is supplying the format string.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use string interpolation</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0095.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0088</Id>
          <Category>Style</Category>
          <Title>Consider use ""</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Consider using "" instead of 'string.Empty'</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use "" instead of 'string.Empty'</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0088.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0084</Id>
          <Category>Style</Category>
          <Title>Consider use 'String.Empty'</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Consider user 'String.Empty' instead of ""</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use 'String.Empty' instead of ""</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0084.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0001</Id>
          <Category>Style</Category>
          <Title>You should use 'var' whenever possible.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Usage of an implicit type improve readability of the code.
Code depending on types for their readability should be refactored with better variable names or by introducing well-named methods.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use 'var' instead of specifying the type name.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0001.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0105</Id>
          <Category>Style</Category>
          <Title>You should use 'var' whenever possible.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Usage of an implicit type improve readability of the code.
Code depending on types for their readability should be refactored with better variable names or by introducing well-named methods.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use 'var' instead of specifying the type name.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0105.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0020</Id>
          <Category>Style</Category>
          <Title>You should remove the lambda expression when it only invokes a method with the same signature</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>The extra unnecessary layer of indirection induced by the lambda expression may be avoided by passing the method group instead.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>You should remove the lambda expression and pass just '{0}' instead.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0020.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0072</Id>
          <Category>Style</Category>
          <Title>Remove Async termination when method is not asynchronous.</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Remove Async termination when method is not asynchronous.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider remove 'Async' from method {0}.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0072.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0017</Id>
          <Category>Style</Category>
          <Title>Use auto property</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Auto properties offer a more concise way of defining a property. If you are using simple getters and setters you are able to simplify your code with autoproperties.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change {0} to an auto property</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0017.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0061</Id>
          <Category>Style</Category>
          <Title>Asynchronous method can be terminated with the 'Async' keyword.</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Asynchronous method can be terminated with the 'Async' keyword.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change method name to {0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0061.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0047</Id>
          <Category>Style</Category>
          <Title>You should change to 'private set' whenever possible.</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Use private set for automatic properties.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider using a 'private set'.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0047.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0037</Id>
          <Category>Style</Category>
          <Title>Remove commented code.</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Commented code should be removed.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0037.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0065</Id>
          <Category>Style</Category>
          <Title>Remove trailing whitespace</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Trailing whitespaces are ugly and show sloppiness. Remove them.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove trailing whitespace</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0065.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0038</Id>
          <Category>Style</Category>
          <Title>You should use expression bodied members whenever possible.</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Usage of an expression bodied members improve readability of the code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use an expression bodied member.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0038.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0019</Id>
          <Category>Style</Category>
          <Title>Use 'switch'</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Multiple 'if' and 'else if' on the same variable can be replaced with a 'switch'on the variable

Note: This diagnostic trigger for 3 or more 'case' statements</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>You could use 'switch' instead of 'if'.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0019.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0018</Id>
          <Category>Style</Category>
          <Title>Use the existence operator</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>The null-propagating operator allow for terse code to handle potentially null variables.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0018.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0048</Id>
          <Category>Style</Category>
          <Title>Use string interpolation instead of String.Format</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>String interpolation allows for better reading of the resulting string when compared to String.Format. You should use String.Format only when another method is supplying the format string.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use string interpolation</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0048.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0062</Id>
          <Category>Style</Category>
          <Title>You should add letter 'I' before interface name.</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Consider naming interfaces starting with 'I'.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider naming interfaces starting with 'I'.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0062.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0005</Id>
          <Category>Style</Category>
          <Title>Empty Object Initializer</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An object initializer without any arguments can be replaced with the standard constructor syntax.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0005.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0006</Id>
          <Category>Style</Category>
          <Title>Use foreach</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>You can use foreach instead of for.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0006.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0008</Id>
          <Category>Style</Category>
          <Title>Use object initializer</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When possible an object initializer should be used to initialize the properties of an object instead of multiple assignments.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0008.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0009</Id>
          <Category>Style</Category>
          <Title>Use object initializer</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When possible an object initializer should be used to initialize the properties of an object instead of multiple assignments.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0009.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0013</Id>
          <Category>Style</Category>
          <Title>Use ternary operator</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0013.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0014</Id>
          <Category>Style</Category>
          <Title>Use ternary operator</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0014.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0015</Id>
          <Category>Style</Category>
          <Title>Unnecessary Parenthesis</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There is no need to specify that the no-parameter constructor is used with  an initializer as it is implicit</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0015.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0070</Id>
          <Category>Reliability</Category>
          <Title>Use ConfigureAwait(false) on awaited task.</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider using ConfigureAwait(false) on the awaited task.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0070.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0090</Id>
          <Category>Maintainability</Category>
          <Title>You have missing/unexistent parameters in Xml Docs</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>You have missing/unexistent parameters in Xml Docs</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0090.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0097</Id>
          <Category>Maintainability</Category>
          <Title>You have missing/unexistent parameters in Xml Docs</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>You have missing/unexistent parameters in Xml Docs</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0097.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0073</Id>
          <Category>Refactoring</Category>
          <Title>Add braces to switch sections.</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add braces for each section in this switch</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0073.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0035</Id>
          <Category>Refactoring</Category>
          <Title>Ordering member inside this type.</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Ordering member inside this type.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0035.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0075</Id>
          <Category>Refactoring</Category>
          <Title>Merge nested ifs</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Merge nested ifs into a single if</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0075.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0082</Id>
          <Category>Refactoring</Category>
          <Title>Change for expression value</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>You may change an expression for its value if the expression is made of literal values.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change '{0}' for expression value</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0082.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0043</Id>
          <Category>Refactoring</Category>
          <Title>Change Any to All</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change Any to All</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0043.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0092</Id>
          <Category>Refactoring</Category>
          <Title>Change All to Any</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change All to Any</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0092.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0076</Id>
          <Category>Refactoring</Category>
          <Title>Split into nested if</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Split into nested if.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0076.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0071</Id>
          <Category>Refactoring</Category>
          <Title>Consider introduce field for constructor parameters.</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Consider introduce field for constructor parameters.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Introduce a field for parameter: {0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0071.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0044</Id>
          <Category>Refactoring</Category>
          <Title>You should use a class</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>When the method has more than three parameters, use new class.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0044.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0079</Id>
          <Category>Refactoring</Category>
          <Title>Change numeric literal expression</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>You may change {0} to a {1} literal type.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0079.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0045</Id>
          <Category>Refactoring</Category>
          <Title>Regular string</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change to regular string</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0045.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0046</Id>
          <Category>Refactoring</Category>
          <Title>Verbatim string</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change to verbatim string</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0046.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0042</Id>
          <Category>Refactoring</Category>
          <Title>Invert the for loop counting.</Title>
          <CustomTags />
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make it a for loop that {0} the counter.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0042.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0039</Id>
          <Category>Performance</Category>
          <Title>Don't concatenate strings in loops</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Don't concatenate strings in a loop. Using a StringBuilder will require less memory and time.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Don't concatenate '{0}' in a loop</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0039.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0060</Id>
          <Category>Usage</Category>
          <Title>Abstract class should not have public constructors.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Constructor should not be public.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0060.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0002</Id>
          <Category>Usage</Category>
          <Title>Invalid argument name</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The string passed as the 'paramName' argument of ArgumentException constructor must be the name of one of the method arguments.
It can be either specified directly or using the nameof() operator (C#6 only)</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type argument '{0}' is not in the argument list.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0002.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0026</Id>
          <Category>Usage</Category>
          <Title>Call Extension Method As Extension</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not call '{0}' method of class '{1}' as a static method</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0026.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0022</Id>
          <Category>Usage</Category>
          <Title>Should dispose object</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When a disposable object is created it should be disposed as soon as possible.
This warning will appear if you create a disposable object and don't store, return or dispose it.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} should be disposed.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0022.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0029</Id>
          <Category>Naming</Category>
          <Title>Disposables Should Call Suppress Finalize</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Classes implementing IDisposable should call the GC.SuppressFinalize method in their finalize method to avoid any finalizer from being called.
This rule should be followed even if the class doesn't have a finalizer as a derived class could have one.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' should call GC.SuppressFinalize inside the Dispose method.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0029.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0033</Id>
          <Category>Usage</Category>
          <Title>Dispose Fields Properly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>This class has a disposable field and is not disposing it.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field {0} should be disposed.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0033.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0032</Id>
          <Category>Usage</Category>
          <Title>Dispose Fields Properly</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>This class has a disposable field and is not disposing it.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field {0} should be disposed.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0032.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0089</Id>
          <Category>Usage</Category>
          <Title>Remove redundant else.</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>An empty else clause only adds complexity. You may safely remove it.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove redundant else</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0089.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0068</Id>
          <Category>Usage</Category>
          <Title>Unused Method</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Unused private methods can be safely removed as they are unnecessary.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Method is not used.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0068.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0074</Id>
          <Category>Usage</Category>
          <Title>Make field readonly</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>A field that is only assigned on the constructor can be made readonly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make '{0}' readonly</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0074.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0034</Id>
          <Category>Usage</Category>
          <Title>Redundant field assignment</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>It's recommend not to assign the default value to a field as a performance optimization.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field {0} is assigning to default value {1}. Remove the assignment.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0034.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0111</Id>
          <Category>Usage</Category>
          <Title>Incorrect String.Format usage</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The format argument in String.Format determines the number of other arguments that need to be passed into the method based on the number of curly braces {} used. The incorrect number of arguments are being passed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The number of arguments in String.Format is incorrect.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0111.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0056</Id>
          <Category>Usage</Category>
          <Title>Incorrect String.Format usage</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>The format argument in String.Format determines the number of other arguments that need to be passed into the method based on the number of curly braces {} used. The incorrect number of arguments are being passed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid argument reference in String.Format.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0056.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0057</Id>
          <Category>Usage</Category>
          <Title>Unused parameters</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A method with an unused parameter creates unnecessary confusion and should be deleted.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameter '{0}' is not used.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0057.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0064</Id>
          <Category>Usage</Category>
          <Title>Your IP Address syntax is incorrect.</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>An error was found parsing the IP Address string.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0064.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0054</Id>
          <Category>Usage</Category>
          <Title>Your Json syntax is wrong</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>This diagnostic checks the json string and triggers if the parsing fail by throwing an exception.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0054.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0052</Id>
          <Category>Usage</Category>
          <Title>Make field readonly</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>A field that is only assigned on the constructor can be made readonly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make '{0}' readonly</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0052.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0010</Id>
          <Category>Naming</Category>
          <Title>Your regex expression is incorrect</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>There is an error in your regex expression.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0010.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0007</Id>
          <Category>Usage</Category>
          <Title>Return Condition directly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using an if/else statement to return a boolean can be replaced by directly returning a boolean.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0007.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0012</Id>
          <Category>Naming</Category>
          <Title>Your throw does nothing</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If a exception is caught and then thrown again the original stack trace will be lost. Instead it is best to throw the exception without using any parameters.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0012.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0049</Id>
          <Category>Usage</Category>
          <Title>Simplify expression</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>You can remove this comparison.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0049.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0063</Id>
          <Category>Usage</Category>
          <Title>Your Uri syntax is wrong.</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>This diagnostic checks the Uri string and triggers if the parsing fail by throwing an exception.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0063.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0067</Id>
          <Category>Usage</Category>
          <Title>Virtual Method Called On Constructor</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When a virtual method is called, the actual type that executes the method is not selected until run time. When a constructor calls a virtual method, it is possible that the constructor for the instance that invokes the method has not executed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not call overridable methods in constructors</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0067.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0081</Id>
          <Category>Performance</Category>
          <Title>Use of Regex.IsMatch might be improved</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Instantiating the Regex object multiple times might be bad for performance. You may want to use the static IsMatch method from Regex class and/or compile the regex.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use of Regex.IsMatch might be improved</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0081.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0025</Id>
          <Category>Performance</Category>
          <Title>Remove Empty Finalizers</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An empty finalizer will stop your object from being collected immediately by the Garbage Collector when no longer used.It will instead be placed in the finalizer queue needlessly using resources.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove Empty Finalizers</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0025.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0030</Id>
          <Category>Performance</Category>
          <Title>Make Local Variable Constant.</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>This variable is assigned a constant value and never changed it can be made 'const'</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>This variable can be made const.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0030.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0011</Id>
          <Category>Performance</Category>
          <Title>You should remove the 'Where' invocation when it is possible.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When a linq operator support a predicate parameter it should be used instead of using 'Where' followed by the operator</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>You can remove 'Where' moving the predicate to '{0}'.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0011.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0023</Id>
          <Category>Performance</Category>
          <Title>Unsealed Attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Framework methods that retrieve attributes by default search the whole inheritence hierarchy of the attribute class. Marking the type as sealed eliminate this search and can improve performance</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Mark '{0}' as sealed.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0023.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0091</Id>
          <Category>Design</Category>
          <Title>Use static method</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If the method is not referencing any instance variable and if you are not creating a virtual, abstract, new or partial method, and if it is not a method override, your instance method may be changed to a static method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make '{0}' method static.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0091.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0021</Id>
          <Category>Design</Category>
          <Title>Use nameof</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>In C#6 the nameof() operator should be used to specify the name of a program element instead of a string literal as it produce code that is easier to refactor.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use 'nameof({0})' instead of specifying the program element name.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0021.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0108</Id>
          <Category>Design</Category>
          <Title>Use nameof</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>In C#6 the nameof() operator should be used to specify the name of a program element instead of a string literal as it produce code that is easier to refactor.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Use 'nameof({0})' instead of specifying the program element name.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0108.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0004</Id>
          <Category>Design</Category>
          <Title>Catch block cannot be empty</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An empty catch block suppress all errors and shouldn't be used.\r\nIf the error is expected consider logging it or changing the control flow such that it is explicit.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0004.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0003</Id>
          <Category>Design</Category>
          <Title>Your catch should include an Exception</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0003.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0024</Id>
          <Category>Design</Category>
          <Title>Don't throw exceptions inside static constructors.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Static constructors are called before a class is used for the first time. Exceptions thrown in static constructors force the use of a try block and should be avoided.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Don't throw exceptions inside static constructors.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0024.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CC0031</Id>
          <Category>Design</Category>
          <Title>Check for null before calling a delegate</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>In C#6 a delegate can be invoked using the null-propagating operator (?.) and it's invoke method to avoid throwing a NullReference exception when there is no method attached to the delegate. Or you can check for null before calling the delegate.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Verify if delegate '{0}' is null before invoking it.</MessageFormat>
          <HelpLinkUri>https://code-cracker.github.io/diagnostics/CC0031.html</HelpLinkUri>
        </Rule>
      </Rules>
    </RuleCollection>
    <RuleCollection>
      <Name>StyleCop.Analyzers</Name>
      <Rules>
        <Rule>
          <Id>SA0000</Id>
          <Category>StyleCop.CSharp.SpecialRules</Category>
          <Title>Workaround incomplete diagnostics in Visual Studio 2015 Update 1</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Visual Studio 2015 Update 1 contains a bug which can cause diagnostics to occasionally not display in the Errors window. When this occurs, it is impossible to use the code fixes to address style violations reported during a build. This analyzer works around the bug (dotnet/roslyn#7446).

When this analyzer is enabled, all diagnostics will eventually be reported in the Error window, but the performance of the analyzers is reduced. The rule is disabled for maximum performance, but can be enabled if users notice errors appearing during a build but not while editing, and they wish to use the code fixes to correct them.

Note that some situations are not affected by the bug:

* When building a project, all relevant warnings are reported even if this rule is disabled.
* The various Fix All operations work properly for the selected scope, even if only a subset of the violations are appearing in the Errors window.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>n/a</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA0000Roslyn7446Workaround.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1000</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Keywords must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The spacing around a C# keyword is incorrect.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The keyword '{0}' must{1} be followed by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1000.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1001</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Commas must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The spacing around a comma is incorrect, within a C# code file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Commas must{0} be {1} by whitespace.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1001.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1002</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Semicolons must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The spacing around a semicolon is incorrect, within a C# code file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Semicolons must{0} be {1} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1002.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1003</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Symbols must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The spacing around an operator symbol is incorrect, within a C# code file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Operator '{0}' must be preceded by whitespace.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1003.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1004</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Documentation lines must begin with single space</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A line within a documentation header above a C# element does not begin with a single space.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Documentation line must begin with a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1004.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1005</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Single line comments must begin with single space</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A single-line comment within a C# code file does not begin with a single space.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Single line comment must begin with a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1005.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1006</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Preprocessor keywords must not be preceded by space</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# preprocessor-type keyword is preceded by space.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Preprocessor keyword '{0}' must not be preceded by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1006.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1007</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Operator keyword must be followed by space</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The operator keyword within a C# operator overload method is not followed by any whitespace.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Operator keyword must be followed by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1007.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1008</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Opening parenthesis must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An opening parenthesis within a C# statement is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Opening parenthesis must not be preceded by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1008.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1009</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Closing parenthesis must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A closing parenthesis within a C# statement is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Closing parenthesis must{0} be {1} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1009.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1010</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Opening square brackets must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An opening square bracket within a C# statement is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Opening square brackets must {0} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1010.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1011</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Closing square brackets must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A closing square bracket within a C# statement is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Closing square bracket must{0} be {1} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1011.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1012</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Opening braces must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An opening brace within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Opening brace must{0} be {1} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1012.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1013</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Closing braces must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A closing brace within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Closing brace must{0} be {1} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1013.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1014</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Opening generic brackets must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An opening generic bracket within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Opening generic brackets must not be {0} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1014.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1015</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Closing generic brackets must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A closing generic bracket within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Closing generic bracket must{0} be {1} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1015.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1016</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Opening attribute brackets must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An opening attribute bracket within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Opening attribute brackets must not be followed by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1016.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1017</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Closing attribute brackets must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A closing attribute bracket within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Closing attribute brackets must not be preceded by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1017.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1018</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Nullable type symbols must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A nullable type symbol within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Nullable type symbol must not be preceded by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1018.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1019</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Member access symbols must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The spacing around a member access symbol is incorrect, within a C# code file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Member access symbol '{0}' must not be {1} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1019.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1020</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Increment decrement symbols must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An increment or decrement symbol within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} symbol '{1}' must not be {2} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1020.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1021</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Negative signs must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A negative sign within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Negative sign must{0} be {1} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1021.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1022</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Positive signs must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A positive sign within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Positive sign must{0} be {1} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1022.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1023</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Dereference and access of symbols must be spaced correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A dereference symbol or an access-of symbol within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Dereference symbol '*' must {0}.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1023.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1024</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Colons Must Be Spaced Correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A colon within a C# element is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Colon must{0} be {1}{2} by a space.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1024.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1025</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Code must not contain multiple whitespace in a row</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The code contains multiple whitespace characters in a row.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Code must not contain multiple whitespace characters in a row.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1025.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1026</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Code must not contain space after new keyword in implicitly typed array allocation</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An implicitly typed new array allocation within a C# code file is not spaced correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The keyword 'new' must not be followed by a space or a blank line.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1026.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1027</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Tabs must not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The C# code contains a tab character</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Tabs must not be used.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1027.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1028</Id>
          <Category>StyleCop.CSharp.SpacingRules</Category>
          <Title>Code must not contain trailing whitespace</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There should not be any whitespace at the end of a line of code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Code must not contain trailing whitespace</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1028.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1100</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Do not prefix calls with base unless local implementation exists</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A call to a member from an inherited class begins with 'base.', and the local class does not contain an override or implementation of the member.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not prefix calls with base unless local implementation exists</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1100.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1101</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Prefix local calls with this</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A call to an instance member of the local class or a base class is not prefixed with 'this.', within a C# code file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Prefix local calls with this</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1101.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1106</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Code must not contain empty statements</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The C# code contains an extra semicolon.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Code must not contain empty statements</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1106.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1107</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Code must not contain multiple statements on one line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The C# code contains more than one statement on a single line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Code must not contain multiple statements on one line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1107.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1108</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Block statements must not contain embedded comments</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# statement contains a comment between the declaration of the statement and the opening brace of the statement.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Block statements must not contain embedded comments</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1108.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1109</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Block statements must not contain embedded regions</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# statement contains a region tag between the declaration of the statement and the opening brace of the statement.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat />
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1109.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1102</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Query clause must follow previous clause</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# query clause does not begin on the same line as the previous clause, or on the next line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Query clause must follow previous clause.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1102.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1103</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Query clauses must be on separate lines or all on one line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The clauses within a C# query expression are not all placed on the same line, and each clause is not placed on its own line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Query clauses must be on separate lines or all on one line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1103.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1104</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Query clause must begin on new line when previous clause spans multiple lines</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A clause within a C# query expression begins on the same line as the previous clause, when the previous clause spans across multiple lines.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Query clause must begin on new line when previous clause spans multiple lines</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1104.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1105</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Query clauses spanning multiple lines must begin on own line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A clause within a C# query expression spans across multiple lines, and does not begin on its own line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Query clauses spanning multiple lines must begin on own line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1105.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1110</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Opening parenthesis or bracket must be on declaration line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The opening parenthesis or bracket is not placed on the same line as the method/indexer/attribute/array name.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Opening parenthesis or bracket must be on declaration line.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1110.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1111</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Closing parenthesis must be on line of last parameter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The closing parenthesis or bracket in a call to or declaration of a C# method/indexer/attribute/array/constructor/delegate is not placed on the same line as the last parameter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Closing parenthesis must be on line of last parameter</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1111.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1112</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Closing parenthesis must be on line of opening parenthesis</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the opening bracket when the element does not take any parameters.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Closing parenthesis must be on line of opening parenthesis</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1112.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1113</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Comma must be on the same line as previous parameter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A comma between two parameters in a call to a C# method or indexer, or in the declaration of a method or indexer, is not placed on the same line as the previous parameter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Comma must be on the same line as previous parameter.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1113.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1114</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Parameter list must follow declaration</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The start of the parameter list for a method/constructor/indexer/array/operator call or declaration does not begin on the same line as the opening bracket, or on the line after the opening bracket.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameter list must follow declaration</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1114.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1115</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Parameter must follow comma</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A parameter within a C# method or indexer call or declaration does not begin on the same line as the previous parameter, or on the next line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The parameter must begin on the line after the previous parameter.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1115.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1116</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Split parameters must start on line after declaration</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The parameters to a C# method or indexer call or declaration span across multiple lines, but the first parameter does not start on the line after the opening bracket.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The parameters must begin on the line after the declaration, whenever the parameter span across multiple lines</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1116.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1117</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Parameters must be on same line or separate lines</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The parameters to a C# method or indexer call or declaration are not all on the same line or each on a separate line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The parameters must all be placed on the same line or each parameter must be placed on its own line.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1117.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1118</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Parameter must not span multiple lines</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A parameter to a C# method/indexer/attribute/array, other than the first parameter, spans across multiple lines. If the parameter is short, place the entire parameter on a single line. Otherwise, save the contents of the parameter in a temporary variable and pass the temporary variable as a parameter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The parameter spans multiple lines</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1118.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1120</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Comments must contain text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The C# comment does not contain any comment text.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Comments must contain text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1120.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1121</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Use built-in type alias</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The code uses one of the basic C# types, but does not use the built-in alias for the type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use built-in type alias</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1121.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1122</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Use string.Empty for empty strings</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The C# code includes an empty string, written as "".</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use string.Empty for empty strings</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1122.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1123</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Do not place regions within elements</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The C# code contains a region within the body of a code element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Region must not be located within a code element.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1123.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1124</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Do not use regions</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The C# code contains a region.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not use regions</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1124.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1125</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Use shorthand for nullable types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The Nullable&lt;T&gt; type has been defined not using the C# shorthand. For example, Nullable&lt;DateTime&gt; has been used instead of the preferred DateTime?</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use shorthand for nullable types</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1125.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1126</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Prefix calls correctly</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A call to a member is not prefixed with the 'this.', 'base.', 'object.' or 'typename.' prefix to indicate the intended method call, within a C# code file.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat />
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1126.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1127</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Generic type constraints must be on their own line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Each type constraint clause for a generic type parameter should be listed on a line of code by itself.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Generic type constraints must be on their own line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1127.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1128</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Put constructor initializers on their own line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A constructor initializer, including the colon character, should be on its own line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Put constructor initializers on their own line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1128.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1129</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Do not use default value type constructor</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When creating a new instance of a value type T, the syntax 'default(T)' is functionally equivalent to the syntax 'new T()'. To avoid confusion regarding the behavior of the resulting instance, the first form is preferred.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not use default value type constructor</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1129.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1130</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Use lambda syntax</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Lambda expressions are more succinct and easier to read than anonymous methods, so they should are preferred whenever the two are functionally equivalent.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use lambda syntax</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1130.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1131</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Use readable conditions</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When a comparison is made between a variable and a literal, the variable should be placed on the left-hand-side to maximize readability.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Constant values should appear on the right-hand side of comparisons</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1131.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1132</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Do not combine fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Each field should be declared on its own line, in order to clearly see each field of a type and allow for proper documentation of the behavior of each field.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Each field should be declared on its own line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1132.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1133</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Do not combine attributes</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Each attribute usage should be placed in its own set of square brackets for maximum readability.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Each attribute should be placed in its own set of square brackets.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1133.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1134</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Attributes must not share line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Each attribute should be placed on its own line of code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Each attribute should be placed on its own line of code.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1134.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SX1101</Id>
          <Category>StyleCop.CSharp.ReadabilityRules</Category>
          <Title>Do not prefix local calls with 'this.'</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A call to an instance member of the local class or a base class is prefixed with `this.`.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not prefix local calls with 'this.'</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SX1101.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1200</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Using directives must be placed correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# using directive is placed outside of a namespace element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Using directive must appear within a namespace declaration</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1200.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1201</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Elements must appear in the correct order</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An element within a C# code file is out of order in relation to the other elements in the code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A {0} should not follow a {1}</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1201.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1202</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Elements must be ordered by access</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An element within a C# code file is out of order in relation to other elements in the code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' members must come before '{1}' members</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1202.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1203</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Constants must appear before fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A constant field is placed beneath a non-constant field.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Constant fields must appear before non-constant fields</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1203.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1204</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Static elements must appear before instance elements</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A static element is positioned beneath an instance element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Static members must appear before non-static members</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1204.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1205</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Partial elements must declare access</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The partial element does not have an access modifier defined.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Partial elements must declare an access modifier</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1205.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1206</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Declaration keywords must follow order</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The keywords within the declaration of an element do not follow a standard ordering scheme.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The '{0}' modifier must appear before '{1}'</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1206.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1207</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Protected must come before internal</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The keyword 'protected' is positioned after the keyword 'internal' within the declaration of a protected internal C# element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The keyword 'protected' must come before 'internal'.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1207.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1208</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>System using directives must be placed before other using directives</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A using directive which declares a member of the 'System' namespace appears after a using directive which declares a member of a different namespace, within a C# code file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Using directive for '{0}' must appear before directive for '{1}'</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1208.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1209</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Using alias directives must be placed after other using directives</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A using-alias directive is positioned before a regular using directive.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Using alias directives must be placed after all using namespace directives.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1209.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1210</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Using directives must be ordered alphabetically by namespace</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The using directives within a C# code file are not sorted alphabetically by namespace.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Using directives must be ordered alphabetically by the namespaces.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1210.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1211</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Using alias directives must be ordered alphabetically by alias name</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The using-alias directives within a C# code file are not sorted alphabetically by alias name.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Using alias directive for '{0}' must appear before using alias directive for '{1}'</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1211.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1212</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Property accessors must follow order</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A get accessor appears after a set accessor within a property or indexer.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A get accessor appears after a set accessor within a property or indexer.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1212.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1213</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Event accessors must follow order</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An add accessor appears after a remove accessor within an event.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Event accessors must follow order.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1213.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1214</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Readonly fields must appear before non-readonly fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A readonly field is positioned beneath a non-readonly field.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Readonly fields must appear before non-readonly fields</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1214.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1216</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Using static directives must be placed at the correct location.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A using static directive is positioned before a regular or after an alias using directive.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Using static directives must be placed at the correct location.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1216.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1217</Id>
          <Category>StyleCop.CSharp.OrderingRules</Category>
          <Title>Using static directives must be ordered alphabetically</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>All using static directives must be ordered alphabetically.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The using static directive for '{0}' must appear after the using static directive for '{1}'</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1217.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1300</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Element must begin with upper-case letter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a C# element does not begin with an upper-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element '{0}' must begin with an uppercase letter</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1301</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Element must begin with lower-case letter</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There are currently no situations in which this rule will fire.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Element must begin with lower-case letter</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1301.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1302</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Interface names must begin with I</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a C# interface does not begin with the capital letter I.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Interface names must begin with I</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1302.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1303</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Const field names must begin with upper-case letter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a constant C# field must begin with an upper-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Const field names must begin with upper-case letter.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1304</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Non-private readonly fields must begin with upper-case letter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a non-private readonly C# field must being with an upper-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Non-private readonly fields must begin with upper-case letter</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1304.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1305</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Field names must not use Hungarian notation</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a field or variable in C# uses Hungarian notation.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>{0} '{1}' must not use Hungarian notation</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1305.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1306</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Field names must begin with lower-case letter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a field in C# does not begin with a lower-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field '{0}' must begin with lower-case letter</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1307</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Accessible fields must begin with upper-case letter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a public or internal field in C# does not begin with an upper-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field '{0}' must begin with upper-case letter</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1307.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1308</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Variable names must not be prefixed</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A field name in C# is prefixed with 'm_', 's_', or 't_'.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field '{0}' must not begin with the prefix '{1}'</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1308.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1309</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Field names must not begin with underscore</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A field name in C# begins with an underscore.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field '{0}' must not begin with an underscore</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1309.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1310</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Field names must not contain underscore</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A field name in C# contains an underscore.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field '{0}' must not contain an underscore</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1310.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1311</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Static readonly fields must begin with upper-case letter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a static readonly field does not begin with an upper-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Static readonly fields must begin with upper-case letter</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1312</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Variable names must begin with lower-case letter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a variable in C# does not begin with a lower-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Variable '{0}' must begin with lower-case letter</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1313</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Parameter names must begin with lower-case letter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a parameter in C# does not begin with a lower-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameter '{0}' must begin with lower-case letter</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1313.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SX1309</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Field names must begin with underscore</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A field name in C# does not begin with an underscore.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Field '{0}' must begin with an underscore</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SX1309.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SX1309S</Id>
          <Category>StyleCop.CSharp.NamingRules</Category>
          <Title>Static field names must begin with underscore</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A static field name in C# does not begin with an underscore.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Static field '{0}' must begin with an underscore</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SX1309S.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1119</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Statement must not use unnecessary parenthesis</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# statement contains parenthesis which are unnecessary and should be removed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Statement must not use unnecessary parenthesis</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1119.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1119_p</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Statement must not use unnecessary parenthesis</Title>
          <CustomTags>
            <string>Unnecessary</string>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>A C# statement contains parenthesis which are unnecessary and should be removed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Statement must not use unnecessary parenthesis</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1119.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1400</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Access modifier must be declared</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The access modifier for a C# element has not been explicitly defined.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element '{0}' must declare an access modifier</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1400.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1401</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Fields must be private</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A field within a C# class has an access modifier other than private.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field must be private</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1401.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1402</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>File may only contain a single class</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# code file contains more than one unique class.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>File may only contain a single class</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1402.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1403</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>File may only contain a single namespace</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# code file contains more than one namespace.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>File may only contain a single namespace</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1403.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1404</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Code analysis suppression must have justification</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A Code Analysis SuppressMessage attribute does not include a justification.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Code analysis suppression must have justification</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1404.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1405</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Debug.Assert must provide message text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A call to Debug.Assert in C# code does not include a descriptive message.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Debug.Assert must provide message text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1405.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1406</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Debug.Fail must provide message text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A call to Debug.Fail in C# code does not include a descriptive message.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Debug.Fail must provide message text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1406.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1407</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Arithmetic expressions must declare precedence</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# statement contains a complex arithmetic expression which omits parenthesis around operators.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Arithmetic expressions must declare precedence</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1407.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1408</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Conditional expressions must declare precedence</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# statement contains a complex conditional expression which omits parenthesis around operators.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Conditional expressions must declare precedence</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1408.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1409</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Remove unnecessary code</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# file contains code which is unnecessary and can be removed without changing the overall logic of the code.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1409.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1410</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Remove delegate parenthesis when possible</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A call to a C# anonymous method does not contain any method parameters, yet the statement still includes parenthesis.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove delegate parenthesis when possible</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1410.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1411</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Attribute constructor must not use unnecessary parenthesis</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>TODO.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Attribute constructor must not use unnecessary parenthesis</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1411.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1412</Id>
          <Category>StyleCop.CSharp.MaintainabilityRules</Category>
          <Title>Store files as UTF-8 with byte order mark</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Source files should be saved using the UTF-8 encoding with a byte order mark</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Store files as UTF-8 with byte order mark</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1412.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1500</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Braces for multi-line statements must not share line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The opening or closing brace within a C# statement, element, or expression is not placed on its own line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Braces for multi-line statements must not share line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1500.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1501</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Statement must not be on a single line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# statement containing opening and closing braces is written completely on a single line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Statement must not be on a single line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1501.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1502</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Element must not be on a single line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# element containing opening and closing braces is written completely on a single line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element must not be on a single line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1502.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1503</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Braces must not be omitted</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The opening and closing braces for a C# statement have been omitted.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Braces must not be omitted</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1503.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1504</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>All accessors must be single-line or multi-line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Within a C# property, indexer or event, at least one of the child accessors is written on a single line, and at least one of the child accessors is written across multiple lines.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All accessors must be single-line or multi-line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1504.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1505</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Opening braces must not be followed by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An opening brace within a C# element, statement, or expression is followed by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>An opening brace must not be followed by a blank line.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1505.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1506</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Element documentation headers must not be followed by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An element documentation header above a C# element is followed by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element documentation headers must not be followed by blank line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1506.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1507</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Code must not contain multiple blank lines in a row</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The C# code contains multiple blank lines in a row.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Code must not contain multiple blank lines in a row</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1507.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1508</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Closing braces must not be preceded by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A closing brace within a C# element, statement, or expression is preceded by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A closing brace must not be preceded by a blank line.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1508.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1509</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Opening braces must not be preceded by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An opening brace within a C# element, statement, or expression is preceded by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Opening braces must not be preceded by blank line.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1509.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1510</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Chained statement blocks must not be preceded by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Chained C# statements are separated by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' statement must not be preceded by a blank line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1510.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1511</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>While-do footer must not be preceded by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The while footer at the bottom of a do-while statement is separated from the statement by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>While-do footer must not be preceded by blank line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1511.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1512</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Single-line comments must not be followed by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A single-line comment within C# code is followed by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Single-line comments must not be followed by blank line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1512.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1513</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Closing brace must be followed by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A closing brace within a C# element, statement, or expression is not followed by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Closing brace must be followed by blank line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1513.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1514</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Element documentation header must be preceded by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An element documentation header above a C# element is not preceded by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element documentation header must be preceded by blank line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1514.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1515</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Single-line comment must be preceded by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A single-line comment within C# code is not preceded by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Single-line comment must be preceded by blank line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1515.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1516</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Elements must be separated by blank line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Adjacent C# elements are not separated by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Elements must be separated by blank line</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1516.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1517</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Code must not contain blank lines at start of file</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The code file has blank lines at the start.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Code must not contain blank lines at start of file</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1517.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1518</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Use line endings correctly at end of file</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Code must not contain blank lines at the end of the file</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Code must not contain blank lines at the end of the file</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1518.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1519</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Braces must not be omitted from multi-line child statement</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The opening and closing braces for a multi-line C# statement have been omitted.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Braces must not be omitted from multi-line child statement</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1519.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1520</Id>
          <Category>StyleCop.CSharp.LayoutRules</Category>
          <Title>Use braces consistently</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The opening and closing braces of a chained if/else if/else construct were included for some clauses, but omitted for others.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use braces consistently</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1520.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1633</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>File must have header</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# code file is missing a standard file header.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The file header is missing or not located at the top of the file.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1633.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1634</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>File header must show copyright</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The file header at the top of a C# code file is missing a copyright tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The file header must contain a copyright tag.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1634.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1635</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>File header must have copyright text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The file header at the top of a C# code file is missing copyright text.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>File header must have copyright text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1635.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1636</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>File header copyright text must match</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The file header at the top of a C# code file does not contain the appropriate copyright text.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The file header copyright text must match the copyright text from the settings.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1636.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1637</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>File header must contain file name</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The file header at the top of a C# code file is missing the file name.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>File header must contain file name.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1637.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1638</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>File header file name documentation must match file name</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The file attribute within copyright tag of the file header at the top of a C# code file does not contain the name of the file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>File header file name documentation must match file name.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1638.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1639</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>File header must have summary</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The file header at the top of a C# code file does not contain a filled-in summary tag.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>File header must have summary</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1639.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1640</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>File header must have valid company text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The file header at the top of a C# code file does not contain company name text.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The copyright tag must contain a non-empty company attribute.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1640.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1641</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>File header company name text must match</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The file header at the top of a C# code file does not contain the appropriate company name text.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The file header company name must match the company name from the settings.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1641.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1623</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Property summary documentation must match accessors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The documentation text within a C# property’s &lt;summary&gt; tag does not match the accessors within the property.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The property's documentation summary text must begin with: '{0}'</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1623.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1624</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Property summary documentation must omit accessor with restricted access</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The documentation text within a C# property’s &lt;summary&gt; tag takes into account all of the accessors within the property, but one of the accessors has limited access.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because the property only contains a visible {0} accessor, the documentation summary text must begin with '{1}'.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1624.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1600</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Elements must be documented</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# code element is missing a documentation header.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Elements must be documented</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1600.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1601</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Partial elements must be documented</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# partial element is missing a documentation header.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Partial elements must be documented</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1601.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1602</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Enumeration items must be documented</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An item within a C# enumeration is missing an Xml documentation header.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Enumeration items must be documented</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1602.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1603</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Documentation must contain valid XML</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The XML within a C# element’s document header is badly formed.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>The documentation header is composed of invalid XML: {0}</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1603.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1604</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element documentation must have summary</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The XML header documentation for a C# element is missing a &lt;summary&gt; tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element documentation must have summary</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1604.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1605</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Partial element documentation must have summary</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The &lt;summary&gt; or &lt;content&gt; tag within the documentation header for a C# code element is missing or empty.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Partial element documentation must have summary</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1605.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1606</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element documentation must have summary text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The &lt;summary&gt; tag within the documentation header for a C# code element is empty.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element documentation must have summary text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1606.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1607</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Partial element documentation must have summary text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The &lt;summary&gt; or &lt;content&gt; tag within the documentation header for a C# code element is empty.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Partial element documentation must have summary text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1607.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1608</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element documentation must not have default summary</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The &lt;summary&gt; tag within an element's XML header documentation contains the default text generated by Visual Studio during the creation of the element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element documentation must not have default summary</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1608.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1609</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Property documentation must have value</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The XML header documentation for a C# property does not contain a &lt;value&gt; tag.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Property documentation must have value</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1609.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1610</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Property documentation must have value text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The XML header documentation for a C# property contains an empty &lt;value&gt; tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Property documentation must have value text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1610.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1611</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element parameters must be documented</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# method, constructor, delegate or indexer element is missing documentation for one or more of its parameters.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation for parameter '{0}' is missing</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1611.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1612</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element parameter documentation must match element parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The documentation describing the parameters to a C# method, constructor, delegate or indexer element does not match the actual parameters on the element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The parameter '{0}' does not exist.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1612.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1613</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element parameter documentation must declare parameter name</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A &lt;param&gt; tag within a C# element's documentation header is missing a name attribute containing the name of the parameter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element parameter documentation must declare parameter name</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1613.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1614</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element parameter documentation must have text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A &lt;param&gt; tag within a C# element's documentation header is empty.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element parameter documentation must have text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1614.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1615</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element return value must be documented</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# element is missing documentation for its return value.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element return value must be documented</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1615.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1616</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element return value documentation must have text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The &lt;returns&gt; tag within a C# element's documentation header is empty.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element return value documentation must have text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1616.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1617</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Void return value must not be documented</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A C# code element does not contain a return value, or returns void, but the documentation header for the element contains a &lt;returns&gt; tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Void return value must not be documented</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1617.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1618</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Generic type parameters must be documented</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A generic C# element is missing documentation for one or more of its generic type parameters.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation for type parameter '{0}' is missing</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1618.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1619</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Generic type parameters must be documented partial class</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A generic, partial C# element is missing documentation for one or more of its generic type parameters, and the documentation for the element contains a &lt;summary&gt; tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation for type parameter '{0}' is missing</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1619.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1620</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Generic type parameter documentation must match type parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The &lt;typeparam&gt; tags within the Xml header documentation for a generic C# element do not match the generic type parameters on the element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The type parameter '{0}' does not exist.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1620.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1621</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Generic type parameter documentation must declare parameter name</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A &lt;typeparam&gt; tag within the XML header documentation for a generic C# element is missing a name attribute, or contains an empty name attribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Generic type parameter documentation must declare parameter name</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1621.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1622</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Generic type parameter documentation must have text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A &lt;typeparam&gt; tag within the Xml header documentation for a generic C# element is empty.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Generic type parameter documentation must have text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1622.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1625</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element documentation must not be copied and pasted</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The Xml documentation for a C# element contains two or more identical entries, indicating that the documentation has been copied and pasted. This can sometimes indicate invalid or poorly written documentation.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Element documentation must not be copied and pasted</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1625.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1626</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Single-line comments must not use documentation style slashes</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The C# code contains a single-line comment which begins with three forward slashes in a row.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Single-line comments must not use documentation style slashes</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1626.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1627</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Documentation text must not be empty</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The XML header documentation for a C# code element contains an empty tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the \'{0}\' tag must not be empty.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1627.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1628</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Documentation text must begin with a capital letter</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A section of the XML header documentation for a C# element does not begin with a capital letter.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1628.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1629</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Documentation text must end with a period</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A section of the XML header documentation for a C# element does not end with a period.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1629.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1630</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Documentation text must contain whitespace</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A section of the XML header documentation for a C# element does not contain any whitespace between words.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1630.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1631</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Documentation must meet character percentage</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A section of the Xml header documentation for a C# element does not contain enough alphabetic characters.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1631.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1632</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Documentation text must meet minimum character length</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A section of the Xml header documentation for a C# element is too short.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1632.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1642</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Constructor summary documentation must begin with standard text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The XML documentation header for a C# constructor does not contain the appropriate summary text.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Constructor summary documentation must begin with standard text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1642.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1643</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Destructor summary documentation must begin with standard text</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The XML documentation header for a C# finalizer does not contain the appropriate summary text.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Destructor summary documentation must begin with standard text</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1643.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1644</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Documentation headers must not contain blank lines</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A section within the XML documentation header for a C# element contains blank lines.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1644.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1645</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Included documentation file does not exist</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An included XML documentation file does not exist.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1645.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1646</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Included documentation XPath does not exist</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An included XML documentation link contains an invalid path.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1646.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1647</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Include node does not contain valid file and path</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An include tag within an XML documentation header does not contain valid file and path attribute.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1647.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1648</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>inheritdoc must be used with inheriting class</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>&lt;inheritdoc&gt; has been used on an element that doesn't inherit from a base class or implement an interface.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>inheritdoc must be used with inheriting class</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1648.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1649</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>File name must match first type name</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The file name of a C# code file does not match the first type declared in the file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>File name must match first type name.</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1649.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1650</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Element documentation must be spelled correctly</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The element documentation for the element contains one or more spelling mistakes or unrecognized words.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>TODO: Message format</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1650.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1651</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Do not use placeholder elements</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The element documentation contains a &lt;placeholder&gt; element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not use placeholder elements</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1651.md</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SA1652</Id>
          <Category>StyleCop.CSharp.DocumentationRules</Category>
          <Title>Enable XML documentation output</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The project is currently configured to not parse XML documentation comments; all diagnostics for documentation comments are disabled. Enable XML documentation output to enable these diagnostics.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Enable XML documentation output</MessageFormat>
          <HelpLinkUri>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1652.md</HelpLinkUri>
        </Rule>
      </Rules>
    </RuleCollection>
    <RuleCollection>
      <Name>SonarAnalyzer.CSharp</Name>
      <Rules>
        <Rule>
          <Id>S3442</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"abstract" classes should not have "public" constructors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Since abstract classes can't be instantiated, there's no point in their having public or internal constructors. If there is basic initialization logic that should run when an extending class instance is created, you can by all means put it in a constructor, but make that constructor private or protected.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the visibility of this constructor to 'protected'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3442</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3244</Id>
          <Category>Sonar Bug</Category>
          <Title>Anonymous delegates should not be used to unsubscribe from Events</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>It is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them. That's because the process of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove this item from the subscription list. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries to remove a different item from the list than was added. The result: NOOP.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Unsubscribe with the same delegate that was used for the subscription.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3244</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3236</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Caller information arguments should not be provided explicitly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Caller information attributes: CallerFilePathAttribute and CallerLineNumberAttribute provide a way to get information about the caller of a method through optional parameters. But the arguments for these optional parameters are only generated if they are not explicitly defined in the call. Thus, specifying the argument values defeats the purpose of the attributes.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this argument from the method call; it hides the caller information.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3236</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2330</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Array covariance should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Array covariance is the principle that if an implicit or explicit reference conversion exits from type A to B, then the same conversion exists from the array type A[] to B[].</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Refactor the code to not rely on potentially unsafe array conversions.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2330</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1121</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Assignments should not be made from within sub-expressions</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have side-effects.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Extract the assignment of '{0}' from this expression.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1121</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2306</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"async" and "await" should not be used as identifiers</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Since C# 5.0, async and await are contextual keywords. Contextual keywords do have a particular meaning in some contexts, but can still be used as variable names. Keywords, on the other hand, are always reserved, and therefore are not valid variable names. To avoid any confusion though, it is best to not use async and await as identifiers.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename '{0}' to not use a contextual keyword as an identifier.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2306</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3168</Id>
          <Category>Sonar Bug</Category>
          <Title>"async" methods should not return "void"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An async method with a void return type is a "fire and forget" method best reserved for event handlers because there's no way to wait for the method's execution to complete and respond accordingly. There's also no way to catch exceptions thrown from the method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Return 'Task' instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3168</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S110</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Inheritance tree of classes should not be too deep</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object oriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>This class has {0} parents which is greater than {1} authorized.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S110</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1764</Id>
          <Category>Sonar Bug</Category>
          <Title>Identical expressions should not be used on both sides of a binary operator</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Identical sub-expressions on both sides of operator '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1764</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1940</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Boolean checks should not be inverted</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use the opposite operator ('{0}') instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1940</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1125</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Boolean literals should not be redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Redundant Boolean literals should be removed from expressions to improve readability.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the unnecessary Boolean literal(s).</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1125</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1227</Id>
          <Category>Sonar Code Smell</Category>
          <Title>break statements should not be used except for switch cases</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>break; is an unstructured control flow statement which makes code harder to read.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Refactor the code in order to remove this break statement.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1227</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3215</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"interface" instances should not be cast to concrete types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Needing to cast from an interface to a concrete type indicates that something is wrong with the abstractions in use, likely that something is missing from the interface. Instead of casting to a discrete type, the missing functionality should be added to the interface. Otherwise there is a risk of runtime exceptions.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove this cast and edit the interface to add the missing functionality.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3215</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3247</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Duplicate casts should not be made</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Because the is operator performs a cast if the object is not null, using is to check type and then casting the same argument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using as, followed by a null-check.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace this type-check-and-cast sequence with an 'as' and a null check.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3247</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2486</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Generic exceptions should not be ignored</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Handle the exception or explain in a comment why it can be ignored.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2486</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2737</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"catch" clauses should do more than rethrow</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>A catch clause that only rethrows the caught exception has the same effect as omitting the catch altogether and letting it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Add logic to this catch clause or eliminate it and rethrow the exception automatically.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2737</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3928</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Parameter names used into ArgumentException constructors should match an existing one </Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Some constructors of the ArgumentException, ArgumentNullException, ArgumentOutOfRangeException and DuplicateWaitObjectException classes must be fed with a valid parameter name. This rule raises an issue in two cases:</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3928</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1451</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Track lack of copyright and license headers</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Add or update the header of this file.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1451</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S101</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Types should be named in camel case</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are camel cased. To reduce noise, two consecutive upper case characters are allowed unless they form the whole type name. So, MyXClass is compliant, but XC on its own is not.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename {0} '{1}' to match camel case naming rules, {2}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S101</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3453</Id>
          <Category>Sonar Bug</Category>
          <Title>Classes should not have only "private" constructors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A class with only private constructors can't be instantiated, thus, it seems to be pointless code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>This class can't be instantiated; make {0} 'public'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3453</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1694</Id>
          <Category>Sonar Code Smell</Category>
          <Title>An abstract class should have both abstract and concrete methods</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Convert this 'abstract' class to {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1694</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3897</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Classes that provide "Equals(&lt;T&gt;)" or override "Equals(Object)" should implement "IEquatable&lt;T&gt;"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The IEquatable&amp;lt;T&amp;gt; interface has only one method in it: Equals(&amp;lt;T&amp;gt;). If you've already written Equals(T), there's no reason not to explicitly implement IEquatable&amp;lt;T&amp;gt;. Doing so expands the utility of your class by allowing it to be used where an IEquatable is called for.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3897</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1118</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Utility classes should not have public constructors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Utility classes, which are collections of static members, are not meant to be instantiated. Even abstract utility classes, which can be extended, should not have public constructors.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1118</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3776</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Cognitive Complexity of methods should not be too high</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be difficult to maintain.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Refactor this {0} to reduce its Cognitive Complexity from {1} to the {2} allowed.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3776</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1155</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"Any()" should be used to test for emptiness</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using .Count() to test for emptiness works, but using .Any() makes the intent clearer, and the code more readable. However, there are some cases where special attention should be paid:</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use '.Any()' to test whether this 'IEnumerable&lt;{0}&gt;' is empty or not.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1155</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2971</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"IEnumerable" LINQs should be simplified</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways IEnumerable LINQs can be simplified</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2971</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S125</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Sections of code should not be "commented out"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Programmers should not comment out code as it bloats programs and reduces readability.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this commented out code.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S125</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1134</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Track uses of "FIXME" tags</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>FIXME tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Take the required action to fix the issue indicated by this 'FIXME' comment.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1134</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1135</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Track uses of "TODO" tags</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>TODO tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Complete the task associated to this 'TODO' comment.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1135</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1210</Id>
          <Category>Sonar Bug</Category>
          <Title>"Equals" and the comparison operators should be overridden when implementing "IComparable"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When you implement IComparable or IComparable&amp;lt;T&amp;gt; on a class you should also override Equals(object) and overload the comparison operators (==, !=, &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=). That's because the CLR cannot automatically call your CompareTo implementation from Equals(object) or from the base comparison operator implementations. Additionally, it is best practice to override GetHashCode along with Equals.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>When implementing {0}, you should also override {1}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1210</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2688</Id>
          <Category>Sonar Bug</Category>
          <Title>"NaN" should not be used in comparisons</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>NaN is not equal to anything, even itself. Testing for equality or inequality against NaN will yield predictable results, but probably not the ones you want. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use {0}.IsNaN() instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2688</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3240</Id>
          <Category>Sonar Code Smell</Category>
          <Title>The simplest possible condition syntax should be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means </Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Use the '{0}' operator here.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3240</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1862</Id>
          <Category>Sonar Bug</Category>
          <Title>Related "if/else if" statements should not have the same condition</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A chain of if/else if statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to true. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>This branch duplicates the one on line {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1862</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1871</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Two branches in a conditional structure should not have exactly the same implementation</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Having two cases in the same switch statement or branches in the same if structure with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an if structure they should be combined, or for a switch, one should fall through to the other.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Either merge this {1} with the identical one on line {0} or change one of the implementations.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1871</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2760</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Sequential tests should not check the same condition</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should have been checked in the second test.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>This condition was just checked on line {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2760</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2583</Id>
          <Category>Sonar Bug</Category>
          <Title>Conditionally executed blocks should be reachable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Conditional expressions which are always true or false can lead to dead code. Such code is always buggy and should never be used in production.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change this condition so that it does not always evaluate to '{0}'; some subsequent code is never executed.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2583</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2589</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Boolean expressions should not be gratuitous</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change this condition so that it does not always evaluate to '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2589</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2228</Id>
          <Category>Sonar Vulnerability</Category>
          <Title>Console logging should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you run the risk of inadvertently exposing sensitive information.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove this logging statement.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2228</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1699</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Constructors should only call non-overridable methods</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this call from a constructor to the overridable '{0}' method.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1699</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1854</Id>
          <Category>Sonar Bug</Category>
          <Title>Dead stores should be removed</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this useless assignment to local variable '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1854</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3903</Id>
          <Category>Sonar Bug</Category>
          <Title>Types should be defined in named namespaces</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are defined outside any named namespace are in a global namespace that cannot be referenced in code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Move the type '{0}' into a named namespace.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3903</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3172</Id>
          <Category>Sonar Bug</Category>
          <Title>Delegates should not be subtracted</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Review this subtraction of a chain of delegates: it may not work as you expect.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3172</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2931</Id>
          <Category>Sonar Bug</Category>
          <Title>Classes with "IDisposable" members should implement "IDisposable"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Classes with IDisposable members are responsible for cleaning up those members by calling their Dispose methods. The best practice here is for the owning class to itself implement IDisposable and call its members' Dispose methods from its own Dispose method.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Implement 'IDisposable' in this class and use the 'Dispose' method to call 'Dispose' on {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2931</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2930</Id>
          <Category>Sonar Bug</Category>
          <Title>"IDisposables" should be disposed</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When writing managed code, you don't need to worry about allocating or freeing memory: The garbage collector takes care of it. For efficiency reasons, some objects such as Bitmap use unmanaged memory, enabling for example the use of pointer arithmetic. Such objects have potentially huge unmanaged memory footprints, but will have tiny managed ones. Unfortunately, the garbage collector only sees the tiny managed footprint, and fails to reclaim the unmanaged memory (by calling Bitmap's finalizer method) in a timely fashion. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'Dispose' of '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2930</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2997</Id>
          <Category>Sonar Bug</Category>
          <Title>"IDisposables" created in a "using" statement should not be returned</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Typically you want to use using to create a local IDisposable variable; it will trigger disposal of the object when control passes out of the block's scope. The exception to this rule is when your method returns that IDisposable. In that case using disposes of the object before the caller can make use of it, likely causing exceptions at runtime. So you should either remove using or avoid returning the IDisposable.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the 'using' statement; it will cause automatic disposal of {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2997</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2952</Id>
          <Category>Sonar Bug</Category>
          <Title>Classes should "Dispose" of members from the classes' own "Dispose" methods</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>It is possible in an IDisposable to call Dispose on class members from any method, but the contract of Dispose is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource leaks.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Move this 'Dispose' call into this class' own 'Dispose' method.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2952</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2953</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Methods named "Dispose" should implement "IDisposable.Dispose"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Dispose as a method name should be used exclusively to implement IDisposable.Dispose to prevent any confusion.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Either implement 'IDisposable.Dispose', or totally rename this method to prevent confusion.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2953</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3902</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"Assembly.GetExecutingAssembly" should not be called</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using Type.Assembly to get the current assembly is nearly free in terms of performance; it's a simple property access. On the other hand, Assembly.GetExecutingAssembly() can take up to 30 times as long because it walks up the call stack to find the assembly.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Replace this call to 'Assembly.GetExecutingAssembly()' with 'Type.Assembly'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3902</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3885</Id>
          <Category>Sonar Bug</Category>
          <Title>"Assembly.Load" should be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The parameter to Assembly.Load includes the full specification of the dll to be loaded. Use another method, and you might end up with a dll other than the one you expected. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace this call to '{0}' with 'Assembly.Load'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3885</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3869</Id>
          <Category>Sonar Bug</Category>
          <Title>"SafeHandle.DangerousGetHandle" should not be called</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Not surprisingly, the SafeHandle.DangerousGetHandle method is dangerous. That's because it may not return a valid handle. Using it can lead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should simply be avoided altogether.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Refactor the code to remove this use of '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3869</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1215</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"GC.Collect" should not be called</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Calling GC.Collect is rarely necessary, and can significantly affect application performance. That's because it triggers a blocking operation that examines every object in memory for cleanup. Further, you don't have control over when this blocking cleanup will actually run.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Refactor the code to remove this use of '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1215</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3971</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"GC.SuppressFinalize" should not be called</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>GC.SuppressFinalize requests that the system not call the finalizer for the specified object. This should only be done when implementing Dispose as part of the Dispose Pattern.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not call 'GC.SuppressFinalize'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3971</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3889</Id>
          <Category>Sonar Bug</Category>
          <Title>Neither "Thread.Resume" nor "Thread.Suspend" should be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Thread.Suspend and Thread.Resume can give unpredictable results, and both methods have been deprecated. Indeed, if Thread.Suspend is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer synchronization mechanisms should be used, such as Monitor, Mutex, and Semaphore.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Refactor the code to remove this use of '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3889</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2365</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Properties should not make collection or array copies</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will be much slower than a simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods so that callers are not surprised by unexpectedly poor performance.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Refactor '{0}' into a method, properties should not copy collections.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2365</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3874</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"out" and "ref" parameters should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Passing a parameter by reference, which is what happens when you use the out or ref parameter modifiers, means that the method will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change the argument's values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when it is what was intended, this is the sort of thing that's difficult to get right, and should be used with caution.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Consider refactoring this method in order to remove the need for this '{0}' modifier.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3874</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3875</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"operator==" should not be overloaded on reference types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The use of == to compare to objects is expected to do a reference comparison. That is, it is expected to return true if and only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by callers. On the other hand, overloading it to do exactly that is pointless; that's what == does by default.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this overload of 'operator =='.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3875</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1186</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Methods should not be empty</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There are several reasons for a method not to have a method body:</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add a nested comment explaining why this method is empty, throw a 'NotSupportedException' or complete the implementation.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1186</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3261</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Namespaces should not be empty</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Namespaces with no lines of code clutter a project and should be removed. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this empty namespace.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3261</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S108</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Nested blocks of code should not be left empty</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Either remove or fill this block of code.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S108</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3655</Id>
          <Category>Sonar Bug</Category>
          <Title>Empty nullable value should not be accessed</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Nullable value types can hold either a value or null. The value held in the nullable type can be accessed with the Value property, but .Value throws an InvalidOperationException when the value is null. To avoid the exception, a nullable type should always be tested before .Value is accessed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' is null on at least one execution path.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3655</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1116</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Empty statements should be removed</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Empty statements, i.e. ;, are usually introduced by mistake, for example because:</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this empty statement.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1116</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2291</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Overflow checking should not be disabled for "Enumerable.Sum"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Enumerable.Sum() always executes addition in a checked context, so an OverflowException will be thrown if the value exceeds MaxValue even if an unchecked context was specified. Using an unchecked context anyway represents a misunderstanding of how Sum works.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Refactor this code to handle 'OverflowException'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2291</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2344</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Enumeration type names should not have "Flags" or "Enum" suffixes</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename this enumeration to remove the '{0}' suffix.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2344</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2342</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Enumeration types should comply with a naming convention</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename this enumeration to match the regular expression: '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2342</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1244</Id>
          <Category>Sonar Bug</Category>
          <Title>Floating point numbers should not be tested for equality</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a float or a double through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not check floating point {0} with exact values, use a range instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1244</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2197</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Modulus results should not be checked for direct equality</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for equality with a positive number (or a negative one) could result in unexpected results. </Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>The result of this modulus operation may not be {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2197</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3445</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Exceptions should not be explicitly rethrown</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When rethrowing an exception, you should do it by simply calling throw; and not throw exc;, because the stack trace is reset with the second syntax, making debugging a lot harder.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider using 'throw;' to preserve the stack trace.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3445</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3877</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Exceptions should not be thrown from unexpected methods</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>It is expected that some methods should be called with caution, but others, such as ToString, are expected to "just work". Throwing an exception from such a method is likely to break callers' code unexpectedly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this 'throw' statement.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3877</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3871</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Exception types should be "public"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be public for that to work. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make this exception 'public'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3871</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1067</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Expressions should not be too complex</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The complexity of an expression is defined by the number of &amp;amp;&amp;amp;, || and condition ? ifTrue : ifFalse operators it contains.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Reduce the number of conditional operators ({1}) used in the expression (maximum allowed {0}).</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1067</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2387</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Child class fields should not shadow parent class fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at best, chaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2387</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2933</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Fields that are only assigned in the constructor should be "readonly"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>readonly fields can only be assigned in a class constructor. If a class has a field that's not marked readonly but is only set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked readonly to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make '{0}' 'readonly'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2933</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2357</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Fields should be private</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and validation cannot be added later on without breaking backward compatiblity. Instead, developers should encapsulate their fields into properties. Explicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Make '{0}' private.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2357</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1104</Id>
          <Category>Sonar Vulnerability</Category>
          <Title>Fields should not have public accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make this field 'private' and encapsulate it in a 'public' property.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1104</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S104</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Files should not have too many lines of code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those smaller files will not only be easier to understand but also probably easier to test.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>This file has {1} lines, which is greater than {0} authorized. Split it into smaller files.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S104</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3880</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Finalizers should not be empty</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Finalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no benefit or justification.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove this empty finalizer.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3880</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2345</Id>
          <Category>Sonar Bug</Category>
          <Title>Flags enumerations should explicitly initialize all their members</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to 0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or operator in a useful way.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Initialize all the members of this 'Flags' enumeration.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2345</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2346</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Flags enumerations zero-value members should be named "None"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Consisitent use of "None" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other state, since there is no way to check that the bit 0 is set.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename '{0}' to 'None'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2346</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3217</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"Explicit" conversions of "foreach" loops should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The foreach statement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections available at that time such as ArrayList. The foreach statements allows you to downcast elements of a collection of Objects to any other type. The problem is that to achieve the cast, the foreach statements silently performs explicit type conversion, which at runtime can result in an InvalidCastException.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Either change the type of '{0}' to '{1}' or iterate on a generic collection of type '{2}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3217</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S127</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"for" loop stop conditions should be invariant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A for loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not update the loop counter '{0}' within the loop body.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S127</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1994</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"for" loop increment clauses should modify the loops' counters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>It can be extremely confusing when a for loop's counter is incremented outside of its increment clause. In such cases, the increment should be moved to the loop's increment clause if at all possible.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1994</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3376</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Attribute, EventArgs, and Exception type names should end with the type being extended</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Adherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, class FirstAttribute : Attribute can be used simply with First, but you must use the full name for class AttributeOne : Attribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make this class name end with '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3376</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1541</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Methods and properties should not be too complex</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>The Cyclomatic Complexity of this {2} is {1} which is greater than {0} authorized.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1541</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S134</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Control flow statements "if", "switch", "for", "foreach", "while", "do"  and "try" should not be nested too deeply</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Nested if, switch, for, foreach, while, do, and try statements are key ingredients for making what's known as "Spaghetti code".</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Refactor this code to not nest more than {0} control flow statements.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S134</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2934</Id>
          <Category>Sonar Bug</Category>
          <Title>Property assignments should not be made for "readonly" fields not constrained to reference types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>While the properties of a readonly reference type field can still be changed after initialization, those of a readonly value field, such as a struct, cannot. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Restrict '{0}' to be a reference type or remove this assignment of '{1}'; it is useless if '{0}' is a value type.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2934</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2955</Id>
          <Category>Sonar Bug</Category>
          <Title>Generic parameters not constrained to reference types should not be compared to "null"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a struct, could also be passed. In such cases, comparing the type parameter to null would always be false, because a struct can be empty, but never null. If a value type is truly what's expected, then the comparison should use default(). If it's not, then constraints should be added so that no value type can be passed.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Use a comparison to 'default({0})' instead or add a constraint to '{0}' so that it can't be a value type.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2955</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3246</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Generic type parameters should be co/contravariant when possible</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the out and in modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add the '{0}' keyword to parameter '{1}' to make it '{2}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3246</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2326</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Unused type parameters should be removed</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' is not used in the {1}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2326</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3249</Id>
          <Category>Sonar Bug</Category>
          <Title>Classes directly extending "object" should not call "base" in "GetHashCode" or "Equals"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Making a base call in an overriding method is generally a good idea, but not in GetHashCode and Equals for classes that directly extend object because those methods are based on the object reference. Meaning that no two objects that use those base methods will ever be equal or have the same hash.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this 'base' call to 'object.{0}', which is directly based on the object reference.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3249</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2328</Id>
          <Category>Sonar Bug</Category>
          <Title>"GetHashCode" should not reference mutable fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>GetHashCode is used to file an object in a Dictionary or Hashtable. If GetHashCode uses non-readonly fields and those fields change after the object is stored, the object immediately becomes mis-filed in the Hashtable. Any subsequent test to see if the object is in the Hashtable will return a false negative.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this use of '{0}' from the 'GetHashCode' declaration, or make it 'readonly'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2328</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2219</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Runtime type checking should be simplified</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>To check the type of an object there are several options:</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use {0} instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2219</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S907</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"goto" statement should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>goto is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such as if, for, while, continue or break should be used instead.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this use of 'goto'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S907</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3397</Id>
          <Category>Sonar Bug</Category>
          <Title>"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>object.Equals() overrides can be optimized by checking first for reference equality between this and the parameter. This check can be implemented by calling object.ReferenceEquals() or base.Equals(), where base is object. However, using base.Equals() is a maintenance hazard because while it works if you extend Object directly, if you introduce a new base class that overrides Equals, it suddenly stops working.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change this guard condition to call 'object.ReferenceEquals'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3397</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1313</Id>
          <Category>Sonar Vulnerability</Category>
          <Title>IP addresses should not be hardcoded</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Hardcoding an IP address into source code is a bad idea for several reasons:</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Make this IP '{0}' address configurable.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1313</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S126</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"if ... else if" constructs should end with "else" clauses</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>This rule applies whenever an if statement is followed by one or more else if statements; the final else if should be followed by an else statement.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Add the missing 'else' clause.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S126</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1066</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Collapsible "if" statements should be merged</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Merging collapsible if statements increases the code's readability.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Merge this if statement with the enclosing one.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1066</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1145</Id>
          <Category>Sonar Bug</Category>
          <Title>Useless "if(true) {...}" and "if(false){...}" blocks should be removed</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>if statements with conditions that are always false have the effect of making blocks of code non-functional. if statements with conditions that are always true are completely redundant, and make the code less readable.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this useless {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1145</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3881</Id>
          <Category>Sonar Bug</Category>
          <Title>"IDisposable" should be implemented correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The IDisposable interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource leaks or more severe bugs.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Fix this implementation of IDisposable to conform to the dispose pattern.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3881</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3925</Id>
          <Category>Sonar Bug</Category>
          <Title>"ISerializable" should be implemented correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The ISerializable interface is the mechanism to control the type serialization process. If not implemented correctly this could result in an invalid serialization and hard to detect bugs.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Update this implementation of 'ISerializable' to conform to the recommended serialization pattern.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3925</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2692</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"IndexOf" checks should not be for positive numbers</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Most checks against an IndexOf value compare it with -1 because 0 is a valid index. Any checks which look for values &amp;gt;0 ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a string, List, or an array, consider using the Contains method instead.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>0 is a valid index, but this check ignores it.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2692</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2190</Id>
          <Category>Sonar Bug</Category>
          <Title>Recursion should not be infinite</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Recursion happens when control enters a loop that has no exit. This can happen a method invokes itself, when a pair of methods invoke each other, or when gotos are used to move between two segments of code. It can be a useful tool, but unless the method includes a provision to break out of the recursion and return, the recursion will continue until the stack overflows and the program crashes.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add a way to break out of this {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2190</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3444</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Interfaces should not simply inherit from base interfaces with colliding members</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived interface will result in the compiler error CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename or add member{1} {0} to this interface to resolve ambiguities.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3444</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3963</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"static" fields should be initialized inline</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When a static constructor serves no other purpose that initializing static fields, it comes with an unnecessary performance cost because the compiler generates a check before each static method or instance constructor invocation.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Initialize all 'static fields' inline and remove the 'static constructor'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3963</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2278</Id>
          <Category>Sonar Vulnerability</Category>
          <Title>Neither DES (Data Encryption Standard) nor DESede (3DES) should be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use the recommended AES (Advanced Encryption Standard) instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2278</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2070</Id>
          <Category>Sonar Vulnerability</Category>
          <Title>SHA-1 and Message-Digest hash algorithms should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is, it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2, MD4, MD6.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Use a stronger hashing/asymmetric algorithm.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2070</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1944</Id>
          <Category>Sonar Bug</Category>
          <Title>Inappropriate casts should not be made</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Inappropriate casts are issues that will lead to unexpected behavior or runtime errors, such as InvalidCastExceptions. The compiler will catch bad casts from one class to another, but not bad casts to interfaces. Nor will it catch nullable values that are known to be null but that are cast to their underlying value types anyway.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1944</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3220</Id>
          <Category>Sonar Bug</Category>
          <Title>Method calls should not resolve ambiguously to overloads with "params"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The rules for method resolution are complex and perhaps not properly understood by all coders. The params keyword can make method declarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Review this call, which partially matches an overload without 'params'. The partial match is '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3220</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1309</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Track uses of in-source issue suppressions</Title>
          <CustomTags />
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>This rule allows you to track the usage of the SuppressMessage attributes and #pragma warning disable mechanism.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Do not suppress issues.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1309</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S103</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Lines should not be too long</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Split this {1} characters long line (which is greater than {0} authorized).</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S103</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S818</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Literal suffixes should be upper case</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Upper case this literal suffix.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S818</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2551</Id>
          <Category>Sonar Bug</Category>
          <Title>Types and "this" should not be used for locking</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Locking on the current object instance (i.e. this), or on a Type object increases the chance of deadlocks because any other thread could acquire (or attempt to acquire) the same lock for another unrelated purpose. </Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Lock on a new 'object' instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2551</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2184</Id>
          <Category>Sonar Bug</Category>
          <Title>Results of integer division should not be assigned to floating point variables</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When division is performed on ints, the result will always be an int. You can assign that result to a double, float or decimal with automatic type conversion, but having started as an int, the result will likely not be what you expect. If the result of int division is assigned to a floating-point variable, precision will have been lost before the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Cast one of the operands of this division to '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2184</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3052</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Members should not be initialized to default values</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>The compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization values, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove this initialization to '{0}', the compiler will do that for you.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3052</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3604</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Member initializer values should not be redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Fields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same time is redundant; the inline initialization will be overridden.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the member initializer, all constructors set an initial value for the member.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3604</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1185</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Overriding members should do more than simply call the same member in the base class</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Overriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time this is justified is in sealed overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides of Equals and GetHashCode.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this {1} '{0}' to simply inherit its behavior.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1185</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3218</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Inner class members should not shadow outer class "static" or type members</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>It's possible to name the members of an inner class the same as the static members of its enclosing class - possible, but a bad idea. That's because maintainers may be confused about which members are being used where. Instead the inner class' members should be renamed and all the references updated.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename this {0} to not shadow the outer class' member with the same name.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3218</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2325</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Methods and properties that don't access instance data should be static</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Class methods and properties that don't access instance data can be static to prevent any misunderstanding about the contract of the method. </Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Make '{0}' a static {1}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2325</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S100</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Methods and properties should be named in camel case</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are camel cased. To reduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, MyXMethod is compliant, but XM on its own is not.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Rename {0} '{1}' to match camel case naming rules, {2}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S100</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3427</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Method overloads with default parameter values should not overlap </Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The rules for method resolution are complex and perhaps not properly understood by all coders. Having overloads with optional parameter values makes the matter even harder to understand. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>This method signature overlaps the one defined on line {0}{1}, the default parameter value {2}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3427</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3600</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"params" should not be introduced on overrides</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Adding params to a method override has no effect. The compiler accepts it, but the callers won't be able to benefit from the added modifier.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'params' should be removed from this override.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3600</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1006</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Method overrides should not change parameter defaults</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Default arguments are determined by the static type of the object. If a default argument is different for a parameter in an overriding method, the value used in the call will be different when calls are made via the base or derived object, which may be contrary to developer expectations. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} the default parameter value {1}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1006</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3262</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"params" should be used on overrides</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Overriding methods automatically inherit the params behavior. To ease readability, this modifier should be explicitly used in the overriding method as well.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'params' should not be removed from an override.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3262</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3450</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Parameters with "[DefaultParameterValue]" attributes should also be marked "[Optional]"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus, [DefaultParameterValue] should always be used in conjunction with [Optional].</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add the 'Optional' attribute to this parameter.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3450</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1172</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Unused method parameters should be removed</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1172</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2681</Id>
          <Category>Sonar Bug</Category>
          <Title>Multiline blocks should be enclosed in curly braces</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Curly braces can be omitted from a one-line block, such as with an if statement or for loop, but doing so can be misleading and induce bugs. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>This line will not be executed {0}; only the first line of this {2}-line block will be. The rest will execute {1}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2681</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1659</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Multiple variables should not be declared on the same line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Declaring multiple variable on one line is difficult to read.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Declare '{0}' in a separate statement.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1659</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3887</Id>
          <Category>Sonar Bug</Category>
          <Title>Mutable, non-private fields should not be "readonly"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using the readonly keyword on a field means that it can't be changed after initialization. However, when applied to collections or arrays, that's only partly true. readonly enforces that another instance can't be assigned to the field, but it cannot keep the contents from being updated. That means that in practice, the field value really can be changed, and the use of readonly on such a field is misleading, and you're likely to not be getting the behavior you expect.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use an immutable collection or reduce the accessibility of this field.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3887</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2386</Id>
          <Category>Sonar Vulnerability</Category>
          <Title>Mutable fields should not be "public static"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>public static mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by reducing the accessibility of the field or by changing the return type to an immutable type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use an immutable collection or reduce the accessibility of this field.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2386</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1163</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Exceptions should not be thrown in finally blocks</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Throwing an exception from within a finally block will mask any exception which was previously thrown in the try or catch block, and the masked's exception message and stack trace will be lost.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Refactor this code to not throw exceptions in finally blocks.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1163</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3265</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Non-flags enums should not be used in bitwise operations</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>enums are usually used to identify distinct elements in a set of values. However enums can be treated as bit fields and bitwise operations can be used on them to combine the values. This is a good way of specifying multiple elements of set with a single value. When enums are used this way, it is a best practice to mark the enum with the FlagsAttribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3265</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3459</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Unassigned members should be removed</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Fields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely, mistakes. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove unassigned {0} '{1}', or set its value.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3459</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2259</Id>
          <Category>Sonar Bug</Category>
          <Title>Null pointers should not be dereferenced</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A reference to null should never be dereferenced/accessed. Doing so will cause a NullReferenceException to be thrown. At best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or it could allow an attacker to bypass security measures.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' is null on at least one execution path.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2259</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1848</Id>
          <Category>Sonar Bug</Category>
          <Title>Objects should not be created to be dropped immediately without being used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Either remove this useless object instantiation of class '{0}' or use it.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1848</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2360</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Optional parameters should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The overloading mechanism should be used in place of optional parameters for several reasons:</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Use the overloading mechanism instead of the optional parameters.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2360</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3466</Id>
          <Category>Sonar Bug</Category>
          <Title>Optional parameters should be passed to "base" calls</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Generally, writing the least code that will readably do the job is a good thing, so omitting default parameter values seems to make sense. Unfortunately, when you omit them from the base call in an override, you're not actually getting the job done thoroughly, because you're ignoring the value the caller passed in. The result will likely not be what the caller expected.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Pass the missing user-supplied parameter value{0} to this 'base' call.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3466</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3451</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The use of [DefaultValue] with [Optional] has no more effect than [Optional] alone. That's because [DefaultValue] doesn't actually do anything; it merely indicates the intent for the value. More than likely, [DefaultValue] was used in confusion instead of [DefaultParameterValue].</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use '[DefaultParameterValue]' instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3451</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3447</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"[Optional]" should not be used on "ref" or "out" parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The use of ref or out in combination with [Optional] is both confusing and contradictory. [Optional] indicates that the parameter doesn't have to be provided, while out and ref mean that the parameter will be used to return data to the caller (ref additionally indicates that the parameter may also be used to pass data into the method).</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the 'Optional' attribute, it cannot be used with '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3447</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3169</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Multiple "OrderBy" calls should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There's no point in chaining multiple OrderBy calls in a LINQ; only the last one will be reflected in the result because each subsequent call completely reorders the list. Thus, calling OrderBy multiple times is a performance issue as well, because all of the sorting will be executed, but only the result of the last sort will be kept.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use 'ThenBy' instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3169</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1206</Id>
          <Category>Sonar Bug</Category>
          <Title>"Equals(Object)" and "GetHashCode()" should be overridden in pairs</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There is a contract between Equals(object) and GetHashCode(): If two objects are equal according to the Equals(object) method, then calling GetHashCode() on each of them must yield the same result. If this is not the case, many collections won't handle class instances correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>This {0} overrides '{1}' and should therefore also override '{2}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1206</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1226</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Method parameters and caught exceptions should not be reassigned</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Introduce a new variable instead of reusing the parameter '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1226</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S927</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"partial" method parameter names should match</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When the parameters to the implementation of a partial method don't match those in the signature declaration, then confusion is almost guaranteed. Either the implementer was confused when he renamed, swapped or mangled the parameter names in the implementation, or callers will be confused.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename parameter '{0}' to '{1}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S927</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3872</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Parameter names should not duplicate the names of their methods</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The name of a method should communicate what it does, and the names of its parameters should indicate how they're used. If a method and its parameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language that's not the case, it is still likely to confuse callers and maintainers.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Rename the parameter '{0}' so that it does not duplicate the method name.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3872</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2234</Id>
          <Category>Sonar Bug</Category>
          <Title>Parameters should be passed in the correct order</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when the names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead to unexpected results.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameters to '{0}' have the same names but not the same order as the method arguments.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2234</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3251</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Implementations should be provided for "partial" methods</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>partial methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking methods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to production, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are critical, missing functionality, the loss of which will lead to unexpected results at runtime.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Supply an implementation for {0} partial method{1}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3251</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3967</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Multidimensional arrays should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A jagged array is an array whose elements are arrays. It is recommended over a multidimensional array because the arrays that make up the elements can be of different sizes, which avoids wasting memory space.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Change this multidimensional array to a jagged array.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3967</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1450</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Private fields only used as local variables in methods should become local variables</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the '{0}' field and declare it as a local variable in the relevant methods.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1450</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2372</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Exceptions should not be thrown from property getters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a method. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the exception throwing from this property getter, or refactor the property into a method.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2372</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2292</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Trivial properties should be auto-implemented</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding cleaner and more readable code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make this an auto-implemented property and remove its backing field.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2292</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2376</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Write-only properties should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be replaced with a setter method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Provide a getter for '{0}' or replace the property with a 'Set{0}' method.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2376</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3926</Id>
          <Category>Sonar Bug</Category>
          <Title>Deserialization methods should be provided for "OptionalField" members</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Fields marked with System.Runtime.Serialization.OptionalFieldAttribute are serialized just like any other field. But such fields are ignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to set such fields during the deserialization process.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3926</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2339</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Public constant members should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Constant members are copied at compile time to the call sites, instead of being fetched at runtime.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Change this constant to a {0} property.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2339</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2368</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Public methods should not have multidimensional array parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used internally.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make this method private or simplify its parameters to not use multidimensional arrays.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2368</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3603</Id>
          <Category>Sonar Bug</Category>
          <Title>Methods with "Pure" attribute should return a value </Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Marking a method with the [Pure] attribute specifies that the method doesn't make any visible changes; thus, the method should return a result, otherwise the call to the method should be equal to no-operation. So [Pure] on a void method is either a mistake, or the method doesn't do any meaningful task.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the 'Pure' attribute or change the method to return a value.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3603</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3253</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Constructor and destructor declarations should not be redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Since the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Also, when only a single public parameterless constructor is defined in a class, then that constructor can be removed because the compiler would generate it automatically. Similarly, empty static constructors and empty destructors are also wasted keystrokes.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove this redundant {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3253</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3254</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Default parameter values should not be passed as arguments</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove this default value assigned to parameter '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3254</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1905</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Redundant casts should not be used</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Unnecessary casting expressions make the code harder to read and understand.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this unnecessary cast to '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1905</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3440</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Variables should not be checked against the values they're about to be assigned</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There's no point in checking a variable against the value you're about to assign it. Save the cycles and lines of code, and simply perform the assignment.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this useless conditional.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3440</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3257</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Declarations and initializations should be as concise as possible</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove the {0}; it is redundant.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3257</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1939</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Inheritance list should not be redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>An inheritance list entry is redundant if:</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1939</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3626</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Jump statements should not be redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Jump statements, such as return, yield break, goto, and continue let you change the default flow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this redundant jump.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3626</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2333</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Redundant modifiers should not be used</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Unnecessary keywords simply clutter the code and should be removed. Specifically:</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>'{0}' is {1} in this context.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2333</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3610</Id>
          <Category>Sonar Bug</Category>
          <Title>Nullable type comparison should not be redundant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Calling GetType() on a nullable object returns the underlying value type. Thus, comparing the returned Type object to typeof(Nullable&amp;lt;SomeType&amp;gt;) doesn't make sense. The comparison either throws an exception or the result can be known at compile time.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this redundant type comparison.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3610</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3235</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Redundant parentheses should not be used</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Redundant parentheses are simply wasted keystrokes, and should be removed.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove these redundant parentheses.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3235</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3441</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Redundant property names should be omitted in anonymous classes</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>When an anonymous type's properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type's property name and the assignment operator.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove the redundant '{0} ='.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3441</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3456</Id>
          <Category>Sonar Bug</Category>
          <Title>"string.ToCharArray()" should not be called redundantly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>ToCharArray can be omitted when the operation on the array could have been done directly on the string, such as when iterating over the characters in a string, and when accessing a character in a string via an array index. In those cases, explicit ToCharArray calls should be omitted.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this redundant 'ToCharArray' call.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3456</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1858</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"ToString()" calls should not be redundant</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly invoking ToString() when the compiler would do it implicitly is also needless code-bloat.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>There's no need to call 'ToString()'{0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1858</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1698</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"==" should not be used when "Equals" is overridden</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using the equality == and inequality != operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then == resolves to reference equality, which may result in unexpected behavior if implementing classes override Equals. Similarly, when a class overrides Equals, but instances are compared with non-overloaded ==, there is a high chance that value comparison was meant instead of the reference one.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Consider using 'Equals' if value comparison was intended.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1698</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2995</Id>
          <Category>Sonar Bug</Category>
          <Title>"Object.ReferenceEquals" should not be used for value types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using Object.ReferenceEquals to compare the references of two value types simply won't return the expected results most of the time because such types are passed by value, not by reference.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use a different kind of comparison for these value types.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2995</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3904</Id>
          <Category>Sonar Bug</Category>
          <Title>Assemblies should have version information</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If no AssemblyVersionAttribute is provided, the same default version will be used for every build. Since the version number is used by The .NET Framework to uniquely identify an assembly this can lead to broken dependencies.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Provide an 'AssemblyVersion' attribute for this assembly.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3904</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2201</Id>
          <Category>Sonar Bug</Category>
          <Title>Return values should not be ignored when function calls don't have any side effects</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either the function call is useless and should be dropped or the source code doesn't behave as expected.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use the return value of method '{0}', which has no side effect.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2201</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2757</Id>
          <Category>Sonar Bug</Category>
          <Title>"=+" should not be used instead of "+="</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The use of operators pairs ( =+, =- or =! ) where the reversed, single operator was meant (+=, -= or !=) will compile and run, but not produce the expected results.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Was '{0}' meant instead?</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2757</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1109</Id>
          <Category>Sonar Code Smell</Category>
          <Title>A close curly brace should be located at the beginning of a line</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Move this closing curly brace to the next line.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1109</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3884</Id>
          <Category>Sonar Vulnerability</Category>
          <Title>"CoSetProxyBlanket" and "CoInitializeSecurity" should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>CoSetProxyBlanket and CoInitializeSecurity both work to set the permissions context in which the process invoked immediately after is executed. Calling them from within that process is useless because it's to late at that point; the permissions context has already been set.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Refactor the code to remove this use of '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3884</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1656</Id>
          <Category>Sonar Bug</Category>
          <Title>Variables should not be self-assigned</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove or correct this useless self-assignment.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1656</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3449</Id>
          <Category>Sonar Bug</Category>
          <Title>Right operands of shift operators should be integers</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Numbers can be shifted with the &amp;lt;&amp;lt; and &amp;gt;&amp;gt; operators, but the right operand of the operation needs to be an int or a type that has an implicit conversion to int. However, with dynamic, the compiler's type checking is turned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to int at runtime, then a RuntimeBinderException will be raised.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this erroneous shift, it will fail because '{0}' can't be implicitly converted to 'int'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3449</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1697</Id>
          <Category>Sonar Bug</Category>
          <Title>Short-circuit logic should be used to prevent null pointer dereferences in conditionals</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is null, leading to a guaranteed null pointer dereference.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Either reverse the equality operator in the '{0}' null test, or reverse the logical operator that follows it.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1697</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2437</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Silly bit operations should not be performed</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Certain bit operations are just silly and should not be performed because their results are predictable.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this silly bit operation.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2437</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S122</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Statements should be on separate lines</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>For better readability, do not put more than one statement on a single line.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Reformat the code to have only one statement per line.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S122</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2743</Id>
          <Category>Sonar Bug</Category>
          <Title>Static fields should not be used in generic types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A static field in a generic type is not shared among instances of different closed constructed types, thus LengthLimitedSingletonCollection&amp;lt;int&amp;gt;.instances and LengthLimitedSingletonCollection&amp;lt;string&amp;gt;.instances will point to different objects, even though instances is seemingly shared among all LengthLimitedSingletonCollection&amp;lt;&amp;gt; generic classes.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A static field in a generic type is not shared among instances of different close constructed types.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2743</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3263</Id>
          <Category>Sonar Bug</Category>
          <Title>Static fields should appear in the order they must be initialized </Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class above the field or fields required for its initialization will yield unexpected results.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Move this field's initializer into a static constructor.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3263</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2223</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Non-constant static fields should not be visible</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A static field that is neither constant nor read-only is not thread-safe. Correctly accessing these fields from different threads needs synchronization with locks. Improper synchronization may lead to unexpected results, thus publicly visible static fields are best suited for storing non-changing data shared by many consumers. To enforce this intent, these fields should be marked readonly or converted to constants.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the visibility of '{0}' or make it 'const' or 'readonly'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2223</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3010</Id>
          <Category>Sonar Bug</Category>
          <Title>Static fields should not be updated in constructors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Assigning a value to a static field in a constructor could cause unreliable behavior at runtime since it will change the value for all instances of the class.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this assignment of '{0}' or initialize it statically.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3010</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2696</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Instance members should not write to "static" fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Correctly updating a static field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple class instances and/or multiple threads in play. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2696</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2156</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"sealed" classes should not have "protected" members</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The difference between private and protected visibility is that child classes can see and use protected members, but they cannot see private ones. Since a sealed class cannot have children, marking its members protected is confusingly pointless.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove this 'protected' modifier.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2156</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2674</Id>
          <Category>Sonar Bug</Category>
          <Title>The length returned from a stream read should be checked</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>You cannot assume that any given stream reading call will fill the byte[] passed in to the method with the number of bytes requested. Instead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both harmful and difficult to reproduce.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Check the return value of the '{0}' call to see how many bytes were read.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2674</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1643</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Strings should not be concatenated using '+' in a loop</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>StringBuilder is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use a StringBuilder instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1643</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2275</Id>
          <Category>Sonar Bug</Category>
          <Title>Composite format strings should not lead to unexpected behavior at runtime</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of String.Format, StringBuilder.AppendFormat, Console.Write, Console.WriteLine, TextWriter.Write, TextWriter.WriteLine, Debug.WriteLine(String, Object[]), Trace.TraceError(String, Object[]), Trace.TraceInformation(String, Object[]), Trace.TraceWarning(String, Object[]) and TraceSource.TraceInformation(String, Object[]). </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2275</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3457</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Composite format strings should be used correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of String.Format, StringBuilder.AppendFormat, Console.Write, Console.WriteLine, TextWriter.Write, TextWriter.WriteLine, Debug.WriteLine(String, Object[]), Trace.TraceError(String, Object[]), Trace.TraceInformation(String, Object[]), Trace.TraceWarning(String, Object[]) and TraceSource.TraceInformation(String, Object[]). </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3457</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1449</Id>
          <Category>Sonar Bug</Category>
          <Title>Culture should be specified for "string" operations</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>string.ToLower(), ToUpper, IndexOf, LastIndexOf, and Compare are all culture-dependent, as are some (floating point number and DateTime-related) calls to ToString. Fortunately, all have variants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default culture, possibly creating problems with international characters.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1449</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3876</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Strings or integral types should be used for indexers</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Strings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and potentially a situation where a method should be used instead.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Use string or an integral type here, or refactor this indexer into a method.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3876</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3234</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"GC.SuppressFinalize" should not be invoked for types without destructors</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>GC.SuppressFinalize asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the dispose pattern where object finalization is already handled in IDisposable.Dispose. However, it has no effect if there is no finalizer defined in the object's type, so using it in such cases is just confusing.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this useless call to 'GC.SuppressFinalize'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3234</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3458</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Empty "case" clauses that fall through to the "default" should be omitted</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>Empty case clauses that fall through to the default are useless. Whether or not such a case is present, the default clause will be invoked. Such cases simply clutter the code, and should be removed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this empty 'case' clause.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3458</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1301</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"switch" statements should have at least 3 "case" clauses</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>switch statements are useful when there are many different cases depending on the value of the same expression.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Replace this 'switch' statement with 'if' statements to increase readability.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1301</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3532</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Empty "default" clauses should be removed</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Hidden</DefaultSeverity>
          <Description>The default clause should take appropriate action. Having an empty default is a waste of keystrokes.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Remove this empty 'default' clause.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3532</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S131</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"switch/Select" statements should end with "default/Case Else" clauses</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The requirement for a final default clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the switch covers all current values of an enum, a default case should still be used because there is no guarantee that the enum won't be extended.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Add a '{0}' clause to this '{1}' statement.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S131</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S105</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Tabulation characters should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Replace all tab characters in this file by sequences of white-spaces.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S105</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3216</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"ConfigureAwait(false)" should be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>After an awaited Task has executed, you can continue execution in the original, calling thread or any arbitrary thread. Unless the rest of the code needs the context from which the Task was spawned, Task.ConfigureAwait(false) should be used to keep execution in the Task thread to avoid the need for context switching and the possibility of deadlocks.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Add '.ConfigureAwait(false)' to this call to allow execution to continue in any thread.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3216</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2758</Id>
          <Category>Sonar Bug</Category>
          <Title>The ternary operator should not return the same value regardless of the condition</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the condition. Either the operator itself is pointless, or a mistake was made in coding it. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>This operation returns the same value whether the condition is 'true' or 'false'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2758</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3005</Id>
          <Category>Sonar Bug</Category>
          <Title>"ThreadStatic" should not be used on non-static fields</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When a non-static class field is annotated with ThreadStatic, the code seems to show that the field can have different values for different calling threads, but that's not the case, since the ThreadStatic attribute is simply ignored on non-static fields. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the 'ThreadStatic' attribute from this definition.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3005</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2996</Id>
          <Category>Sonar Bug</Category>
          <Title>"ThreadStatic" fields should not be initialized</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When an object has a field annotated with ThreadStatic, that field is shared within a given thread, but unique across threads. Since a class' static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial values.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this initialization of '{0}' or make it lazy.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2996</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S112</Id>
          <Category>Sonar Code Smell</Category>
          <Title>General exceptions should never be thrown</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Throwing such general exceptions as Exception, SystemException, ApplicationException, IndexOutOfRangeException, NullReferenceException, OutOfMemoryException and ExecutionEngineException prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' should not be thrown by user code.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S112</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2436</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Classes and methods should not have too many generic parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A method or class with too many type parameters has likely aggregated too many responsibilities and should be split.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Reduce the number of generic parameters in the '{0}' {1} to no more than the {2} authorized.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2436</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1479</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"switch" statements should not have too many "case" clauses</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When switch statements have large sets of case clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Consider reworking this 'switch' to reduce the number of 'case' from {1} to at most {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1479</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S107</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Methods should not have too many parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>{2} has {1} parameters, which is greater than the {0} authorized.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S107</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2225</Id>
          <Category>Sonar Bug</Category>
          <Title>"ToString()" method should not return null</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Calling ToString() on an object should always return a string. Returning null instead contravenes the method's implicit contract.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Return empty string instead.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2225</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3443</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Type should not be examined on "System.Type" instances</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If you call GetType() on a Type variable, the return value will always be typeof(System.Type). So there's no real point in making that call. The same applies to passing a type argument to IsInstanceOfType. In both cases the results are entirely predictable.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3443</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2761</Id>
          <Category>Sonar Bug</Category>
          <Title>Doubled prefix operators "!!" and "~~" should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Calling the ! or ~ prefix operator twice does nothing: the second invocation undoes the first. Such mistakes are typically caused by accidentally double-tapping the key in question without noticing.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use the '{0}' operator just once or not at all.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2761</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1751</Id>
          <Category>Sonar Bug</Category>
          <Title>Jump statements should not be used unconditionally</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Having an unconditional break, return, (@)throw or goto in a loop renders it useless; the loop will only execute once and the loop structure itself is simply wasted keystrokes.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this '{0}' statement or make it conditional.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1751</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3264</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Events should be invoked</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Events that are not invoked anywhere are dead code, and there's no good reason to keep them in the source.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this unused event or invoke it.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3264</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1144</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Unused private types or members should be removed</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Info</DefaultSeverity>
          <Description>Private, or internal, types or members that are never executed or referenced are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the unused {0} {1} '{2}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1144</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3241</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Methods should not return values that are never used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Private methods are clearly intended for use only within their own scope. When such methods return values that are never used by any of their callers, then clearly there is no need to actually make the return, and it should be removed in the interests of efficiency and clarity. </Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change return type to 'void'; not a single caller uses the returned value.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3241</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3962</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"static readonly" constants should be "const" instead</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The value of a static readonly field is computed at runtime while the value of a const field is calculated at compile time, which improves performance.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Replace this 'static readonly' declaration with 'const'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3962</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S121</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Control structures should use curly braces</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Add curly braces around the nested statement(s) in this '{0}' block.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S121</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2178</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Short-circuit logic should be used in boolean contexts</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are evaluated under the wrong circumstances.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Correct this '{0}' to '{1}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2178</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3256</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"string.IsNullOrEmpty" should be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using string.Equals to determine if a string is empty is significantly slower than using string.IsNullOrEmpty() or checking for string.Length == 0. string.IsNullOrEmpty() is both clear and concise, and therefore preferred to laborious, error-prone, manual null- and emptiness-checking.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use 'string.IsNullOrEmpty()' instead of comparing to empty string.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3256</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3237</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"value" parameters should be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>In property and indexer set methods, and in event add and remove methods, the implicit value parameter holds the value the accessor was called with. Not using the value means that the accessor ignores the caller's intent which could cause unexpected results at runtime.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use the 'value' parameter in this {0} accessor declaration.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3237</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2123</Id>
          <Category>Sonar Bug</Category>
          <Title>Values should not be uselessly incremented</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this {0} or correct the code not to waste it.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2123</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3898</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Value types should implement "IEquatable&lt;T&gt;"</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If you're using a struct, it is likely because you're interested in performance. But by failing to implement IEquatable&amp;lt;T&amp;gt; you're loosing performance when comparisons are made because without IEquatable&amp;lt;T&amp;gt;, boxing and reflection are used to make comparisons. </Description>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <MessageFormat>Implement 'IEquatable&lt;T&gt;' in value type '{0}'.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3898</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1117</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Local variables should not shadow class fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the variable is being used.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename '{0}' which hides the {1} with the same name.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1117</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S1481</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Unused local variables should be removed</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this unused '{0}' local variable.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S1481</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S2290</Id>
          <Category>Sonar Code Smell</Category>
          <Title>Field-like events should not be virtual</Title>
          <CustomTags>
            <string>Unnecessary</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Field-like events are events that do not have explicit add and remove methods. The compiler generates a private delegate field to back the event, as well as generating the implicit add and remove methods.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove this 'virtual' modifier of {0}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S2290</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3597</Id>
          <Category>Sonar Code Smell</Category>
          <Title>"ServiceContract" and "OperationContract" attributes should be used together</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The ServiceContract attribute specifies that a class or interface defines the communication contract of a Windows Communication Foundation (WCF) service. The service operations of this class or interface are defined by OperationContract attributes added to methods. It doesn't make sense to define a contract without any service operations; thus, in a ServiceContract class or interface at least one method should be annotated with OperationContract. Similarly, WCF only serves OperationContract methods that are defined inside ServiceContract classes or interfaces; thus, this rule also checks that ServiceContract is added to the containing type of OperationContract methods.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add the '{0}' attribute to {1}.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3597</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S3598</Id>
          <Category>Sonar Bug</Category>
          <Title>One-way "OperationContract" methods should have "void" return type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>When declaring a Windows Communication Foundation (WCF) OperationContract method one-way, that service method won't return any result, not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return type therefore does not make sense.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>This method can't return any values because it is marked as one-way operation.</MessageFormat>
          <HelpLinkUri>http://vs.sonarlint.org/rules/index.html#version=5.10.1.1411&amp;ruleId=S3598</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>S9999-cpd</Id>
          <Category />
          <Title>Copy-paste token calculator</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat />
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>S9999-encoding</Id>
          <Category />
          <Title>File encoding calculator</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat />
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>S9999-metrics</Id>
          <Category />
          <Title>Metrics calculator</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat />
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>S9999-symbolRef</Id>
          <Category />
          <Title>Symbol reference calculator</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat />
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>S9999-token-type</Id>
          <Category />
          <Title>Token type calculator</Title>
          <CustomTags>
            <string>NotConfigurable</string>
          </CustomTags>
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat />
          <HelpLinkUri />
        </Rule>
      </Rules>
    </RuleCollection>
    <RuleCollection>
      <Name>ReSharper</Name>
      <Rules>
        <Rule>
          <Id>AccessToDisposedClosure</Id>
          <Title>Access to disposed closure</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>AccessToForEachVariableInClosure</Id>
          <Title>Access to foreach variable in closure</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>AccessToModifiedClosure</Id>
          <Title>Access to modified closure</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Access+to+modified+closure</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AccessToStaticMemberViaDerivedType</Id>
          <Title>Access to a static member of a type via a derived type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Access+to+a+static+member+of+a+type+via+a+derived+type</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AnnotationConflictInHierarchy</Id>
          <Title>Annotation conflict in hierarchy</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>AnnotationRedundanceAtValueType</Id>
          <Title>Nullable attribute usage with declaration having value or void type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Nullable+attribute+usage+with+declaration+having+value+or+void+type</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AnnotationRedundanceInHierarchy</Id>
          <Title>Annotation duplicate in hierarchy</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asp.ContentPlaceholderNotResolved</Id>
          <Title>Unknown content placeholder</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asp.DeadCode</Id>
          <Title>ASP.NET Dead Code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asp.Entity</Id>
          <Title>Unknown html entity</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asp.Image</Id>
          <Title>Wrong image size</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asp.NotResolved</Id>
          <Title>Unknown symbol</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asp.ResolveWarning</Id>
          <Title>ASP.NET Resolve Warning</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asp.SkinNotResolved</Id>
          <Title>Unknown skin</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asp.TagAttributeWithOptionalValue</Id>
          <Title>Attribute with optional value problem</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>AspUnusedRegisterDirectiveHighlighting</Id>
          <Title>Unused register directive</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asp.ThemeNotResolved</Id>
          <Title>Unknown theme</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asp.Warning</Id>
          <Title>ASP.NET Warning</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>AspOdsMethodReferenceResolveError</Id>
          <Title>Object data source method resolve problem</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>AssignedValueIsNeverUsed</Id>
          <Title>Assigned value is never used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>AssignNullToNotNullAttribute</Id>
          <Title>Possible 'null' assignment to entity marked with 'Value cannot be null' attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Possible+'null'+assignment+to+an+entity+marked+with+'Value+cannot+be+null'+attribute</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AssignToImplicitGlobalInFunctionScope</Id>
          <Title>Assignment to an implicitly declared global variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Asxx.PathError</Id>
          <Title>Asxx.PathError</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>BaseMemberHasParams</Id>
          <Title>Base member has 'params' parameter, but overrider hasn't</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>BaseMethodCallWithDefaultParameter</Id>
          <Title>Call to base member with implicit default parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>BaseObjectEqualsIsObjectEquals</Id>
          <Title>Call to 'base.Equals(...)' is reference equality</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>BaseObjectGetHashCodeCallInGetHashCode</Id>
          <Title>Overriden GetHashCode calls base 'Object.GetHashCode()'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>BitwiseOperatorOnEnumWithoutFlags</Id>
          <Title>Bitwise operation on enum which is not marked by [Flags] attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CanBeReplacedWithTryCastAndCheckForNull</Id>
          <Title>Type check and direct cast can be replaced with try cast and check for null</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CannotApplyEqualityOperatorToType</Id>
          <Title>Compare with '==' types marked by 'CannotApplyEqualityOperatorAttribute'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Compare+with+%27%3D%3D%27+types+marked+by+%27CannotApplyEqualityOperatorAttribute%27</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CenterTagIsObsolete</Id>
          <Title>CenterTagIsObsolete</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CheckForReferenceEqualityInstead.1</Id>
          <Title>Check for reference equality instead: Check for reference equality instead</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CheckForReferenceEqualityInstead.2</Id>
          <Title>Check for reference equality instead: Check for reference equality instead</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CheckNamespace</Id>
          <Title>Namespace does not correspond to file location</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Namespace+does+not+correspond+to+file+location</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ClassCanBeSealed.Global</Id>
          <Title>Class can be made sealed(non-inheritable): Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ClassCanBeSealed.Local</Id>
          <Title>Class can be made sealed(non-inheritable): Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ClassCannotBeInstantiated</Id>
          <Title>Class cannot be instantiated</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ClassNeverInstantiated.Global</Id>
          <Title>Class is never instantiated: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ClassNeverInstantiated.Local</Id>
          <Title>Class is never instantiated: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ClassWithVirtualMembersNeverInherited.Global</Id>
          <Title>Class with virtual(overridable) members never inherited: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ClassWithVirtualMembersNeverInherited.Local</Id>
          <Title>Class with virtual(overridable) members never inherited: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ClearAttributeIsObsolete</Id>
          <Title>ClearAttributeIsObsolete</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ClearAttributeIsObsolete.All</Id>
          <Title>ClearAttributeIsObsolete.All</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CompareNonConstrainedGenericWithNull</Id>
          <Title>Possible compare of value type with 'null'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Possible+compare+of+value+type+with+null</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CompareOfFloatsByEqualityOperator</Id>
          <Title>Compare of float numbers with equality operator</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Compare+of+float+numbers+by+equality+operator</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ConditionalTernaryEqualBranch</Id>
          <Title>'?:' expression has identical true and false branches</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConditionIsAlwaysConst</Id>
          <Title>Condition is always constant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConditionIsAlwaysTrueOrFalse</Id>
          <Title>Expression is always 'true' or always 'false'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConstantNullCoalescingCondition</Id>
          <Title>'??' condition is known to be null or not null</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConstructorInitializerLoop</Id>
          <Title>Possible cyclic constructor call</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Possible+cyclic+constructor+call</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ContractAnnotationNotParsed</Id>
          <Title>Problem in contract annotation definition</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertClosureToMethodGroup</Id>
          <Title>Convert anonymous method to method group</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertConditionalTernaryToNullCoalescing</Id>
          <Title>'?:' expression can be re-written as '??' expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertIfDoToWhile</Id>
          <Title>Convert 'if do while' to 'while</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertIfStatementToConditionalTernaryExpression</Id>
          <Title>'if' statement can be re-written as '?:' expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertIfStatementToNullCoalescingExpression</Id>
          <Title>'if' statement can be re-written as '??' expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertIfStatementToReturnStatement</Id>
          <Title>'if-return' statement can be re-written as 'return' statement</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertIfStatementToSwitchStatement</Id>
          <Title>Convert 'if' statement to 'switch' statement</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertIfToOrExpression</Id>
          <Title>Convert 'if' to '||'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertNullableToShortForm</Id>
          <Title>Convert 'Nullable&lt;T&gt;' to 'T?'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/pages/viewpage.action?pageId=37235229</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ConvertToAutoProperty</Id>
          <Title>Convert property to auto-property</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertToAutoPropertyWithPrivateSetter</Id>
          <Title>Convert property to auto-property with private setter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertToConstant.Global</Id>
          <Title>Convert local variable or field to constant: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertToConstant.Local</Id>
          <Title>Convert local variable or field to constant: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertToLambdaExpression</Id>
          <Title>Convert to lambda expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ConvertToStaticClass</Id>
          <Title>Convert to static class</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CoVariantArrayConversion</Id>
          <Title>Co-variant array conversion</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Co-variant+array+conversion+may+cause+exception+on+write+operation</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0108</Id>
          <Title>CS0108,CS0114:Keyword 'new' is required</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0109</Id>
          <Title>CS0109:Keyword 'new' is redundant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0162</Id>
          <Title>CS0162:Code is unreachable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0183</Id>
          <Title>CS0183:Given expression is always of the provided type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0184</Id>
          <Title>CS0184:Given expression is never of the provided type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0197</Id>
          <Title>CS0197:Taking address of marshal-by-reference class field</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0252</Id>
          <Title>CS0252,CS0253:Possible unintended reference comparison</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0420</Id>
          <Title>CS0420:Reference to a volatile field will not be treated as volatile</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0465</Id>
          <Title>CS0465:Introducing a 'Finalize' method can interfere with destructor invocation</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0469</Id>
          <Title>CS0469:'goto case' value is not implicitly convertible to required type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0612</Id>
          <Title>CS0612:Use of obsolete symbol (without message)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0618</Id>
          <Title>CS0618:Use of obsolete symbol</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0628</Id>
          <Title>CS0628:Declaring new protected member in sealed class is the same as declaring it as private</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0642</Id>
          <Title>CS0642:Possible mistaken empty statement</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0657</Id>
          <Title>CS0657:'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0658</Id>
          <Title>CS0658:'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0659</Id>
          <Title>CS0659:Class overrides Object.Equals(object o) but not Object.GetHashCode()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0660</Id>
          <Title>CS0660,CS0661:Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overriden</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0665</Id>
          <Title>CS0665:Assignment in conditional expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0672</Id>
          <Title>CS0672:Member overrides obsolete member</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS0693</Id>
          <Title>CS0693:Type parameter has the same name as a type parameter from the outer type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1030</Id>
          <Title>CS1030:'#warning' directive</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1066</Id>
          <Title>CS1066:Default value specified for parameter will have no effect because it applies to a member that is used in contexts that do not allow optional
      arguments</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1522</Id>
          <Title>CS1522:Empty switch block</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1570</Id>
          <Title>CS1570:Invalid XML in XML comment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1571</Id>
          <Title>CS1571:Duplicate param tag in XML comment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1573</Id>
          <Title>CS1573:Parameter has no matching param tag in the XML comment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1574</Id>
          <Title>CS1574:Ambiguous reference in XML comment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1580</Id>
          <Title>CS1580:Incorrect signature in XML comment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1584</Id>
          <Title>CS1584:Syntax error in XML comment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1587</Id>
          <Title>CS1587:XML comment is not placed on a valid language element</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1589</Id>
          <Title>CS1589:Unable to include XML fragment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1590</Id>
          <Title>CS1590:Invalid XML include element</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1591</Id>
          <Title>CS1591:Missing XML comment for publicly visible type or member</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1592</Id>
          <Title>CS1592:Badly formed XML in included comments file</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1710</Id>
          <Title>CS1710:Duplicate typeparam tag in XML comment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1712</Id>
          <Title>CS1712:Type parameter has no matching typeparam tag in the XML comment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1717</Id>
          <Title>CS1717:Assignment made to same variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1723</Id>
          <Title>CS1723:XML comment has cref attribute that refers to a type parameter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1911</Id>
          <Title>CS1911:Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable
      code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1957</Id>
          <Title>CS1957:Multiple override candidates at run-time</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS1998</Id>
          <Title>CS1998:Async function without await expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::CS4014</Id>
          <Title>CS4014:Async method invocation without await expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpWarnings::WME006</Id>
          <Title>WME006:Namespace should be default namespace of this project</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CssBrowserCompatibility</Id>
          <Title>CSS symbol is not compatible with a specific browser</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CssNotResolved</Id>
          <Title>Unknown CSS symbol</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CssObsolete</Id>
          <Title>CSS symbol is obsolete</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CssPropertyDoesNotOverrideVendorProperty</Id>
          <Title>Property does not override vendor-prefixed property</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>DeclarationIsEmpty</Id>
          <Title>Declaration is empty</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>DefaultValueAttributeForOptionalParameter</Id>
          <Title>Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>DelegateSubtraction</Id>
          <Title>Delegate subtractions</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Delegate+subtraction+has+unpredictable+semantics</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>DlTagContainsNonDtOrDdElements</Id>
          <Title>DlTagContainsNonDtOrDdElements</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>DoNotCallOverridableMethodsInConstructor</Id>
          <Title>Virtual member call in constructor</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Virtual+method+call+in+constructor</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>DoubleNegationOperator</Id>
          <Title>Double negation operator</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Double+negation+operator</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>DuplicateResource</Id>
          <Title>Duplicate resource name</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>DuplicatingLocalDeclaration</Id>
          <Title>Duplicate local declaration</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>DuplicatingPropertyDeclaration</Id>
          <Title>Duplicate property declaration</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>DuplicatingSwitchLabel</Id>
          <Title>Duplicate switch label</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>DynamicShiftRightOpIsNotInt</Id>
          <Title>Right operand of dynamic shift operation should be convertible to 'int'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ElidedTrailingElement</Id>
          <Title>A trailing element of an array is elided</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EmptyConstructor</Id>
          <Title>Empty constructor</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Empty+static+constructor+is+redundant</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>EmptyDestructor</Id>
          <Title>Empty destructor</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EmptyEmbeddedStatement</Id>
          <Title>Empty control statement body</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EmptyForStatement</Id>
          <Title>Empty 'for' loop is redundant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EmptyGeneralCatchClause</Id>
          <Title>Empty general catch clause</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Empty+general+catch+clause+suppresses+all+errors</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>EmptyNamespace</Id>
          <Title>Empty namespace declaration</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EmptyObjectPropertyDeclaration</Id>
          <Title>Object property declaration is expected</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EmptyStatement</Id>
          <Title>Empty statement is redundant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EmptyTitleTag</Id>
          <Title>EmptyTitleTag</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EnumerableSumInExplicitUncheckedContext</Id>
          <Title>'Enumerable.Sum' invocation in explicit unchecked context</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EnumUnderlyingTypeIsInt</Id>
          <Title>Underlying type of enum is 'int'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Underlying+type+of+enum+is+'int'</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>EqualExpressionComparison</Id>
          <Title>Similar expressions comparison</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ErrorInXmlDocReference</Id>
          <Title>Error in Xml doc comment reference</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EventNeverInvoked</Id>
          <Title>Event never invoked</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EventNeverInvoked.Global</Id>
          <Title>Abstract or virtual(overridable) event is never invoked</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EventNeverSubscribedTo.Global</Id>
          <Title>Event is never subscribed to: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EventNeverSubscribedTo.Local</Id>
          <Title>Event is never subscribed to: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>EventUnsubscriptionViaAnonymousDelegate</Id>
          <Title>Event unsubscription via anonymous delegate</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ExplicitCallerInfoArgument</Id>
          <Title>Explicit argument passed to parameter with caller info attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ExpressionIsAlwaysConst</Id>
          <Title>Expression is always constant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ExpressionIsAlwaysNull</Id>
          <Title>Expression is always 'null'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>FieldCanBeMadeReadOnly.Global</Id>
          <Title>Field can be made readonly: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>FieldCanBeMadeReadOnly.Local</Id>
          <Title>Field can be made readonly: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Field+can+be+made+read-only</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ForCanBeConvertedToForeach</Id>
          <Title>For-loop can be converted into foreach-loop</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>FormatStringPlaceholdersMismatch</Id>
          <Title>Format string placeholders mismatch</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>FormatStringProblem</Id>
          <Title>String formatting method problems</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ForStatementConditionIsTrue</Id>
          <Title>'true' is redundant as 'for'-statement condition</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>FunctionNeverReturns</Id>
          <Title>Function never returns</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>FunctionRecursiveOnAllPaths</Id>
          <Title>Function is recursive on all paths</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>GCSuppressFinalizeForTypeWithoutDestructor</Id>
          <Title>'GC.SuppressFinalize' is invoked for type without destructor</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>HeuristicallyUnreachableCode</Id>
          <Title>Heuristically unreachable code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>HeuristicUnreachableCode</Id>
          <Title>Heuristically unreachable code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>HexColorValueWithAlpha</Id>
          <Title>Invalid hexadecimal value of color</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.AttributeNotResolved</Id>
          <Title>Unknown attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.DeadCode</Id>
          <Title>Html Dead Code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.EventNotResolved</Id>
          <Title>Unknown event</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.IdNotResolved</Id>
          <Title>Unknown ID</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.Obsolete</Id>
          <Title>Obsolete or nonstandard element</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.PathError</Id>
          <Title>Path error</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.TagNotClosed</Id>
          <Title>Not closed tag</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.TagNotResolved</Id>
          <Title>Unknown tag</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.TagShouldBeSelfClosed</Id>
          <Title>Wrong closed tag</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.TagShouldNotBeSelfClosed</Id>
          <Title>Wrong self-closed tag</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Html.Warning</Id>
          <Title>Html Warning</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ImplicitlyCapturedClosure</Id>
          <Title>Implicitly captured closure</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ImpureMethodCallOnReadonlyValueField</Id>
          <Title>Impure method is called for readonly field of value type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InactivePreprocessorBranch</Id>
          <Title>Inactive preprocessor branch</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InconsistentFunctionReturns</Id>
          <Title>Inconsistent function returns</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InconsistentNaming</Id>
          <Title>Inconsistent Naming</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>IntroduceOptionalParameters.Global</Id>
          <Title>Introduce optional parameters: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>IntroduceOptionalParameters.Local</Id>
          <Title>Introduce optional parameters: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InvalidAttributeValue</Id>
          <Title>Invalid attribute value</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InvalidTaskElement</Id>
          <Title>Invalid task element</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InvalidValue</Id>
          <Title>Invalid value</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InvalidValueType</Id>
          <Title>Resource value type is invalid</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InvertCondition.1</Id>
          <Title>Invert condition: Invert condition</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InvertIf</Id>
          <Title>Invert 'if' statement to reduce nesting</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Invert+'if'+to+reduce+nesting</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>InvocationIsSkipped</Id>
          <Title>Method invocation is skipped</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Method+invocation+is+skipped</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>InvocationOfNonFunction</Id>
          <Title>Invocation of non-function expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InvokeAsExtensionMethod</Id>
          <Title>Convert static method invocation to extension method call</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>InvokedExpressionMaybeNonFunction</Id>
          <Title>Invoked expression is not a function value</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>IteratorMethodResultIsIgnored</Id>
          <Title>Return value of iterator is not used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>JoinDeclarationAndInitializer</Id>
          <Title>Join local variable declaration and assignment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>JsFunctionCanBeConvertedToLambda</Id>
          <Title>JsFunctionCanBeConvertedToLambda</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>JsUnreachableCode</Id>
          <Title>Unreachable code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>JumpMustBeInLoop</Id>
          <Title>Use 'break' or 'continue' outside of loop body</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>LabelOrSemicolonExpected</Id>
          <Title>Use of expression after break or continue</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>LocalizableElement</Id>
          <Title>Element is localizable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>LocalVariableHidesMember</Id>
          <Title>Local variable hides member</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Local+variable+hides+member</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>LongLiteralEndingLowerL</Id>
          <Title>Long literal ending with 'l' instead of 'L'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>LoopCanBeConvertedToQuery</Id>
          <Title>Loop can be converted into LINQ-expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Loop+can+be+converted+into+a+LINQ+expression</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>LoopCanBePartlyConvertedToQuery</Id>
          <Title>Part of loop's body can be converted into LINQ-expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>LoopVariableIsNeverChangedInsideLoop</Id>
          <Title>Loop control variable is never changed inside loop</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>LValueIsExpected</Id>
          <Title>L-value expected error</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MeaninglessDefaultParameterValue</Id>
          <Title>'DefaultParameterValueAttrbiute' should be used in conjunction with 'OptionalAttribute'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MemberCanBeInternal</Id>
          <Title>Member or type can be made internal(friend)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MemberCanBeMadeStatic.Global</Id>
          <Title>Member can be made static(shared): Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MemberCanBeMadeStatic.Local</Id>
          <Title>Member can be made static(shared): Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MemberCanBePrivate.Global</Id>
          <Title>Member can be made private: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MemberCanBePrivate.Local</Id>
          <Title>Member can be made private: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MemberCanBeProtected.Global</Id>
          <Title>Member can be made protected: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MemberCanBeProtected.Local</Id>
          <Title>Member can be made protected: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MemberHidesStaticFromOuterClass</Id>
          <Title>Member hides static member from outer class</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MethodOverloadWithOptionalParameter</Id>
          <Title>Method with optional or 'params' parameter is hidden by overload</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MethodSupportsCancellation</Id>
          <Title>Method supports cancellation</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MissingAltAttributeInImgTag</Id>
          <Title>MissingAltAttributeInImgTag</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MissingAttribute</Id>
          <Title>Missing required attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MissingBodyTag</Id>
          <Title>MissingBodyTag</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MissingHeadAndBodyTags</Id>
          <Title>MissingHeadAndBodyTags</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MissingHeadTag</Id>
          <Title>MissingHeadTag</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MissingTitleTag</Id>
          <Title>MissingTitleTag</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MisuseOfOwnerFunctionThis</Id>
          <Title>Misuse of 'this' qualifier in inner function</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MoreSpecificForeachVariableTypeAvailable</Id>
          <Title>Iteration variable can be declared with a more specific type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Iteration+variable+can+be+declared+with+a+more+specific+type</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MultipleDeclarationsInForeach</Id>
          <Title>Multiple declarations in 'for in' error</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MultipleNullableAttributesUsage</Id>
          <Title>Multiple nullable attributes usage</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Multiple+nullable+attributes+usage</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MultipleOrderBy</Id>
          <Title>Multiple sequential 'OrderBy' invocation</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>MultipleOutputTags</Id>
          <Title>Multiple output tags defined</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Mvc.ActionNotResolved</Id>
          <Title>MVC: Unknown action</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Mvc.AreaNotResolved</Id>
          <Title>MVC: Unknown area</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Mvc.ControllerNotResolved</Id>
          <Title>MVC: Unknown controller</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Mvc.InvalidModelType</Id>
          <Title>MVC: Mismatch Model Type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Mvc.MasterpageNotResolved</Id>
          <Title>MVC: Unknown masterpage</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Mvc.PartialViewNotResolved</Id>
          <Title>MVC: Unknown partial view</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Mvc.TemplateNotResolved</Id>
          <Title>MVC: Unknown template</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Mvc.ViewNotResolved</Id>
          <Title>MVC: Unknown view</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NegativeEqualityExpression</Id>
          <Title>Simplify negative equality expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Simplify+negative+equality+expression</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>NonReadonlyFieldInGetHashCode</Id>
          <Title>Non-readonly field referenced in 'GetHashCode()'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NonVolatileFieldInDoubleCheckLocking</Id>
          <Title>Possible incorrect implementation of Double-Check Locking. Checked field must be volatile or assigned from local variable after 'Thread.MemoryBarrier()'
      call</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NotAccessedField.Global</Id>
          <Title>Non-accessed field: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NotAccessedField.Local</Id>
          <Title>Non-accessed field: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NotAccessedVariable</Id>
          <Title>Non-accessed local variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NotAccessedVariable.Compiler</Id>
          <Title>Non-accessed local variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NotAllPathsReturnValue</Id>
          <Title>Not all code paths return a value</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NotAssignedOutParameter</Id>
          <Title>'out' parameter is not assigned upon exit</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NotDeclaredInParentCulture</Id>
          <Title>Resource is not declared in base culture</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NotOverridenInSpecificCulture</Id>
          <Title>Resource is not overridden in specific culture</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NotResolved</Id>
          <Title>Cannot resolve symbol</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NotResolvedInText</Id>
          <Title>Cannot resolve symbol in text argument</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>NUnit.NonPublicMethodWithTestAttribute</Id>
          <Title>NUnit.NonPublicMethodWithTestAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ObjectCreationAsStatement</Id>
          <Title>Possible unassigned object created by 'new' expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>OlTagContainsNonLiElements</Id>
          <Title>OlTagContainsNonLiElements</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>OperatorIsCanBeUsed</Id>
          <Title>Operator 'is'/'Type Of ... Is ...' can be used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>OptionalParameterHierarchyMismatch</Id>
          <Title>Mismatch optional parameter value in overridden method</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>OptionalParameterRefOut</Id>
          <Title>'ref' or 'out' parameter with [Optional] attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>OtherTagsInsideScript1</Id>
          <Title>OtherTagsInsideScript1</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>OtherTagsInsideScript2</Id>
          <Title>OtherTagsInsideScript2</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>OtherTagsInsideUnclosedScript</Id>
          <Title>OtherTagsInsideUnclosedScript</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>OutputTagRequired</Id>
          <Title>Output tag required</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>OverridenWithEmptyValue</Id>
          <Title>Resource overrides base resource with empty value</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>OverridenWithSameValue</Id>
          <Title>Resource is overridden with identical value</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ParameterHidesMember</Id>
          <Title>Parameter hides member</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ParameterTypeCanBeEnumerable.Global</Id>
          <Title>Parameter type can be IEnumerable&lt;T&gt;: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ParameterTypeCanBeEnumerable.Local</Id>
          <Title>Parameter type can be IEnumerable&lt;T&gt;: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Parameter+type+can+be+IEnumerable+of+T</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ParameterValueIsNotUsed</Id>
          <Title>Parameter value is not used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PartialMethodParameterNameMismatch</Id>
          <Title>Parameter name differs in partial method declaration</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PartialMethodWithSinglePart</Id>
          <Title>Redundant 'partial' modifier on method declaration</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PartialTypeWithSinglePart</Id>
          <Title>Redundant 'partial' modifier on type declaration</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PathNotResolved</Id>
          <Title>Cannot resolve file system path</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PolymorphicFieldLikeEventInvocation</Id>
          <Title>Invocation of polymorphic field-like event</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Invocation+of+polymorphic+field-like+event</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PossibleAssignmentToReadonlyField</Id>
          <Title>Assignment to a property of a readonly field can be useless</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Assignment+to+a+property+of+a+readonly+field+can+be+useless</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PossibleInfiniteInheritance</Id>
          <Title>Possible infinite inheritance</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Possible+infinite+inheritance</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PossibleIntendedRethrow</Id>
          <Title>Exception rethrow possibly intended</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleInterfaceMemberAmbiguity</Id>
          <Title>Possible ambiguity while accessing member by interface</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleInvalidCastException</Id>
          <Title>Possible 'System.InvalidCastException'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleInvalidCastExceptionInForeachLoop</Id>
          <Title>Possible 'System.InvalidCastException' in foreach loop</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleInvalidOperationException</Id>
          <Title>Possible 'System.InvalidOperationException'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleLossOfFraction</Id>
          <Title>Possible loss of fraction</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleMistakenArgument</Id>
          <Title>Possible mistaken argument: Possible mistaken argument</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleMistakenCallToGetType.1</Id>
          <Title>Possible mistaken call to GetType(): Possible mistaken call to GetType()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleMistakenCallToGetType.2</Id>
          <Title>Possible mistaken call to GetType(): Possible mistaken call to GetType()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleMultipleEnumeration</Id>
          <Title>Possible multiple enumeration of IEnumerable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Possible+multiple+enumeration+of+IEnumerable</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PossibleMultipleWriteAccessInDoubleCheckLocking</Id>
          <Title>Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Possible+multiple+write+access+in+double-checked+locking</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PossibleNullReferenceException</Id>
          <Title>Possible 'System.NullReferenceException'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleUnintendedReferenceComparison</Id>
          <Title>Possible unintended reference comparison</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossibleWriteToMe</Id>
          <Title>Possible write to 'Me'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossiblyMistakenUseOfParamsMethod</Id>
          <Title>Method with 'params' is invoked while more specific method is available</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PossiblyUnassignedProperty</Id>
          <Title>Use of possibly unassigned property or global variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PrivateFieldCanBeConvertedToLocalVariable</Id>
          <Title>Private field can be converted to local variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PropertyGetterCannotHaveParameters</Id>
          <Title>Property getter cannot have parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PropertyNotResolved</Id>
          <Title>Cannot resolve property</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PropertySetterMustHaveSingleParameter</Id>
          <Title>Property setter must have a single parameter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>PublicConstructorInAbstractClass</Id>
          <Title>Make constructor in abstract class protected</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Make+constructor+in+abstract+class+protected</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PureAttributeOnVoidMethod</Id>
          <Title>'void' method is annotated by [Pure]</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>QualifiedExpressionIsNull</Id>
          <Title>Qualifier is 'null' or 'undefined'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>QualifiedExpressionMaybeNull</Id>
          <Title>Qualifier can be 'null' or 'undefined'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Razor.SectionNotResolved</Id>
          <Title>Unknown Razor section</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReadAccessInDoubleCheckLocking</Id>
          <Title>Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Read+access+in+double+checked+locking</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Redundant</Id>
          <Title>Redundant code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantAnonymousTypePropertyName</Id>
          <Title>Redundant anonymous type property explicit name</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantArgumentDefaultValue</Id>
          <Title>Redundant argument with default value</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantArgumentName</Id>
          <Title>Redundant explicit argument name specification</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantArgumentNameForLiteralExpression</Id>
          <Title>Redundant explicit argument name specification for literal expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantArrayCreationExpression</Id>
          <Title>Array creation can be replaced with array initializer</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantArrayLowerBoundSpecification</Id>
          <Title>Redundant array lower bound specification</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantAssignment</Id>
          <Title>Assignment is not used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantAttributeParentheses</Id>
          <Title>Parentheses are redundant if attribute has no arguments</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantBaseConstructorCall</Id>
          <Title>Redundant base constructor call</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantBaseQualifier</Id>
          <Title>Redundant 'base.' qualifier</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantBoolCompare</Id>
          <Title>Redundant boolean comparison</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantCaseLabel</Id>
          <Title>Redundant 'case' label</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantCast</Id>
          <Title>Redundant cast</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantCast.0</Id>
          <Title>Redundant cast to 'object': Redundant cast to 'object'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantCatchClause</Id>
          <Title>Redundant catch clause</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Catch+clause+is+redundant</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>RedundantCheckBeforeAssignment</Id>
          <Title>Redundant condition check before assignments</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantCollectionInitializerElementBraces</Id>
          <Title>Redundant braces in collection initializer</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantCommaInArrayInitializer</Id>
          <Title>Redundant comma in array initializer</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantComparisonWithNull</Id>
          <Title>Redundant comparison with 'null'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantDefaultFieldInitializer</Id>
          <Title>Redundant field initializer</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Redundant+field+initializer</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>RedundantDelegateCreation</Id>
          <Title>Explicit delegate creation expression is redundant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantEmptyCaseElse</Id>
          <Title>Redundant empty Case Else statement</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantEmptyDefaultSwitchBranch</Id>
          <Title>Redundant empty default switch branch</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantEmptyFinallyBlock</Id>
          <Title>Redundant empty finally block</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantEmptyObjectCreationArgumentList</Id>
          <Title>Redundant empty argument list on object creation expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantEmptyObjectOrCollectionInitializer</Id>
          <Title>Redundant empty object or collection initializer</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantEnumerableCastCall</Id>
          <Title>Redundant 'IEnumerable.Cast&lt;T&gt;' or 'IEnumerable.OfType&lt;T&gt;' call</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantExplicitArrayCreation</Id>
          <Title>Redundant explicit type in array creation</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantExplicitArraySize</Id>
          <Title>Redundant explicit size specification in array creation</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantExplicitNullableCreation</Id>
          <Title>Redundant explicit nullable type creation</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantExtendsListEntry</Id>
          <Title>Redundant class or interface specification in base types list</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantIfElseBlock</Id>
          <Title>Redundant 'else' keyword</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Redundant+'else'+keyword</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>RedundantIteratorKeyword</Id>
          <Title>Iterator function without Yield statements</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantJumpStatement</Id>
          <Title>Redundant control flow jump statement</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantLambdaParameterType</Id>
          <Title>Redundant lambda parameter explicit type specification</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantLambdaSignatureParentheses</Id>
          <Title>Redundant lambda signature parentheses</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantLocalFunctionName</Id>
          <Title>Redundant local function name</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantLogicalConditionalExpressionOperand</Id>
          <Title>Redundant operand in logical conditional expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantMeQualifier</Id>
          <Title>Redundant 'Me.' qualifier</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantMyBaseQualifier</Id>
          <Title>Redundant 'MyBase.' qualifier</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantMyClassQualifier</Id>
          <Title>Redundant 'MyClass.' qualifier</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantNameQualifier</Id>
          <Title>Redundant name qualifier</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantOverload.Global</Id>
          <Title>Redundant method overload: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantOverload.Local</Id>
          <Title>Redundant method overload: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantOverridenMember</Id>
          <Title>Redundant member override</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantParams</Id>
          <Title>'params' modifier is always ignored on overrides</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantQualifier</Id>
          <Title>Redundant qualifier</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantStringFormatCall</Id>
          <Title>Redundant 'string.Format()' call</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantStringToCharArrayCall</Id>
          <Title>Redundant 'string.ToCharArray()' call</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantStringType</Id>
          <Title>Redundant string type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantTernaryExpression</Id>
          <Title>Redundant conditional ternary expression usage</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantThisQualifier</Id>
          <Title>Redundant 'this.' qualifier</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantToStringCall</Id>
          <Title>Redundant 'object.ToString()' call</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantToStringCallForValueType</Id>
          <Title>Redundant 'object.ToString()' call for value types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantTypeArgumentsOfMethod</Id>
          <Title>Redundant type arguments of method</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantUnits</Id>
          <Title>Redundant measure unit</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantUnsafeContext</Id>
          <Title>Unsafe context declaration is redundant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RedundantUsingDirective</Id>
          <Title>Redundant using directive</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Redundant+using+directive</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ReferenceEqualsWithValueType</Id>
          <Title>'Object.ReferenceEquals' is always false because it is called with value type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RemoveConstuctorInvocation</Id>
          <Title>Remove constuctor invocation: Remove constuctor invocation</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RemoveRedundantOrStatement.False</Id>
          <Title>Remove redundant statement: Remove redundant statement</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RemoveRedundantOrStatement.True</Id>
          <Title>Remove redundant statement: Remove redundant statement</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RemoveToList.1</Id>
          <Title>Remove ToList(): Remove ToList()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RemoveToList.2</Id>
          <Title>Remove ToList(): Remove ToList()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithFirstOrDefault.1</Id>
          <Title>Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithFirstOrDefault.2</Id>
          <Title>Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithFirstOrDefault.3</Id>
          <Title>Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithFirstOrDefault.4</Id>
          <Title>Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithLastOrDefault.1</Id>
          <Title>Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithLastOrDefault.2</Id>
          <Title>Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithLastOrDefault.3</Id>
          <Title>Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithLastOrDefault.4</Id>
          <Title>Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.1</Id>
          <Title>Replace with OfType&lt;T&gt;(): Replace with OfType&lt;T&gt;()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.2</Id>
          <Title>Replace with OfType&lt;T&gt;(): Replace with OfType&lt;T&gt;()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.3</Id>
          <Title>Replace with OfType&lt;T&gt;(): Replace with OfType&lt;T&gt;()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.Any.1</Id>
          <Title>Replace with OfType&lt;T&gt;().Any(): Replace with OfType&lt;T&gt;().Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.Any.2</Id>
          <Title>Replace with OfType&lt;T&gt;().Any(): Replace with OfType&lt;T&gt;().Any(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.Count.1</Id>
          <Title>Replace with OfType&lt;T&gt;().Count(): Replace with OfType&lt;T&gt;().Count()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.Count.2</Id>
          <Title>Replace with OfType&lt;T&gt;().Count(): Replace with OfType&lt;T&gt;().Count(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.First.1</Id>
          <Title>Replace with OfType&lt;T&gt;().First(): Replace with OfType&lt;T&gt;().First()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.First.2</Id>
          <Title>Replace with OfType&lt;T&gt;().First(): Replace with OfType&lt;T&gt;().First(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.FirstOrDefault.1</Id>
          <Title>Replace with OfType&lt;T&gt;().FirstOrDefault(): Replace with OfType&lt;T&gt;().FirstOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.FirstOrDefault.2</Id>
          <Title>Replace with OfType&lt;T&gt;().FirstOrDefault(): Replace with OfType&lt;T&gt;().FirstOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.Last.1</Id>
          <Title>Replace with OfType&lt;T&gt;().Last(): Replace with OfType&lt;T&gt;().Last()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.Last.2</Id>
          <Title>Replace with OfType&lt;T&gt;().Last(): Replace with OfType&lt;T&gt;().Last(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.LastOrDefault.1</Id>
          <Title>Replace with OfType&lt;T&gt;().LastOrDefault(): Replace with OfType&lt;T&gt;().LastOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.LastOrDefault.2</Id>
          <Title>Replace with OfType&lt;T&gt;().LastOrDefault(): Replace with OfType&lt;T&gt;().LastOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.LongCount</Id>
          <Title>Replace with OfType&lt;T&gt;().LongCount(): Replace with OfType&lt;T&gt;().LongCount()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.Single.1</Id>
          <Title>Replace with OfType&lt;T&gt;().Single(): Replace with OfType&lt;T&gt;().Single()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.Single.2</Id>
          <Title>Replace with OfType&lt;T&gt;().Single(): Replace with OfType&lt;T&gt;().Single(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.SingleOrDefault.1</Id>
          <Title>Replace with OfType&lt;T&gt;().SingleOrDefault(): Replace with OfType&lt;T&gt;().SingleOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.SingleOrDefault.2</Id>
          <Title>Replace with OfType&lt;T&gt;().SingleOrDefault(): Replace with OfType&lt;T&gt;().SingleOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithOfType.Where</Id>
          <Title>Replace with OfType&lt;T&gt;().Where(): Replace with OfType&lt;T&gt;().Where(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSimpleAssignment.False</Id>
          <Title>Replace with simple assignment: Replace with simple assignment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSimpleAssignment.True</Id>
          <Title>Replace with simple assignment: Replace with simple assignment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleAssignment.False</Id>
          <Title>Replace with single assignment: Replace with single assignment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleAssignment.True</Id>
          <Title>Replace with single assignment: Replace with single assignment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleCallToAny</Id>
          <Title>Replace with single call to Any(..): Replace with single call to Any(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleCallToCount</Id>
          <Title>Replace with single call to Count(..): Replace with single call to Count(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleCallToFirst</Id>
          <Title>Replace with single call to First(..): Replace with single call to First(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleCallToFirstOrDefault</Id>
          <Title>Replace with single call to FirstOrDefault(..): Replace with single call to FirstOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleCallToLast</Id>
          <Title>Replace with single call to Last(..): Replace with single call to Last(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleCallToLastOrDefault</Id>
          <Title>Replace with single call to LastOrDefault(..): Replace with single call to LastOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleCallToSingle</Id>
          <Title>Replace with single call to Single(..): Replace with single call to Single(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleCallToSingleOrDefault</Id>
          <Title>Replace with single call to SingleOrDefault(..): Replace with single call to SingleOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleOrDefault.1</Id>
          <Title>Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleOrDefault.2</Id>
          <Title>Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleOrDefault.3</Id>
          <Title>Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithSingleOrDefault.4</Id>
          <Title>Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReplaceWithStringIsNullOrEmpty</Id>
          <Title>Use 'String.IsNullOrEmpty'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Use+'String.IsNullOrEmpty'</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>RequiredBaseTypesConflict</Id>
          <Title>Required base type conflicting another type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RequiredBaseTypesDirectConflict</Id>
          <Title>Type specified in BaseTypeRequired attribure conflicts another type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RequiredBaseTypesIsNotInherited</Id>
          <Title>Base type is required</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RequiresFallbackColor</Id>
          <Title>Requires fallback color</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ResourceItemNotResolved</Id>
          <Title>Cannot resolve resource item</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ResourceNotResolved</Id>
          <Title>Cannot resolve resource</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ResxNotResolved</Id>
          <Title>Cannot resolve symbol</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReturnFromGlobalScopetWithValue</Id>
          <Title>Return statement with a value in the global scope</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReturnTypeCanBeEnumerable.Global</Id>
          <Title>Return type can be IEnumerable&lt;T&gt;: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReturnTypeCanBeEnumerable.Local</Id>
          <Title>Return type can be IEnumerable&lt;T&gt;: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ReturnValueOfPureMethodIsNotUsed</Id>
          <Title>Return value of pure method is not used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Return+value+of+pure+method+is+not+used</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ScriptTagHasBothSrcAndContentAttributes</Id>
          <Title>ScriptTagHasBothSrcAndContentAttributes</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ScriptTagWithContentBeforeIncludes</Id>
          <Title>ScriptTagWithContentBeforeIncludes</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>SealedMemberInSealedClass</Id>
          <Title>Sealed member in sealed class</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Sealed+member+in+sealed+class</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SimilarAnonymousTypeNearby</Id>
          <Title>Similar anonymous type detected nearby</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>SimplifyConditionalOperator</Id>
          <Title>Simplify conditional operator</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>SimplifyConditionalTernaryExpression</Id>
          <Title>Simplify conditional ternary expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Simplify+conditional+ternary+expression</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SimplifyIIf</Id>
          <Title>Simplify 'IIf'</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>SimplifyLinqExpression</Id>
          <Title>Simplify LINQ expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>SpecifyACultureInStringConversionExplicitly</Id>
          <Title>Specify a culture in string conversion explicitly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Specify+a+culture+in+string+conversion+explicitly</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SpecifyStringComparison</Id>
          <Title>Specify string comparison explicitly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StatementIsNotTerminated</Id>
          <Title>Statement is not terminated with semicolon</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StaticFieldInGenericType</Id>
          <Title>Static field in generic type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StaticFieldInitializersReferesToFieldBelow</Id>
          <Title>Static field initializer refers to static field below or in other part</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringCompareIsCultureSpecific.1</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, string) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringCompareIsCultureSpecific.2</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringCompareIsCultureSpecific.3</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringCompareIsCultureSpecific.4</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, int, string, int) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringCompareIsCultureSpecific.5</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringCompareIsCultureSpecific.6</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringCompareToIsCultureSpecific</Id>
          <Title>String.CompareTo is culture-specific: String.CompareTo is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringEndsWithIsCultureSpecific</Id>
          <Title>String.EndsWith is culture-specific: String.EndsWith(string) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringIndexOfIsCultureSpecific.1</Id>
          <Title>String.IndexOf is culture-specific: String.IndexOf(string) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringIndexOfIsCultureSpecific.2</Id>
          <Title>String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringIndexOfIsCultureSpecific.3</Id>
          <Title>String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringLastIndexOfIsCultureSpecific.1</Id>
          <Title>String.LastIndexOf is culture-specific: String.LastIndexOf(string) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringLastIndexOfIsCultureSpecific.2</Id>
          <Title>String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringLastIndexOfIsCultureSpecific.3</Id>
          <Title>String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StringStartsWithIsCultureSpecific</Id>
          <Title>String.StartsWith is culture-specific: String.StartsWith(string) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>SuggestBaseTypeForParameter</Id>
          <Title>Parameter can be declared with base type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>SuggestUseVarKeywordEverywhere</Id>
          <Title>Use 'var' keyword when possible</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>SuggestUseVarKeywordEvident</Id>
          <Title>Use 'var' keyword when initializer explicitly declares type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/Use+'var'+keyword+when+initializer+explicitly+declares+type</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>SuspiciousTypeConversion.Global</Id>
          <Title>Suspicious type conversion or check</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>SyntaxIsNotAllowed</Id>
          <Title>Syntax is not allowed in specified CSS version</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>TailRecursiveCall</Id>
          <Title>Tail recursive call may be replaced with loop</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>TasksNotLoaded</Id>
          <Title>Unknown tasks assembly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ThisInGlobalContext</Id>
          <Title>Use of 'this' in global context</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ThreadStaticAtInstanceField</Id>
          <Title>[ThreadStatic] doesn't work with instance fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/%27ThreadStaticAttribute%27+usage</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ThreadStaticFieldHasInitializer</Id>
          <Title>Thread static field has initializer</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/%27ThreadStaticAttribute%27+usage</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ThrowMustBeFollowedByExpression</Id>
          <Title>Expression is expected after 'throw' statement</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>TooWideLocalVariableScope</Id>
          <Title>Local variable has too wide declaration scope</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>TryStatementsCanBeMerged</Id>
          <Title>try-catch and try-finally statements can be merged</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>TsDeclarationHides</Id>
          <Title>Declaration hides declaration from outer scope</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>TsNotResolved</Id>
          <Title>TsNotResolved</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>TypeParameterCanBeVariant</Id>
          <Title>Type parameter could be declared as covariant or contravariant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UknownTaskAttribute</Id>
          <Title>Unknown task attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UlTagContainsNonLiElements</Id>
          <Title>UlTagContainsNonLiElements</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnassignedField.Compiler</Id>
          <Title>Unassigned field</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnassignedField.Global</Id>
          <Title>Unassigned field: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnassignedField.Local</Id>
          <Title>Unassigned field: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnassignedReadonlyField</Id>
          <Title>Unassigned readonly field</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnassignedReadonlyField.Compiler</Id>
          <Title>Unassigned readonly field</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnclosedScript</Id>
          <Title>UnclosedScript</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnexpectedValue</Id>
          <Title>Value is unexpected</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnknownCssClass</Id>
          <Title>Unknown CSS class</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnknownCssVendorExtension</Id>
          <Title>Unknown vendor-specific extension</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnknownItemGroup</Id>
          <Title>Unknown item group</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnknownMetadata</Id>
          <Title>Unknown metadata</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnknownOutputParameter</Id>
          <Title>Unknown output parameter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnknownProperty</Id>
          <Title>Unknown property</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnknownTarget</Id>
          <Title>Unknown target</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnknownTask</Id>
          <Title>Unknown task</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnreachableCode</Id>
          <Title>Unreachable code detected</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnsupportedRequiredBaseType</Id>
          <Title>BaseTypeRequired attribute supports only classes and interfaces</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/BaseTypeRequired+attribute+supports+only+classes+and+interfaces</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>UnusedAnonymousMethodSignature</Id>
          <Title>Anonymous method signature is not necessary</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedAutoPropertyAccessor.Global</Id>
          <Title>Auto-implemented property accessor is never used: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedAutoPropertyAccessor.Local</Id>
          <Title>Auto-implemented property accessor is never used: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedField.Compiler</Id>
          <Title>Field is never used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedImportClause</Id>
          <Title>Unused import clause</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedLabel</Id>
          <Title>Unused label</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedLocals</Id>
          <Title>Unused local variable of function</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedMember.Global</Id>
          <Title>Type or type member is never used: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedMember.Local</Id>
          <Title>Type or type member is never used: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedMemberHiearchy.Global</Id>
          <Title>Type member is only used in overrides: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedMemberHiearchy.Local</Id>
          <Title>Type member is only used in overrides: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedMemberInSuper.Global</Id>
          <Title>Type member is never accessed via base type: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedMemberInSuper.Local</Id>
          <Title>Type member is never accessed via base type: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedMethodReturnValue.Global</Id>
          <Title>Method return value is never used: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedMethodReturnValue.Local</Id>
          <Title>Method return value is never used: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedParameter</Id>
          <Title>Unused parameter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedParameter.Global</Id>
          <Title>Unused parameter: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedParameter.Local</Id>
          <Title>Unused parameter: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedProperty</Id>
          <Title>Unused property or function</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedTypeParameter</Id>
          <Title>Unused type parameter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedVariable</Id>
          <Title>Unused local variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UnusedVariable.Compiler</Id>
          <Title>Unused local variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UsageOfDefinitelyUnassignedValue</Id>
          <Title>Usage of unassigned local variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UsageOfPossiblyUnassignedValue</Id>
          <Title>Usage of possibly unassigned local variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseArrayCreationExpression.1</Id>
          <Title>Use array creation expression: Use array creation expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseArrayCreationExpression.2</Id>
          <Title>Use array creation expression: Use array creation expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseIndexedProperty</Id>
          <Title>Use indexed property</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseIsOperator.1</Id>
          <Title>Use 'is' operator: Use 'is' operator</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseIsOperator.2</Id>
          <Title>Use 'is' operator: Use 'is' operator</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseMethodAny.0</Id>
          <Title>Use method Any(): Use method Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseMethodAny.1</Id>
          <Title>Use method Any(): Use method Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseMethodAny.2</Id>
          <Title>Use method Any(): Use method Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseMethodAny.3</Id>
          <Title>Use method Any(): Use method Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseMethodAny.4</Id>
          <Title>Use method Any(): Use method Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseMethodIsInstanceOfType</Id>
          <Title>Use method IsInstanceOfType(..): Use method IsInstanceOfType(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseObjectOrCollectionInitializer</Id>
          <Title>Use object or collection initializer when possible</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UseOfImplicitGlobalInFunctionScope</Id>
          <Title>Use of implicitly declared global variable</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>UsingOfReservedWord</Id>
          <Title>Use of future reserved word</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>ValueParameterNotUsed</Id>
          <Title>'value' parameter is not used</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://confluence.jetbrains.net/display/ReSharper/%27value%27+parameter+is+not+used</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>VBCheckForReferenceEqualityInstead.1</Id>
          <Title>Check for reference equality instead: Check for reference equality instead</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBCheckForReferenceEqualityInstead.2</Id>
          <Title>Check for reference equality instead: Check for reference equality instead</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBPossibleMistakenArgument</Id>
          <Title>Possible mistaken argument: Possible mistaken argument</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBPossibleMistakenCallToGetType.1</Id>
          <Title>Possible mistaken call to GetType(): Possible mistaken call to GetType()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBPossibleMistakenCallToGetType.2</Id>
          <Title>Possible mistaken call to GetType(): Possible mistaken call to GetType()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBRemoveToList.1</Id>
          <Title>Remove ToList(): Remove ToList()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBRemoveToList.2</Id>
          <Title>Remove ToList(): Remove ToList()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithFirstOrDefault</Id>
          <Title>Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithLastOrDefault</Id>
          <Title>Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.1</Id>
          <Title>Replace with OfType&lt;T&gt;(): Replace with OfType(Of ..)()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.2</Id>
          <Title>Replace with OfType&lt;T&gt;(): Replace with OfType(Of ..)()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.Any.1</Id>
          <Title>Replace with OfType&lt;T&gt;().Any(): Replace with OfType(Of ..)().Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.Any.2</Id>
          <Title>Replace with OfType&lt;T&gt;().Any(): Replace with OfType(Of ..)().Any(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.Count.1</Id>
          <Title>Replace with OfType&lt;T&gt;().Count(): Replace with OfType(Of ..)().Count()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.Count.2</Id>
          <Title>Replace with OfType&lt;T&gt;().Count(): Replace with OfType(Of ..)().Count(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.First.1</Id>
          <Title>Replace with OfType&lt;T&gt;().First(): Replace with OfType(Of ..)().First()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.First.2</Id>
          <Title>Replace with OfType&lt;T&gt;().First(): Replace with OfType(Of ..)().First(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.FirstOrDefault.1</Id>
          <Title>Replace with OfType&lt;T&gt;().FirstOrDefault(): Replace with OfType(Of ..)().FirstOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.FirstOrDefault.2</Id>
          <Title>Replace with OfType&lt;T&gt;().FirstOrDefault(): Replace with OfType(Of ..)().FirstOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.Last.1</Id>
          <Title>Replace with OfType&lt;T&gt;().Last(): Replace with OfType(Of ..)().Last()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.Last.2</Id>
          <Title>Replace with OfType&lt;T&gt;().Last(): Replace with OfType(Of ..)().Last(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.LastOrDefault.1</Id>
          <Title>Replace with OfType&lt;T&gt;().LastOrDefault(): Replace with OfType(Of ..)().LastOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.LastOrDefault.2</Id>
          <Title>Replace with OfType&lt;T&gt;().LastOrDefault(): Replace with OfType(Of ..)().LastOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.Single.1</Id>
          <Title>Replace with OfType&lt;T&gt;().Single(): Replace with OfType(Of ..)().Single()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.Single.2</Id>
          <Title>Replace with OfType&lt;T&gt;().Single(): Replace with OfType(Of ..)().Single(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.SingleOrDefault.1</Id>
          <Title>Replace with OfType&lt;T&gt;().SingleOrDefault(): Replace with OfType(Of ..)().SingleOrDefault()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.SingleOrDefault.2</Id>
          <Title>Replace with OfType&lt;T&gt;().SingleOrDefault(): Replace with OfType(Of ..)().SingleOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithOfType.Where</Id>
          <Title>Replace with OfType&lt;T&gt;().Where(): Replace with OfType(Of ..)().Where(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleAssignment.1</Id>
          <Title>Replace with single assignment: Replace with single assignment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleAssignment.2</Id>
          <Title>Replace with single assignment: Replace with single assignment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleCallToAny</Id>
          <Title>Replace with single call to Any(..): Replace with single call to Any(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleCallToCount</Id>
          <Title>Replace with single call to Count(..): Replace with single call to Count(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleCallToFirst</Id>
          <Title>Replace with single call to First(..): Replace with single call to First(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleCallToFirstOrDefault</Id>
          <Title>Replace with single call to FirstOrDefault(..): Replace with single call to FirstOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleCallToLast</Id>
          <Title>Replace with single call to Last(..): Replace with single call to Last(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleCallToLastOrDefault</Id>
          <Title>Replace with single call to LastOrDefault(..): Replace with single call to LastOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleCallToSingle</Id>
          <Title>Replace with single call to Single(..): Replace with single call to Single(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleCallToSingleOrDefault</Id>
          <Title>Replace with single call to SingleOrDefault(..): Replace with single call to SingleOrDefault(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBReplaceWithSingleOrDefault</Id>
          <Title>Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBSimplifyLinqExpression.1</Id>
          <Title>Simplify expression: Simplify expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBSimplifyLinqExpression.10</Id>
          <Title>Simplify expression: Simplify expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBSimplifyLinqExpression.2</Id>
          <Title>Simplify expression: Simplify expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBSimplifyLinqExpression.3</Id>
          <Title>Simplify expression: Simplify expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBSimplifyLinqExpression.4</Id>
          <Title>Simplify expression: Simplify expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBSimplifyLinqExpression.5</Id>
          <Title>Simplify expression: Simplify expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBSimplifyLinqExpression.6</Id>
          <Title>Simplify expression: Simplify expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBSimplifyLinqExpression.7</Id>
          <Title>Simplify expression: Simplify expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBSimplifyLinqExpression.8</Id>
          <Title>Simplify expression: Simplify expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBSimplifyLinqExpression.9</Id>
          <Title>Simplify expression: Simplify expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringCompareIsCultureSpecific.1</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, string) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringCompareIsCultureSpecific.2</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringCompareIsCultureSpecific.3</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringCompareIsCultureSpecific.4</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, int, string, int) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringCompareIsCultureSpecific.5</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringCompareIsCultureSpecific.6</Id>
          <Title>String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringCompareToIsCultureSpecific</Id>
          <Title>String.CompareTo is culture-specific: String.CompareTo is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringEndsWithIsCultureSpecific</Id>
          <Title>String.EndsWith is culture-specific: String.EndsWith(string) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringIndexOfIsCultureSpecific.1</Id>
          <Title>String.IndexOf is culture-specific: String.IndexOf(string) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringIndexOfIsCultureSpecific.2</Id>
          <Title>String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringIndexOfIsCultureSpecific.3</Id>
          <Title>String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringLastIndexOfIsCultureSpecific.1</Id>
          <Title>String.LastIndexOf is culture-specific: String.LastIndexOf(string) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringLastIndexOfIsCultureSpecific.2</Id>
          <Title>String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringLastIndexOfIsCultureSpecific.3</Id>
          <Title>String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBStringStartsWithIsCultureSpecific</Id>
          <Title>String.StartsWith is culture-specific: String.StartsWith(string) is culture-specific</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VbUnreachableCode</Id>
          <Title>Unreachable code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseArrayCreationExpression.1</Id>
          <Title>Use array creation expression: Use array creation expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseArrayCreationExpression.2</Id>
          <Title>Use array creation expression: Use array creation expression</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseFirstInstead</Id>
          <Title>Use First() instead: Use First() instead</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseMethodAny.1</Id>
          <Title>Use method Any(): Use method Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseMethodAny.2</Id>
          <Title>Use method Any(): Use method Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseMethodAny.3</Id>
          <Title>Use method Any(): Use method Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseMethodAny.4</Id>
          <Title>Use method Any(): Use method Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseMethodAny.5</Id>
          <Title>Use method Any(): Use method Any()</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseMethodIsInstanceOfType</Id>
          <Title>Use method IsInstanceOfType(..): Use method IsInstanceOfType(..)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseTypeOfIsOperator.1</Id>
          <Title>Use 'TypeOf .. Is ..' operator: Use 'TypeOf .. Is ..' operator</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBUseTypeOfIsOperator.2</Id>
          <Title>Use 'TypeOf .. Is ..' operator: Use 'TypeOf .. Is ..' operator</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC40000</Id>
          <Title>BC40000:Use obsolete member</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC400005</Id>
          <Title> BC400005:Member shadows an overriable member</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC40008</Id>
          <Title>BC40008:Use obsolete member (without message)</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC40056</Id>
          <Title>BC40056:Namespace or type specified in the Imports 'name' doesn't contain any public member or cannot be found</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42016</Id>
          <Title>BC42016:Runtime errors might occur when converting X to Y</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42025</Id>
          <Title>BC42025:Access of shared member through an instance</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42104</Id>
          <Title>BC42104:Variable is used before it has been assigned a value</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42105</Id>
          <Title>BC42105,BC42106,BC42107:Function doesn't return a value on all code paths</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42304</Id>
          <Title>BC42304:Syntax error in XML comment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42309</Id>
          <Title>BC42309:XML comment has a tag with a 'cref' attribute that could not be resolved</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42322</Id>
          <Title>BC42322:Runtime errors might occur when converting X to Y</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42349</Id>
          <Title>BC42349:Redundant DirectCast to the equals value type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42353</Id>
          <Title>BC42353,BC42354,BC42355:Function doesn't return a value on all code paths</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42356</Id>
          <Title> BC42356:Async method lacks 'Await' operators</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::BC42358</Id>
          <Title> BC42358: Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'Await' operator to
      the result of the call.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBWarnings::WME006</Id>
          <Title>WME006:Namespace should be default namespace of this project</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VirtualMemberNeverOverriden.Global</Id>
          <Title>Virtual(overridable) member is never overridden: Non-private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VirtualMemberNeverOverriden.Local</Id>
          <Title>Virtual(overridable) member is never overridden: Private accessibility</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WebConfig.ModuleQualificationResolve</Id>
          <Title>Module qualification required</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WebConfig.WebConfigPathWarning</Id>
          <Title>Referenced path cannot be found in the website</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Web.IgnoredPath</Id>
          <Title>Ignored path</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Web.MappedPath</Id>
          <Title>Mapped path</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WebConfig.RedundantAddNamespaceTag</Id>
          <Title>Redundant add namespace element</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WebConfig.RedundantLocationTag</Id>
          <Title>Redundant location element</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WebConfig.TagPrefixRedundant</Id>
          <Title>Redundant tagPrefix declaration</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WebConfig.UnusedAddTag</Id>
          <Title>Redundant add element</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WebConfig.UnusedElementDueToConfigSourceAttribute</Id>
          <Title>Redundant element or attribute because of 'configSource' attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WebConfig.UnusedRemoveOrClearTag</Id>
          <Title>Redundant remove or clear element</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WrongExpressionStatement</Id>
          <Title>Suspicious expression statement</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WrongMetadataUse</Id>
          <Title>Wrong metadata use</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.BindingWithContextNotResolved</Id>
          <Title>Unresolved binding path when DataContext is known</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.BindingWithoutContextNotResolved</Id>
          <Title>Unresolved binding path when DataContext is unknown</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.ConstructorWarning</Id>
          <Title>Constructor not resolved</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.DependencyPropertyResolveError</Id>
          <Title>Dependency property descriptor field missing</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.DuplicateStyleSetter</Id>
          <Title>Duplicate style property/event setter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.DynamicResourceError</Id>
          <Title>{DynamicResource} can only be used with dependency property</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.ElementNameReferenceNotResolved</Id>
          <Title>Element name reference not resolved</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.IgnoredPathHighlighting</Id>
          <Title>Ignored path</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.IndexOutOfGridDefinition</Id>
          <Title>Grid element column/row index is out of grid definition range</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.InvalidMemberType</Id>
          <Title>Xaml.InvalidMemberType</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.InvalidResourceTargetType</Id>
          <Title>Xaml.InvalidResourceTargetType</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.InvalidResourceType</Id>
          <Title>Xaml.InvalidResourceType</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.InvalidType</Id>
          <Title>Xaml.InvalidType</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.LanguageLevel</Id>
          <Title>XAML language level error</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.MappedPathHighlighting</Id>
          <Title>Mapped path</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.MissingGridIndex</Id>
          <Title>Missing grid column/row setter for non-first child</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.PathError</Id>
          <Title>Path error</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantAttachedProperty</Id>
          <Title>Remove redundant attached property setter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantCollectionProperty</Id>
          <Title>Redundant empty collection property setter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantFreezeAttribute</Id>
          <Title>Redundant 'Freeze' attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantGridDefinitions</Id>
          <Title>Single grid row/column definition is redundant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantGridSpan</Id>
          <Title>Single-cell grid column/row span is redundant</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantModifiersAttribute</Id>
          <Title>Redundant modifiers attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantNameAttribute</Id>
          <Title>Redundant name attribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantNamespaceAlias</Id>
          <Title>Redundant namespace alias</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantPropertyTypeQualifier</Id>
          <Title>Redundant property type qualifier</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantResource</Id>
          <Title>Redundant resource</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RedundantStyledValue</Id>
          <Title>Property value is equal to style-provided</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.RoutedEventResolveError</Id>
          <Title>Routed event descriptor field missing</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.StaticResourceNotResolved</Id>
          <Title>Static resource not resolved</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.StyleInvalidTargetType</Id>
          <Title>Style target type is not convertible to base type</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.XamlRelativeSourceDefaultModeWarningHighlighting</Id>
          <Title>RelativeSourceMode is not set explicitly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>Xaml.XKeyAttributeDisallowed</Id>
          <Title>x:Key is allowed for resources and dictionary elements only</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>XmlDocCommentSyntaxProblem</Id>
          <Title>Illegal syntax in XML code comment</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>AsxxErrors</Id>
          <Title>Asxx Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>HtmlErrors</Id>
          <Title>HTML Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CssErrors</Id>
          <Title>Css Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>StructuralSearch</Id>
          <Title>Structural Search Warnings</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>WebConfigErrors</Id>
          <Title>WebConfig Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>XAMLErrors</Id>
          <Title>XAML Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>VBErrors</Id>
          <Title>VB Compiler Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>XMLWarnings</Id>
          <Title>XML Warnings</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CodeSmell</Id>
          <Title>CodeSmell</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>BuildScriptErrors</Id>
          <Title>Build Scripts Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>AspErrors</Id>
          <Title>ASP Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RazorErrors</Id>
          <Title>Razor Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>TypeScriptErrors</Id>
          <Title>TypeScript Compiler Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>CSharpErrors</Id>
          <Title>C# Compiler Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>JScriptErrors</Id>
          <Title>JavaScript Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>RazorWarnings</Id>
          <Title>Razor Warnings</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
        <Rule>
          <Id>XMLErrors</Id>
          <Title>XML Errors</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
        </Rule>
      </Rules>
    </RuleCollection>
    <RuleCollection>
      <Name>NDepend</Name>
      <Rules>
        <Rule>
          <Id>Typesthatcouldhavealowervisibility</Id>
          <Title>Types that could have a lower visibility</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_that_could_have_a_lower_visibility.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>TypesshouldnotextendSystem.Xml.XmlDocument</Id>
          <Title>Types should not extend System.Xml.XmlDocument</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_should_not_extend_System.Xml.XmlDocument.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>NativeMethodsclassshouldbestaticandinternal</Id>
          <Title>NativeMethods class should be static and internal</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_NativeMethods_class_should_be_static_and_internal.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>TypesimmutableshouldbetaggedwithImmutableAttribute</Id>
          <Title>Types immutable should be tagged with ImmutableAttribute</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_immutable_should_be_tagged_with_ImmutableAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>EnumStorageshouldbeInt32</Id>
          <Title>Enum Storage should be Int32</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Enum_Storage_should_be_Int32.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidprefixingtypenamewithparentnamespacename</Id>
          <Title>Avoid prefixing type name with parent namespace name</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_prefixing_type_name_with_parent_namespace_name.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Types100%coveredshouldbetaggedwithFullCoveredAttribute</Id>
          <Title>Types 100% covered should be tagged with FullCoveredAttribute</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_100%_covered_should_be_tagged_with_FullCoveredAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AvoidtheSingletonpattern</Id>
          <Title>Avoid the Singleton pattern</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_the_Singleton_pattern.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Codeshouldbetested</Id>
          <Title>Code should be tested</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Code_should_be_tested.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidnamespaceswithfewtypes</Id>
          <Title>Avoid namespaces with few types</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_namespaces_with_few_types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Donothidebaseclassmethods</Id>
          <Title>Do not hide base class methods</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Do_not_hide_base_class_methods.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Donotraisereservedexceptiontypes</Id>
          <Title>Do not raise reserved exception types</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Do_not_raise_reserved_exception_types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AvoidchangingenumerationsFlagsstatus</Id>
          <Title>Avoid changing enumerations Flags status</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_changing_enumerations_Flags_status.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Publicmethodsreturningareferenceneedsacontracttoensurethatanon-nullreferenceisreturned</Id>
          <Title>Public methods returning a reference needs a contract to ensure that a non-null reference is returned</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Public_methods_returning_a_reference_needs_a_contract_to_ensure_that_a_non-null_reference_is_returned.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>APIBreakingChanges:Types</Id>
          <Title>API Breaking Changes: Types</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_API_Breaking_Changes:_Types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Don&amp;apos;tassignstaticfieldsfrominstancemethods</Id>
          <Title>Don't assign static fields from instance methods</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Don't_assign_static_fields_from_instance_methods.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Abstractbaseclassshouldbesuffixedwith&amp;apos;Base&amp;apos;</Id>
          <Title>Abstract base class should be suffixed with 'Base'</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Abstract_base_class_should_be_suffixed_with_'Base'.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidtransforminganimmutabletypeintoamutableone</Id>
          <Title>Avoid transforming an immutable type into a mutable one</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_transforming_an_immutable_type_into_a_mutable_one.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Assembliesshouldhavethesameversion</Id>
          <Title>Assemblies should have the same version</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Assemblies_should_have_the_same_version.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AvoidreferencingsourcefileoutofVisualStudioprojectdirectory</Id>
          <Title>Avoid referencing source file out of Visual Studio project directory</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_referencing_source_file_out_of_Visual_Studio_project_directory.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Exceptionclassnameshouldbesuffixedwith&amp;apos;Exception&amp;apos;</Id>
          <Title>Exception class name should be suffixed with 'Exception'</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Exception_class_name_should_be_suffixed_with_'Exception'.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>ReaderWriterLockAcquireLock/ReleaseLockmustbebothcalledwithinthesamemethod</Id>
          <Title>ReaderWriterLock AcquireLock/ReleaseLock must be both called within the same method</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_ReaderWriterLock_AcquireLock/ReleaseLock_must_be_both_called_within_the_same_method.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Brokenserializabletypes</Id>
          <Title>Broken serializable types</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Broken_serializable_types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidtypesinitializationcycles</Id>
          <Title>Avoid types initialization cycles</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_types_initialization_cycles.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidmakingcomplexmethodsevenmorecomplex</Id>
          <Title>Avoid making complex methods even more complex</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_making_complex_methods_even_more_complex.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Afieldmustnotbeassignedfromoutsideitsparenthierarchytypes</Id>
          <Title>A field must not be assigned from outside its parent hierarchy types</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_A_field_must_not_be_assigned_from_outside_its_parent_hierarchy_types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidnon-readonlystaticfields</Id>
          <Title>Avoid non-readonly static fields</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_non-readonly_static_fields.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Eventhandlermethodsshouldbedeclaredprivate</Id>
          <Title>Event handler methods should be declared private</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Event_handler_methods_should_be_declared_private.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Namespaceswithpoorcohesion(RelationalCohesion)</Id>
          <Title>Namespaces with poor cohesion (RelationalCohesion)</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Namespaces_with_poor_cohesion_(RelationalCohesion).html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MethodsshouldhavealowC.R.A.Pscore</Id>
          <Title>Methods should have a low C.R.A.P score</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Methods_should_have_a_low_C.R.A.P_score.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Instancefieldsnamingconvention</Id>
          <Title>Instance fields naming convention</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Instance_fields_naming_convention.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoiddefiningmultipletypesinasourcefile</Id>
          <Title>Avoid defining multiple types in a source file</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_defining_multiple_types_in_a_source_file.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>APIBreakingChanges:Fields</Id>
          <Title>API Breaking Changes: Fields</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_API_Breaking_Changes:_Fields.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Overrideequalsandoperatorequalsonvaluetypes</Id>
          <Title>Override equals and operator equals on value types</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Override_equals_and_operator_equals_on_value_types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Don&amp;apos;tcallyourmethodDispose</Id>
          <Title>Don't call your method Dispose</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Don't_call_your_method_Dispose.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MethodstaggedwithPureAttributemustbepure</Id>
          <Title>Methods tagged with PureAttribute must be pure</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Methods_tagged_with_PureAttribute_must_be_pure.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Methodsrefactoredshouldbetested</Id>
          <Title>Methods refactored should be tested</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Methods_refactored_should_be_tested.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidnamingtypesandnamespaceswiththesameidentifier</Id>
          <Title>Avoid naming types and namespaces with the same identifier</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_naming_types_and_namespaces_with_the_same_identifier.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Don&amp;apos;tuseobsoletetypesmethodsorfields</Id>
          <Title>Don't use obsolete types, methods or fields</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Don't_use_obsolete_types,_methods_or_fields.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidaddingmethodstoatypethatalreadyhadmanymethods</Id>
          <Title>Avoid adding methods to a type that already had many methods</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_adding_methods_to_a_type_that_already_had_many_methods.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MethodshouldnotreturnconcreteXmlNode</Id>
          <Title>Method should not return concrete XmlNode</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Method_should_not_return_concrete_XmlNode.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Classshouldn&amp;apos;tbetoodeepininheritancetree</Id>
          <Title>Class shouldn't be too deep in inheritance tree</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Class_shouldn't_be_too_deep_in_inheritance_tree.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>P/Invokesshouldbestaticandnotbepubliclyvisible</Id>
          <Title>P/Invokes should be static and not be publicly visible</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_P/Invokes_should_be_static_and_not_be_publicly_visible.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MarkISerializabletypeswithSerializableAttribute</Id>
          <Title>Mark ISerializable types with SerializableAttribute</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Mark_ISerializable_types_with_SerializableAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PotentiallydeadMethods</Id>
          <Title>Potentially dead Methods</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Potentially_dead_Methods.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>TypestaggedwithFullCoveredAttributeshouldbe100%covered</Id>
          <Title>Types tagged with FullCoveredAttribute should be 100% covered</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_tagged_with_FullCoveredAttribute_should_be_100%_covered.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Methodsthatcreatedisposableobject(s)andthatdon&amp;apos;tcallDispose()</Id>
          <Title>Methods that create disposable object(s) and that don't call Dispose()</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Methods_that_create_disposable_object(s)_and_that_don't_call_Dispose().html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Namespacesalmost100%testedshouldbe100%tested</Id>
          <Title>Namespaces almost 100% tested should be 100% tested</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Namespaces_almost_100%_tested_should_be_100%_tested.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidtypeswithtoomanyfields</Id>
          <Title>Avoid types with too many fields</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_types_with_too_many_fields.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Typesdeclaredinthesamenamespaceshouldhavetheirsourcefilesstoredinthesamedirectory</Id>
          <Title>Types declared in the same namespace, should have their source files stored in the same directory</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_declared_in_the_same_namespace,_should_have_their_source_files_stored_in_the_same_directory.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Donotdeclarereadonlymutablereferencetypes</Id>
          <Title>Do not declare read only mutable reference types</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Do_not_declare_read_only_mutable_reference_types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Donotnameenumvalues&amp;apos;Reserved&amp;apos;</Id>
          <Title>Do not name enum values 'Reserved'</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Do_not_name_enum_values_'Reserved'.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidmakinglargemethodsevenlarger</Id>
          <Title>Avoid making large methods even larger</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_making_large_methods_even_larger.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Arrayfieldsshouldnotbereadonly</Id>
          <Title>Array fields should not be read only</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Array_fields_should_not_be_read_only.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>TypestaggedwithImmutableAttributemustbeimmutable</Id>
          <Title>Types tagged with ImmutableAttribute must be immutable</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_tagged_with_ImmutableAttribute_must_be_immutable.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AvoidpartitioningthecodebasethroughmanysmalllibraryAssemblies</Id>
          <Title>Avoid partitioning the code base through many small library Assemblies</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_partitioning_the_code_base_through_many_small_library_Assemblies.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Donotraisetoogeneralexceptiontypes</Id>
          <Title>Do not raise too general exception types</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Do_not_raise_too_general_exception_types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Typeswithsourcefilesstoredinthesamedirectoryshouldbedeclaredinthesamenamespace</Id>
          <Title>Types with source files stored in the same directory, should be declared in the same namespace</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_with_source_files_stored_in_the_same_directory,_should_be_declared_in_the_same_namespace.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MarkassemblieswithCLSCompliant</Id>
          <Title>Mark assemblies with CLSCompliant</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Mark_assemblies_with_CLSCompliant.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Fieldsshouldbedeclaredasprivate</Id>
          <Title>Fields should be declared as private</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Fields_should_be_declared_as_private.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Don&amp;apos;ttaginstancefieldswithThreadStaticAttribute</Id>
          <Title>Don't tag instance fields with ThreadStaticAttribute</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Don't_tag_instance_fields_with_ThreadStaticAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CautionwithList.Contains()</Id>
          <Title>Caution with List.Contains()</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Caution_with_List.Contains().html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MethodsnameshouldbeginwithanUppercharacter</Id>
          <Title>Methods name should begin with an Upper character</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Methods_name_should_begin_with_an_Upper_character.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>APIBreakingChanges:Methods</Id>
          <Title>API Breaking Changes: Methods</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_API_Breaking_Changes:_Methods.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Classwithnodescendantshouldbesealedifpossible</Id>
          <Title>Class with no descendant should be sealed if possible</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Class_with_no_descendant_should_be_sealed_if_possible.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Attributeclassnameshouldbesuffixedwith&amp;apos;Attribute&amp;apos;</Id>
          <Title>Attribute class name should be suffixed with 'Attribute'</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Attribute_class_name_should_be_suffixed_with_'Attribute'.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidpublicmethodsnotpubliclyvisible</Id>
          <Title>Avoid public methods not publicly visible</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_public_methods_not_publicly_visible.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Interfacenameshouldbeginwitha&amp;apos;I&amp;apos;</Id>
          <Title>Interface name should begin with a 'I'</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Interface_name_should_begin_with_a_'I'.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidinterfacestoobig</Id>
          <Title>Avoid interfaces too big</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_interfaces_too_big.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Don&amp;apos;tuse.NET1.xHashTableandArrayList</Id>
          <Title>Don't use .NET 1.x HashTable and ArrayList</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Don't_use_.NET_1.x_HashTable_and_ArrayList.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MarkattributeswithAttributeUsageAttribute</Id>
          <Title>Mark attributes with AttributeUsageAttribute</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Mark_attributes_with_AttributeUsageAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Useintegralorstringargumentforindexers</Id>
          <Title>Use integral or string argument for indexers</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Use_integral_or_string_argument_for_indexers.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Typesthatcouldbedeclaredasprivatenestedinaparenttype</Id>
          <Title>Types that could be declared as private, nested in a parent type</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_that_could_be_declared_as_private,_nested_in_a_parent_type.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Baseclassshouldnotusederivatives</Id>
          <Title>Base class should not use derivatives</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Base_class_should_not_use_derivatives.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Fromnowalltypesaddedshouldbe100%coveredbytests</Id>
          <Title>From now, all types added should be 100% covered by tests</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_From_now,_all_types_added_should_be_100%_covered_by_tests.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Assembliesthatdon&amp;apos;tsatisfytheAbstractness/Instabilityprinciple</Id>
          <Title>Assemblies that don't satisfy the Abstractness/Instability principle</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Assemblies_that_don't_satisfy_the_Abstractness/Instability_principle.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>TypesshouldnotextendSystem.ApplicationException</Id>
          <Title>Types should not extend System.ApplicationException</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_should_not_extend_System.ApplicationException.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Methodsthatcouldhavealowervisibility</Id>
          <Title>Methods that could have a lower visibility</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Methods_that_could_have_a_lower_visibility.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidmethodspotentiallypoorlycommented</Id>
          <Title>Avoid methods potentially poorly commented</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_methods_potentially_poorly_commented.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidhavingdifferenttypeswithsamename</Id>
          <Title>Avoid having different types with same name</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_having_different_types_with_same_name.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PotentiallydeadTypes</Id>
          <Title>Potentially dead Types</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Potentially_dead_Types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Emptystaticconstructorcanbediscarded</Id>
          <Title>Empty static constructor can be discarded</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Empty_static_constructor_can_be_discarded.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidstaticfieldswithamutablefieldtype</Id>
          <Title>Avoid static fields with a mutable field type</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_static_fields_with_a_mutable_field_type.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidmethodswithtoomanyparameters</Id>
          <Title>Avoid methods with too many parameters</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_methods_with_too_many_parameters.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidtypeswithnametoolong</Id>
          <Title>Avoid types with name too long</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_types_with_name_too_long.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>UIlayershouldn&amp;apos;tusedirectlyDALlayer</Id>
          <Title>UI layer shouldn't use directly DAL layer</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_UI_layer_shouldn't_use_directly_DAL_layer.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Methodsprefixedwith&amp;apos;Try&amp;apos;shouldreturnaboolean</Id>
          <Title>Methods prefixed with 'Try' should return a boolean</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Methods_prefixed_with_'Try'_should_return_a_boolean.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>AssembliesNamespacesandTypesshouldbetested</Id>
          <Title>Assemblies Namespaces and Types should be tested</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Assemblies_Namespaces_and_Types_should_be_tested.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Boxing/unboxingshouldbeavoided</Id>
          <Title>Boxing/unboxing should be avoided</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Boxing/unboxing_should_be_avoided.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidmethodswithtoomanyoverloads</Id>
          <Title>Avoid methods with too many overloads</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_methods_with_too_many_overloads.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>OverridesofMethod()shouldcallbase.Method()</Id>
          <Title>Overrides of Method() should call base.Method()</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Overrides_of_Method()_should_call_base.Method().html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Don&amp;apos;tusedangerousthreadingmethods</Id>
          <Title>Don't use dangerous threading methods</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Don't_use_dangerous_threading_methods.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Don&amp;apos;tcreatethreadsexplicitly</Id>
          <Title>Don't create threads explicitly</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Don't_create_threads_explicitly.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Declaretypesinnamespaces</Id>
          <Title>Declare types in namespaces</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Declare_types_in_namespaces.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Don&amp;apos;tassignafieldfrommanymethods</Id>
          <Title>Don't assign a field from many methods</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Don't_assign_a_field_from_many_methods.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>NewMethodsshouldbetested</Id>
          <Title>New Methods should be tested</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_New_Methods_should_be_tested.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Classesthatarecandidatetobeturnedintostructures</Id>
          <Title>Classes that are candidate to be turned into structures</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Classes_that_are_candidate_to_be_turned_into_structures.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Structuresshouldbeimmutable</Id>
          <Title>Structures should be immutable</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Structures_should_be_immutable.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>FieldsshouldbemarkedasReadOnlywhenpossible</Id>
          <Title>Fields should be marked as ReadOnly when possible</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Fields_should_be_marked_as_ReadOnly_when_possible.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>APIBreakingChanges:InterfacesandAbstractClasses</Id>
          <Title>API Breaking Changes: Interfaces and Abstract Classes</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_API_Breaking_Changes:_Interfaces_and_Abstract_Classes.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Preferreturncollectionabstractioninsteadofimplementation</Id>
          <Title>Prefer return collection abstraction instead of implementation</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Prefer_return_collection_abstraction_instead_of_implementation.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>TypesnameshouldbeginwithanUppercharacter</Id>
          <Title>Types name should begin with an Upper character</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_name_should_begin_with_an_Upper_character.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidemptyinterfaces</Id>
          <Title>Avoid empty interfaces</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_empty_interfaces.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidpubliclyvisibleconstantfields</Id>
          <Title>Avoid publicly visible constant fields</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_publicly_visible_constant_fields.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Disposabletypeswithunmanagedresourcesshoulddeclarefinalizer</Id>
          <Title>Disposable types with unmanaged resources should declare finalizer</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Disposable_types_with_unmanaged_resources_should_declare_finalizer.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MonitorTryEnter/Exitmustbebothcalledwithinthesamemethod</Id>
          <Title>Monitor TryEnter/Exit must be both called within the same method</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Monitor_TryEnter/Exit_must_be_both_called_within_the_same_method.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MarkassemblieswithComVisible</Id>
          <Title>Mark assemblies with ComVisible</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Mark_assemblies_with_ComVisible.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PuremethodsshouldbetaggedwithPureAttribute</Id>
          <Title>Pure methods should be tagged with PureAttribute</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Pure_methods_should_be_tagged_with_PureAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PropertyGettersshouldbeimmutable</Id>
          <Title>Property Getters should be immutable</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Property_Getters_should_be_immutable.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidnamespacesdependencycycles</Id>
          <Title>Avoid namespaces dependency cycles</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_namespaces_dependency_cycles.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Typesthatusedtobe100%coveredbytestsshouldstillbe100%covered</Id>
          <Title>Types that used to be 100% covered by tests should still be 100% covered</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_that_used_to_be_100%_covered_by_tests_should_still_be_100%_covered.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidaddinginstancefieldstoatypethatalreadyhadmanyinstancefields</Id>
          <Title>Avoid adding instance fields to a type that already had many instance fields</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_adding_instance_fields_to_a_type_that_already_had_many_instance_fields.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Markassemblieswithassemblyversion</Id>
          <Title>Mark assemblies with assembly version</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Mark_assemblies_with_assembly_version.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidmethodswithnametoolong</Id>
          <Title>Avoid methods with name too long</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_methods_with_name_too_long.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Instancessizeshouldn&amp;apos;tbetoobig</Id>
          <Title>Instances size shouldn't be too big</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Instances_size_shouldn't_be_too_big.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Typesalmost100%testedshouldbe100%tested</Id>
          <Title>Types almost 100% tested should be 100% tested</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_almost_100%_tested_should_be_100%_tested.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidmethodswithtoomanylocalvariables</Id>
          <Title>Avoid methods with too many local variables</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_methods_with_too_many_local_variables.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>FloatandDateParsingmustbecultureaware</Id>
          <Title>Float and Date Parsing must be culture aware</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Float_and_Date_Parsing_must_be_culture_aware.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>UrifieldsshouldbeoftypeSystem.Uri</Id>
          <Title>Uri fields should be of type System.Uri</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Uri_fields_should_be_of_type_System.Uri.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Staticfieldsnamingconvention</Id>
          <Title>Static fields naming convention</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Static_fields_naming_convention.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Constructorsofabstractclassesshouldbedeclaredasprotectedorprivate</Id>
          <Title>Constructors of abstract classes should be declared as protected or private</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Constructors_of_abstract_classes_should_be_declared_as_protected_or_private.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Fromnowallmethodsaddedshouldrespectbasicqualityprinciples</Id>
          <Title>From now, all methods added should respect basic quality principles</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_From_now,_all_methods_added_should_respect_basic_quality_principles.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>WrongusageofCannotDecreaseVisibilityAttribute</Id>
          <Title>Wrong usage of CannotDecreaseVisibilityAttribute</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Wrong_usage_of_CannotDecreaseVisibilityAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Attributeclassesshouldbesealed</Id>
          <Title>Attribute classes should be sealed</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Attribute_classes_should_be_sealed.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Astatelessclassorstructuremightbeturnedintoastatictype</Id>
          <Title>A stateless class or structure might be turned into a static type</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_A_stateless_class_or_structure_might_be_turned_into_a_static_type.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Collectionpropertiesshouldbereadonly</Id>
          <Title>Collection properties should be read only</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Collection_properties_should_be_read_only.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>DoimplementmethodsthatthrowNotImplementedException</Id>
          <Title>Do implement methods that throw NotImplementedException</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Do_implement_methods_that_throw_NotImplementedException.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Constructorshouldnotcallavirtualmethod</Id>
          <Title>Constructor should not call a virtual method</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Constructor_should_not_call_a_virtual_method.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidduplicatingatypedefinitionacrossassemblies</Id>
          <Title>Avoid duplicating a type definition across assemblies</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_duplicating_a_type_definition_across_assemblies.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidtypestoobig</Id>
          <Title>Avoid types too big</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_types_too_big.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>RemovecallstoGC.Collect()</Id>
          <Title>Remove calls to GC.Collect()</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Remove_calls_to_GC.Collect().html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Methodsshouldbedeclaredstaticifpossible</Id>
          <Title>Methods should be declared static if possible</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Methods_should_be_declared_static_if_possible.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoiddecreasingcodecoveragebytestsoftypes</Id>
          <Title>Avoid decreasing code coverage by tests of types</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_decreasing_code_coverage_by_tests_of_types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidnamespacesmutuallydependent</Id>
          <Title>Avoid namespaces mutually dependent</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_namespaces_mutually_dependent.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Don&amp;apos;tcallGC.Collect()withoutcallingGC.WaitForPendingFinalizers()</Id>
          <Title>Don't call GC.Collect() without calling GC.WaitForPendingFinalizers()</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Don't_call_GC.Collect()_without_calling_GC.WaitForPendingFinalizers().html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidcustomdelegates</Id>
          <Title>Avoid custom delegates</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_custom_delegates.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Fromnowalltypesaddedshouldrespectbasicqualityprinciples</Id>
          <Title>From now, all types added should respect basic quality principles</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_From_now,_all_types_added_should_respect_basic_quality_principles.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Namespacenameshouldcorrespondtofilelocation</Id>
          <Title>Namespace name should correspond to file location</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Namespace_name_should_correspond_to_file_location.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Nestedtypesshouldnotbevisible</Id>
          <Title>Nested types should not be visible</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Nested_types_should_not_be_visible.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Fieldsthatcouldhavealowervisibility</Id>
          <Title>Fields that could have a lower visibility</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Fields_that_could_have_a_lower_visibility.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidmethodstoobigtoocomplex</Id>
          <Title>Avoid methods too big, too complex</Title>
          <CustomTags />
          <DefaultSeverity>MAJOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_methods_too_big,_too_complex.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidfieldswithnametoolong</Id>
          <Title>Avoid fields with name too long</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_fields_with_name_too_long.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Assemblieswithpoorcohesion(RelationalCohesion)</Id>
          <Title>Assemblies with poor cohesion (RelationalCohesion)</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Assemblies_with_poor_cohesion_(RelationalCohesion).html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>MoveP/InvokestoNativeMethodsclass</Id>
          <Title>Move P/Invokes to NativeMethods class</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Move_P/Invokes_to_NativeMethods_class.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Typeswithdisposableinstancefieldsmustbedisposable</Id>
          <Title>Types with disposable instance fields must be disposable</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Types_with_disposable_instance_fields_must_be_disposable.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>PotentiallydeadFields</Id>
          <Title>Potentially dead Fields</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Potentially_dead_Fields.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>UIlayershouldn&amp;apos;tusedirectlyDBtypes</Id>
          <Title>UI layer shouldn't use directly DB types</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_UI_layer_shouldn't_use_directly_DB_types.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidtypeswithpoorcohesion</Id>
          <Title>Avoid types with poor cohesion</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_types_with_poor_cohesion.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>WrongusageofIsNotDeadCodeAttribute</Id>
          <Title>Wrong usage of IsNotDeadCodeAttribute</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Wrong_usage_of_IsNotDeadCodeAttribute.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Avoidtypeswithtoomanymethods</Id>
          <Title>Avoid types with too many methods</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Avoid_types_with_too_many_methods.html</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>Non-staticclassesshouldbeinstantiatedorturnedtostatic</Id>
          <Title>Non-static classes should be instantiated or turned to static</Title>
          <CustomTags />
          <DefaultSeverity>MINOR</DefaultSeverity>
          <IsEnabledByDefault>false</IsEnabledByDefault>
          <HelpLinkUri>http://www.ndepend.com/default-rules/Q_Non-static_classes_should_be_instantiated_or_turned_to_static.html</HelpLinkUri>
        </Rule>
      </Rules>
    </RuleCollection>
  </Collections>
  <NonRoslynCollections>
    <RuleCollection>
      <Name>FxCop</Name>
      <Rules>
        <Rule>
          <Id>CA1000</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not declare static members on generic types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>The syntax for calling static members on generic types is complex as the type parameter has to be specified for each call.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove {0} from {1} or make it an instance member.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182139.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1001</Id>
          <Category>Microsoft.Design</Category>
          <Title>Types that own disposable fields should be disposable</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182172.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1002</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not expose generic lists</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182142.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1003</Id>
          <Category>Microsoft.Design</Category>
          <Title>Use generic event handler instances</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not declare new delegates to be used as event handlers when targeting a version of the .NET Framework that supports generics. Use an instance EventHandler&lt;T&gt; instead.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Visual Basic generates EventHandler delegates for events that use the following pattern: Event MyEvent(ByVal Sender As Object, ByVal e as MyEventArgs). Change the event that defines EventHandler {0} to use EventHandler&lt;T&gt; by defining the event type explicitly, e.g. Event MyEvent As EventHandler(Of MyEventArgs).</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182178.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1004</Id>
          <Category>Microsoft.Design</Category>
          <Title>Generic methods should provide type parameter</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Methods where the type parameter cannot be inferred from the parameters and therefore has to be defined in the method call are too difficult to understand. Methods with a formal parameter typed as the generic method type parameter support inference. Methods with no formal parameter typed as the generic method type parameter don't support inference.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182150.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1005</Id>
          <Category>Microsoft.Design</Category>
          <Title>Avoid excessive parameters on generic types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Avoid generic types with more than two type parameters as users have difficulties understanding what type parameters represent in types with long type parameter lists.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider a design where {0} has no more than 2 type parameters.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182129.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1006</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not nest generic types in member signatures</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider a design where {0} doesn't nest generic type {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182144.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1007</Id>
          <Category>Microsoft.Design</Category>
          <Title>Use generics where appropriate</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>References passed to ref parameters must be the exact type of the parameter. Using generics enable the method for general use.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider using generics instead of a reference to System.Object in {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182179.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1008</Id>
          <Category>Microsoft.Design</Category>
          <Title>Enums should have zero value</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>An enum should generally have a zero value. If the enum is not decorated with the Flags attribute, it should have a member with a value of zero that represents the empty state. Optionally, this value is named 'None'. For a Flags-attributed enum, a zero-valued member is optional and, if it exists, should always be named 'None'. This value should indicate that no values have been set in the enum. Using a zero-valued member for other purposes is contrary to the use of the Flags attribute in that the bitwise AND and OR operators are useless with the member.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In enum {0}, change the name of {1} to 'None'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182149.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1009</Id>
          <Category>Microsoft.Design</Category>
          <Title>Declare event handlers correctly</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change {0} to return void.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182133.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1010</Id>
          <Category>Microsoft.Design</Category>
          <Title>Collections should implement generic interface</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Non-generic strongly typed collections should implement one of the generic collection interfaces. This will allow better integration of the collection with generic API.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} appears to be a non-generic, strongly typed collection. Add an implementation to the instance of {1}&lt;T&gt; where T is the underlying element type of {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182132.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1011</Id>
          <Category>Microsoft.Design</Category>
          <Title>Consider passing base types as parameters</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/3hk32yyz.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1012</Id>
          <Category>Microsoft.Design</Category>
          <Title>Abstract types should not have constructors</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the accessibility of all public constructors in {0} to protected.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182126.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1013</Id>
          <Category>Microsoft.Design</Category>
          <Title>Overload operator equals on overloading add and subtract</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>When overloading the addition and subtraction operators, make sure that the equality operator (==) is defined in a consistent manner.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider adding an overload of the equality operator for {0} that takes the same parameters as {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182164.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1014</Id>
          <Category>Microsoft.Design</Category>
          <Title>Mark assemblies with CLSCompliantAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Mark {0} with CLSCompliant(true) because it exposes externally visible types.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182156.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2210</Id>
          <Category>Microsoft.Design</Category>
          <Title>Assemblies should have valid strong names</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Sign {0} with a strong name key.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182127.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1016</Id>
          <Category>Microsoft.Design</Category>
          <Title>Mark assemblies with AssemblyVersionAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Assemblies should use version numbers. The version number is considered part of an assembly's identity. Versioning is applied by means of the AssemblyVersion attribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add an AssemblyVersion attribute to {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182155.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1017</Id>
          <Category>Microsoft.Design</Category>
          <Title>Mark assemblies with ComVisibleAttribute</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError, Error</DefaultSeverity>
          <Description>The System.Runtime.InteropServices.ComVisible attribute indicates whether COM clients can use the library. Good design dictates that developers explicitly indicate COM visibility. The default value for this attribute is 'true'. However, the best design is to mark the assembly ComVisible false, and then mark types, interfaces, and individual members as ComVisible true, as appropriate.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because {0} exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true).</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182157.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1018</Id>
          <Category>Microsoft.Design</Category>
          <Title>Mark attributes with AttributeUsageAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning, Error</DefaultSeverity>
          <Description>The AttributeUsage attribute specifies the targets that are valid for the attribute (see System.AttributeTargets), whether an attribute can appear on a target more than once, and whether the attribute is inheritable.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Specify AttributeUsage on {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182158.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1019</Id>
          <Category>Microsoft.Design</Category>
          <Title>Define accessors for attribute arguments</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Provide accessors for both named and positional arguments. Each positional argument on an attribute should declare a read-only property with the same name (but different casing). Each named argument should provide a read/write property with the same name (but different casing).</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add a public read-only property accessor for positional argument {0} of Attribute {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182136.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1020</Id>
          <Category>Microsoft.Design</Category>
          <Title>Avoid namespaces with few types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A namespace should generally have more than five types.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider merging the types defined in '{0}' with another namespace.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182130.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1021</Id>
          <Category>Microsoft.Design</Category>
          <Title>Avoid out parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider a design that does not require that {0} be an out parameter.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182131.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1023</Id>
          <Category>Microsoft.Design</Category>
          <Title>Indexers should not be multidimensional</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Indexers (indexed properties) should use a single value (either an integer or string types) for indexing values. Multidimensional indexers can significantly reduce the usability of the library. For example, public object this [int index1, int index2] is a non-intuitive indexer.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Redesign indexer {0} to use a single string or integer value as its index.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182152.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1024</Id>
          <Category>Microsoft.Design</Category>
          <Title>Use properties where appropriate</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change {0} to a property if appropriate.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182181.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1025</Id>
          <Category>Microsoft.Design</Category>
          <Title>Replace repetitive arguments with params array</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Several instances of same-type arguments can be better implemented as a parameter array argument. Generally, if a member declares three or more arguments of the same type, consider using a parameter array.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider implementing a version of {0} that accepts a parameter array argument.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182167.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1026</Id>
          <Category>Microsoft.Design</Category>
          <Title>Default parameters should not be used</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace method {0} with an overload that supplies all default arguments.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182135.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1027</Id>
          <Category>Microsoft.Design</Category>
          <Title>Mark enums with FlagsAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The enumeration appears to be made up of combinable flags. If this true, apply the Flags attribute to the enumeration.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The constituent members of {0} appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182159.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1028</Id>
          <Category>Microsoft.Design</Category>
          <Title>Enum storage should be Int32</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There is little or no benefit to using a type smaller than Int32. You might require a type that is larger than Int32 if: 1) the enumeration values are flags and there are or will be many (&amp;amp;gt;32) values, or 2) the type needs to be different from Int32 for backward compatibility. Avoid using an underlying type that is not integral.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>If possible, make the underlying type of {0} System.Int32 instead of {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182147.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1030</Id>
          <Category>Microsoft.Design</Category>
          <Title>Use events where appropriate</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>A method name suggestive of event functionality was encountered.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider making {0} an event.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182177.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1031</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not catch general exception types</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Modify {0} to catch a more specific exception than {1} or rethrow the exception.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182137.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1032</Id>
          <Category>Microsoft.Design</Category>
          <Title>Implement standard exception constructors</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add the following constructor to {0}: {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182151.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1033</Id>
          <Category>Microsoft.Design</Category>
          <Title>Interface methods should be callable by child types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182153.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1034</Id>
          <Category>Microsoft.Design</Category>
          <Title>Nested types should not be visible</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182162.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1035</Id>
          <Category>Microsoft.Design</Category>
          <Title>ICollection implementations have strongly typed members</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Types that implement ICollection should also provide a version of CopyTo with the first parameter set to a strong type, namely a type other than an array of objects or System.Array. Implement the interface member explicitly and make the strongly typed version public. It is safe to ignore violations of this rule when you are implementing a new object-based collection, such as a binary tree, where types based on your collection will determine what the strong type is. These types should expose strongly typed members.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} should provide a strongly typed implementation of ICollection.CopyTo.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/49stb304.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1036</Id>
          <Category>Microsoft.Design</Category>
          <Title>Override methods on comparable types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Types that implement IComparable should redefine Equals and comparison operators to keep the meanings of less than, greater than, and equals consistent throughout the type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} should override Equals since it implements IComparable.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182163.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1038</Id>
          <Category>Microsoft.Design</Category>
          <Title>Enumerators should be strongly typed</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Types that implement IEnumerator should also provide a version of the Current property that returns a type other than Object. Implement the interface member explicitly and make the strongly typed version public.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} should provide a strongly typed implementation of IEnumerator.Current.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182148.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1039</Id>
          <Category>Microsoft.Design</Category>
          <Title>Lists are strongly typed</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>IList implementations should also provide versions of the IList members that are strongly typed, namely they should specify types other than Object for method and property parameter and return types. Implement the interface members explicitly and make the strongly typed versions public. It is safe to ignore violations of this rule when you are implementing a new object-based collection, such as a linked list, where types based on your collection will determine what the strong type is. These types should expose strongly typed members.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} should provide a strongly typed implementation of {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182154.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1040</Id>
          <Category>Microsoft.Design</Category>
          <Title>Avoid empty interfaces</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Interfaces are meant to contain members that specify a set of behaviors. To mark or label a class, use an attribute instead of an empty interface.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Define a custom attribute to replace {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182128.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1041</Id>
          <Category>Microsoft.Design</Category>
          <Title>Provide ObsoleteAttribute message</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>The ObsoleteAttribute.Message property provides the text message displayed when an obsolete type or member is compiled. This message should provide information on the replacement for the obsolete element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Provide a message for the ObsoleteAttribute that marks {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182166.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1043</Id>
          <Category>Microsoft.Design</Category>
          <Title>Use integral or string argument for indexers</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Indexers (indexed properties) should use either integer or string types for indexing values. These types are easy to use and commonly used for indexing data structures; using other types can significantly reduce the usability of the library. For example, public char this [int index] is the C# signature for the String type's indexer.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use an integral value or string as the parameter to indexer {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182180.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1044</Id>
          <Category>Microsoft.Design</Category>
          <Title>Properties should not be write only</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Write-only properties usually indicate a flawed design.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because property {0} is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182165.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1045</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not pass types by reference</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider a design that does not require that {0} be a reference parameter.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182146.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1046</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not overload operator equals on reference types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Most reference types, including those that override System.Object.Equals, do not override the equality operator  (==). Most languages provide a default implementation of this operator.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} should not overload the equality operator.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182145.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1047</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not declare protected members in sealed types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Sealed types cannot be extended, and protected members are only useful if you can extend the declaring type. Sealed types should not declare protected members.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make type {0} private, public, or internal (Friend in Visual Basic).</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182138.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1048</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not declare virtual members in sealed types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Sealed types cannot be extended, and virtual members are only useful if you can extend the declaring type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' is a virtual member declared in a sealed type. Mark the member non-virtual or, if the type should be extensible, unseal it.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182140.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1049</Id>
          <Category>Microsoft.Design</Category>
          <Title>Types that own native resources should be disposable</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Types that allocate unmanaged resources should implement IDisposable to allow callers to release those resources on demand. Failure to implement IDisposable can result in unmanaged resources being unavailable or underutilized.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Implement IDisposable on {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182173.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1050</Id>
          <Category>Microsoft.Design</Category>
          <Title>Declare types in namespaces</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>A type should be defined inside a namespace to avoid duplication.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} should be declared inside a namespace.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182134.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1051</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not declare visible instance fields</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182141.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1052</Id>
          <Category>Microsoft.Design</Category>
          <Title>Static holder types should be sealed</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Static holder types do not provide functionality that derived instances can extend. Inheriting from such a type indicates a flawed design.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because type {0} contains only 'static' ('Shared' in Visual Basic) members, mark it as 'sealed' ('NotInheritable' in Visual Basic) to prevent consumers from inheriting from it.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182168.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1053</Id>
          <Category>Microsoft.Design</Category>
          <Title>Static holder types should not have constructors</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because type {0} contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182169.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1054</Id>
          <Category>Microsoft.Design</Category>
          <Title>URI parameters should not be strings</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>If a parameter name contains "uri" or "url" or "urn", and it's typed as string, the parameter type should be changed to System.Uri, unless there is an overload method where the same parameter is typed as System.Uri.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the type of parameter {0} of method {1} from string to System.Uri, or provide an overload of {1}, that allows {0} to be passed as a System.Uri object.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182174.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1055</Id>
          <Category>Microsoft.Design</Category>
          <Title>URI return values should not be strings</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>If a function name contains "uri" or "url" or "urn" and the return type is string, the return type should be changed to System.Uri.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the return type of {0} from string to System.Uri.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182176.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1056</Id>
          <Category>Microsoft.Design</Category>
          <Title>URI properties should not be strings</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>If a property name contains "uri" or "url" or "urn" and it's typed as string, it should be changed to System.Uri.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the type of property {0} from string to System.Uri.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182175.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1057</Id>
          <Category>Microsoft.Design</Category>
          <Title>String URI overloads call System.Uri overloads</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>If a method overloads another method by replacing a System.Uri parameter with a string, then the string overload should simply build a Uri object from the string, and pass the result to the string overload.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Refactor {0} so that it builds a System.Uri object from {1}, and then calls {2}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182170.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1058</Id>
          <Category>Microsoft.Design</Category>
          <Title>Types should not extend certain base types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>It is best not to extend some base types or to prefer extending better alternatives to those base types.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the base type of {0} so that it no longer extends {1}. The preferred design is to decouple the underlying XmlDocument representation from the type's interface by using containment instead of inheritance.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182171.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1059</Id>
          <Category>Microsoft.Design</Category>
          <Title>Members should not expose certain concrete types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Members should not expose certain concrete types.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Modify member {0} so that it no longer exposes the concrete type {1}. Use IXPathNavigable to represent XML data sources.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182160.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1060</Id>
          <Category>Microsoft.Design</Category>
          <Title>Move P/Invokes to NativeMethods class</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182161.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1061</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not hide base class methods</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Defining a method in a derived class with the same name and parameters that are more weakly typed as one that is defined in the base class will obstruct access to the method defined in the base class.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change or remove {0} because it hides a more specific base class method: {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182143.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1063</Id>
          <Category>Microsoft.Design</Category>
          <Title>Implement IDisposable correctly</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove IDisposable from the list of interfaces implemented by {0} and override the base class Dispose implementation instead.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms244737.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1064</Id>
          <Category>Microsoft.Design</Category>
          <Title>Exceptions should be public</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Exception classes should either be public, or have a non-generic public ancestor.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make exception class {0} public.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264484.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1065</Id>
          <Category>Microsoft.Design</Category>
          <Title>Do not raise exceptions in unexpected locations</Title>
          <CustomTags />
          <DefaultSeverity>Error, Warning</DefaultSeverity>
          <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb386039.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1300</Id>
          <Category>Microsoft.Globalization</Category>
          <Title>Specify MessageBoxOptions</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>In order to run correctly on right-to-left systems, all calls to MessageBox.Show should use the overload that specifies MessageBoxOptions as an argument. Programs should detect whether they are running on a right-to-left system at run-time and pass the appropriate MessageBoxOptions value in order to display correctly.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change {0} to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182191.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1301</Id>
          <Category>Microsoft.Globalization</Category>
          <Title>Avoid duplicate accelerators</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Controls should have unique accelerators for all items and sub-controls.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Define unique accelerators for the following controls in {0} that all currently use &amp;{1} as an accelerator: {2}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182185.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1302</Id>
          <Category>Microsoft.Globalization</Category>
          <Title>Do not hardcode locale specific strings</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not use string literals for system items that have locale-specific designations. Special system locations should be retrieved using provided API such as GetFolderPath. See the System.Environment.SpecialFolder enumeration for more information.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>If the literal '{0}' used in method {1} refers to a special system location, replace it with a call to Environment.GetFolderPath.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182186.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1304</Id>
          <Category>Microsoft.Globalization</Category>
          <Title>Specify CultureInfo</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182189.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1305</Id>
          <Category>Microsoft.Globalization</Category>
          <Title>Specify IFormatProvider</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182190.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1306</Id>
          <Category>Microsoft.Globalization</Category>
          <Title>Set locale for data types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>In most cases, Locale should be explicitly set to CultureInfo.InvariantCulture on DataSet and DataTable instances. Upon creation of a DataSet or DataTable instance, the Locale is set to the current culture. In most cases, the Locale should be set to CultureInfo.InvariantCulture to guarantee proper sorting behavior in all cultures.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Be sure to set the {0} Locale property wherever {1} creates an instance of that type.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182188.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2101</Id>
          <Category>Microsoft.Globalization</Category>
          <Title>Specify marshaling for P/Invoke string arguments</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182319.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1307</Id>
          <Category>Microsoft.Globalization</Category>
          <Title>Specify StringComparison</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb386080.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1308</Id>
          <Category>Microsoft.Globalization</Category>
          <Title>Normalize strings to uppercase</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Strings should be normalized to upper-case.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In method {0}, replace the call to {1} with String.ToUpperInvariant().</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb386042.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1309</Id>
          <Category>Microsoft.Globalization</Category>
          <Title>Use ordinal StringComparison</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>For non-linguistic comparisons, StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase should be used instead of the linguistically-sensitive StringComparison.InvariantCulture.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} passes '{1}' as the 'StringComparison' parameter to {2}. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb385972.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1400</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>P/Invoke entry points should exist</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Methods decorated with the DllImport attribute should point to existing unmanaged entry points. There is no compile-time check to ensure that methods decorated with the DllImport attribute actually exist in the referenced unmanaged dll. In the event that an entry point does not exist or the specified argument list is not correct, a runtime exception will be generated.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Correct the declaration of {0} so that it correctly points to an existing entry point in {1}. The unmanaged entry point name currently linked to is {2}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182208.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1401</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>P/Invokes should not be visible</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182209.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1402</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>Avoid overloads in COM visible interfaces</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Interfaces that are visible to COM should not define overloads, as they will be renamed and cannot be implemented by Visual Basic 6 clients. COM interfaces cannot contain overloaded methods.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>ComVisible(true) interface {0} defines overloaded methods. Give each method a unique name or make the type ComVisible(false).</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182197.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1403</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>Auto layout types should not be COM visible</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Types that are automatically ordered by the runtime should not be visible to COM. Types that are automatically laid out by the runtime do not have a guaranteed order between versions. This can break COM clients of those types. To ensure compatibility between versions, the type should be explicitly or sequentially ordered.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type {0} is both ComVisible(true) and set to Auto layout. Make this type ComVisible(false) or specify Explicit or Sequential layout.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182194.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1404</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>Call GetLastError immediately after P/Invoke</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>The last Win32 error can be reset as a result of making managed calls, due to P/Invokes called by the runtime itself. In order to ensure the correctness of the value returned by GetLastWin32Error, place the call immediately after the relevant platform invoke call in your code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Method {0} called GetLastWin32Error but the immediately preceding call to {1} is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182199.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1405</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>COM visible type base types should be COM visible</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>COM visible types should have an object hierarchy that is uniformly COM visible.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: {1}</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182202.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1406</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>Avoid Int64 arguments for Visual Basic 6 clients</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>COM visible types that might be accessed from Microsoft Visual Basic 6 clients should not expose methods with long arguments.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Member {0} has one or more parameters of type Int64 that cannot be used from Visual Basic 6 clients.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182195.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1407</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>Avoid static members in COM visible types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>COM does not support static methods.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider whether the absence of {0} adversely impacts functionality for COM clients.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182198.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1408</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>Do not use AutoDual ClassInterfaceType</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Classes that use the ClassInterfaceType.AutoDual setting might break in later versions if you change the member layout of the class or base classes. ClassInterfaceType.AutoDual should only be used when the versioning limitations are known to be acceptable.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type {0} uses ClassInterfaceAttribute(ClassInterfaceType.AutoDual) which might not version properly. Instead, define and implement the interface and mark the class using ClassInterfaceType.None.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182205.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1409</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>COM visible types should be creatable</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Types with no public default constructor are not COM-creatable. COM does not support parameterized object construction. A type was detected with a public parameterized constructor but no public default constructor. This type is not creatable by COM. If there is an alternate method for creating and passing object instances to COM clients (through a method on another type, for example), this might not be a problem.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Provide a public default constructor for {0} if it should be COM-creatable or mark the type as ComVisible(false).</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182203.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1410</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>COM registration methods should be matched</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>If a COM registration method is provided, an unregistration method must also be provided to reverse the operations performed by the registration method. COM registration functions are static methods within a type that are marked with the ComRegisterFunction attribute. All COM registration functions should be matched by a static method within the same type that is marked with the ComUnregisterFunction attribute. This method should reverse any operations completed by the registration function.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is marked with the ComRegisterFunction attribute, but a corresponding unregistration function cannot be located in the type.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182200.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1411</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>COM registration methods should not be visible</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>COM registration and unregistration functions should be private or internal. COM registration and unregistration functions are called by the runtime when an assembly is registered or unregistered for use with COM. It is preferred that these methods are not externally visible.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the accessibility of {0}, a COM registration function, to private.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182201.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1412</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>Mark ComSource interfaces as IDispatch</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>COM source interfaces should be marked ComInterfaceType.InterfaceIsIDispatch. Visual Basic 6 clients cannot receive events with non-IDispatch interfaces.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Mark interface {0} as InterfaceType(ComInterfaceType.InterfaceIsIDispatch) because it is specified in the ComSourceInterfaces attribute applied to types defined in {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182207.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1413</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>Avoid non-public fields in COM visible value types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>COM visible value types should not expose non-public instance fields. COM visible value types have their non-public instance fields exposed to COM clients.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type {0} has non-public field {1} that is exposed to COM clients.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182196.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1414</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>Mark boolean P/Invoke arguments with MarshalAs</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>All boolean P/Invoke parameters and return types should be explicitly marked with the MarshalAs attribute. By default, the system will marshal all booleans as 4-byte UnmanagedType.Bool. This is the correct behavior for Win32 'BOOL' arguments but incorrect for C++ 'bool' arguments, which should be marshaled as 1-byte UnmanagedType.U1. For code maintainability reasons, always explicitly specify the marshaling information for boolean arguments and return values.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add the MarshalAsAttribute to parameter {0} of P/Invoke {1}. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182206.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1415</Id>
          <Category>Microsoft.Interoperability</Category>
          <Title>Declare P/Invokes correctly</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>P/Invoke methods should be declared correctly to ensure correct runtime behaviors.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change the declaration of {0} so that parameter {1} is a pointer to System.Threading.NativeOverlapped.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182204.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1500</Id>
          <Category>Microsoft.Maintainability</Category>
          <Title>Variable names should not match field names</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Instance field and variable names should not be identical within the same scope.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}, a variable declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182216.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1501</Id>
          <Category>Microsoft.Maintainability</Category>
          <Title>Avoid excessive inheritance</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Object hierarchies that are deeply nested increase the challenge of understanding and maintaining code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} has an object hierarchy {1} levels deep within the defining module. If possible, eliminate base classes within the hierarchy: {2}</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182213.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1502</Id>
          <Category>Microsoft.Maintainability</Category>
          <Title>Avoid excessive complexity</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182212.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1504</Id>
          <Category>Microsoft.Maintainability</Category>
          <Title>Review misleading field names</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Review field names which, by convention, appear to indicate they are instance or static but, in fact, are not. This rule fires against instance fields which have names prefixed with "s_" and static fields which are prefixed with "m_".</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The field name {0} suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb164506.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1505</Id>
          <Category>Microsoft.Maintainability</Category>
          <Title>Avoid unmaintainable code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Types and methods with a high degree of class coupling, cyclomatic complexity and/or program length can be difficult to maintain.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} has a maintainability index of {1}. Rewrite or refactor the method to increase its maintainability index (MI). An MI below {2} indicates poor maintainability, an MI between {2} and {3} indicates moderate maintainability, and an MI above {3} indicates good maintainability.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb386043.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1506</Id>
          <Category>Microsoft.Maintainability</Category>
          <Title>Avoid excessive class coupling</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Types and methods with a high degree of class coupling can be difficult to maintain.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb397994.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1600</Id>
          <Category>Microsoft.Mobility</Category>
          <Title>Do not use idle process priority</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not set process priority to Idle. Processes with System.Diagnostics.ProcessPriorityClass.Idle will occupy the CPU when it would otherwise be idle, and thereby block standby.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Modify method {0} to set Process.PriorityClass to something other than ProcessPriorityClass.Idle.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182219.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1601</Id>
          <Category>Microsoft.Mobility</Category>
          <Title>Do not use timers that prevent power state changes</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not poll more often than or utilize timers that fire more frequently than once per second. Higher frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Modify the call to {0} in method {1} to set the timer interval to a value that's greater than or equal to one second.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182230.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1700</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Do not name enum values 'Reserved'</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Avoid naming an enum value 'Reserved'. Adding 'Reserved' values will lead to a breaking change on removal when the value is actually used in a later version of the product.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>If {0} is not used in the current implementation, remove it. Otherwise give it a meaningful name.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182236.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1701</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Resource string compound words should be cased correctly</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In resource {0}, referenced by name '{1}', the compound word '{2}' in string value '{3}' exists as a discrete term. If your usage is intended to be single word, case it as '{4}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264481.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1702</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Compound words should be cased correctly</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The compound word '{0}' in assembly name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264474.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1703</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Resource strings should be spelled correctly</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>The individual words that make up a resource string should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In resource {0}, referenced by name '{1}', correct the spelling of '{2}' in string value '{3}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264483.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1704</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Identifiers should be spelled correctly</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Correct the spelling of '{0}' in assembly name {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264492.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1707</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Identifiers should not contain underscores</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the underscores from assembly name {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182245.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1708</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Identifiers should differ by more than case</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not use names that require case sensitivity for uniqueness. Components must be fully usable from both case-sensitive and case-insensitive languages. Since case-insensitive languages cannot distinguish between two names within the same context that differ only by case, components must avoid this situation.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change member names {0} and '{1}' so that they differ by more than case.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182242.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1709</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Identifiers should be cased correctly</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Correct the casing of '{0}' in assembly name {1} by changing it to '{2}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182240.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1710</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Identifiers should have correct suffix</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename {0} to end in '{1}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182244.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1711</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Identifiers should not have incorrect suffix</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rename type name {0} so that it does not end in '{1}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182247.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1712</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Do not prefix enum values with type name</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>The individual values that make up an enumeration type should not be prefixed with the type name.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove {1} from {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182237.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1713</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Events should not have before or after prefix</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Use present and past tense for pre-events and post-events, instead of using 'Before' and 'After'. For example, use Closing and Closed rather than BeforeClose and AfterClose.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace {0} with a present tense version of the event name.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182238.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1714</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Flags enums should have plural names</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>An enumeration marked with FlagsAttribute should have a plural name.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>If enumeration name {0} is singular, change it to a plural form.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264486.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1715</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Identifiers should have correct prefix</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Prefix interface names with the letter 'I' to indicate that the type is an interface, as in IFormattable. Prefix generic type parameter names with the letter 'T' and provide them with descriptive names, as in Dictionary&lt;TKey, TValue&gt;, unless a single 'T' is completely self-explanatory, as in Collection&lt;T&gt;. Use Pascal casing for both interface and type parameter names. Use abbreviations sparingly. Do not use the underscore character. Do use similar names when defining a class/interface pair where the class is a standard implementation of the interface. The names should differ only by the letter I prefixed on the interface name, as with Component and IComponent.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Prefix interface name {0} with 'I'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182243.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1716</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Identifiers should not match keywords</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182248.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1717</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Only FlagsAttribute enums should have plural names</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Plural names indicate that the values of the enumeration can be combined. For example, an enumeration named 'Day' indicates a single day, and an enumeration named 'Days' indicates multiple days. Enumeration values should be combined using the bit-wise OR operator only if the Flags attribute is present on the enumeration.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>If the name {0} is plural, change it to its singular form.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264487.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1719</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Parameter names should not match member names</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Parameter names should be distinct from member names.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change either member or parameter name {0} so that one differs from the other.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182252.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1720</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Identifiers should not contain type names</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb531486.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1721</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Property names should not match get methods</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The property name {0} is confusing given the existence of method {1}. Rename or remove one of these members.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182253.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1722</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Identifiers should not have incorrect prefix</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not use 'C' as a prefix for type names. Do not use any prefix for naming types. Consider using the name of the base class as the suffix when naming derived types. For example: ApplicationException is a kind of Exception. SerializableAttribute is a kind of Attribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the leading 'C' from type name {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182246.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1724</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Type names should not match namespaces</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Identifiers which conflict in whole or in part with namespace names should be avoided. Names that describe the purpose or contents of a type are preferred.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The type name {0} conflicts in whole or in part with the namespace name '{1}'. Change either name to eliminate the conflict.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182257.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1725</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Parameter names should match base declaration</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182251.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1726</Id>
          <Category>Microsoft.Naming</Category>
          <Title>Use preferred terms</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Use preferred terms over deprecated alternates.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace the term '{0}' in assembly name {1} with the preferred alternate '{2}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182258.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1800</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Do not cast unnecessarily</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182271.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1802</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Use literals where appropriate</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Prefer literals over InitOnly fields if values do not have to be calculated at runtime.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field {0} is declared as 'static readonly' but is initialized with a constant value '{1}'. Mark this field as 'const' instead.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182280.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1804</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Remove unused locals</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182278.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1809</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Avoid excessive locals</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Method implementations should not contain more than 64 local variables. In order for the run-time to enregister local variables most efficiently, there should be 64 or fewer of them. Enregistering based on flow analysis will not occur for locals in excess of 64, which may result in slower performance.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} has {1} local variables, some of which may have been generated by the compiler. Refactor {0} so that it uses fewer than 64 local variables.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182263.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1810</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Initialize reference type static fields inline</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182275.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1811</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Avoid uncalled private code</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} appears to have no upstream public or protected callers.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182264.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1812</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Avoid uninstantiated internal classes</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182265.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1813</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Avoid unsealed attributes</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Seal attribute types for improved performance. Sealing attribute types speeds up performance during reflection on custom attributes.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Seal {0}, if possible.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182267.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1814</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Prefer jagged arrays over multidimensional</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Multidimensional arrays can have a negative impact on performance. Use a jagged array if possible.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is a multidimensional array. Replace it with a jagged array if possible.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182277.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1815</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Override equals and operator equals on value types</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} should override Equals.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182276.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1819</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Properties should not return arrays</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change {0} to return a collection or make it a method.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/0fss9skc.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1820</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Test for empty strings using string length</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Replace the call to {0} in {1} with a check for non-null and 'String.Length == 0'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182279.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1821</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Remove empty finalizers</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Finalizers should be avoided where possible, to avoid the additional performance overhead involved in tracking object lifetime.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} implements a finalizer that only calls conditionally emitted methods or the base type finalizer. Remove the finalizer or ensure that it is only conditionally compiled into the assembly. If this violation occurs against a finalizer that is entirely wrapped in a conditionally-emitted block of code, suppress this message.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264476.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1822</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Mark members as static</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms245046.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1823</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Avoid unused private fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms245042.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1824</Id>
          <Category>Microsoft.Performance</Category>
          <Title>Mark assemblies with NeutralResourcesLanguageAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language used to render the neutral culture's resources for an assembly. When looking up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources located in the main assembly, instead of searching for a satellite assembly with the current user interface culture for the current thread. This will improve lookup performance for the first resource you load and can reduce your working set.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb385967.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1900</Id>
          <Category>Microsoft.Portability</Category>
          <Title>Value type fields should be portable</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Structures with explicit layout containing misaligned fields cause crashes on 64-bit platforms.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Structure {0} contains the following non-portable fields: {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182285(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1901</Id>
          <Category>Microsoft.Portability</Category>
          <Title>P/Invoke declarations should be portable</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>As it is declared in your code, parameter {0} of P/Invoke {1} will be {2} bytes wide on {3} platforms. This is not correct, as the actual native declaration of this API indicates it should be {4} bytes wide on {3} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {5}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182284(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1903</Id>
          <Category>Microsoft.Portability</Category>
          <Title>Use only API from targeted framework</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Type {0} uses type {1}. Because this type was introduced in {2}, which was not included in the project's target framework, {3}, your application may fail to run on systems without this service pack installed.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/cc667408(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2001</Id>
          <Category>Microsoft.Reliability</Category>
          <Title>Avoid calling problematic methods</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Avoid making unnecessary and potentially dangerous method calls.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the call to GC.Collect from {0}. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb385973.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2002</Id>
          <Category>Microsoft.Reliability</Category>
          <Title>Do not lock on objects with weak identity</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Don't take locks on objects that may bleed across AppDomains or that don't have a strong identity.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} locks on a reference of type {1}. Replace this with a lock against an object with strong-identity.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182290.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2003</Id>
          <Category>Microsoft.Reliability</Category>
          <Title>Do not treat fibers as threads</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not assume a managed thread is a Win32 thread - it could be a fiber. The runtime will run managed threads as fibers on top of real threads owned by SQL Server. These threads will be shared across AppDomains and even databases in the SQL Server process. Using managed thread local storage will work, but you may not use unmanaged thread local storage or assume your code will run on the current OS thread again. Do not change settings like the thread's locale. Do not call CreateCriticalSection or CreateMutex via P/Invoke because they require the thread that enters a lock also exit the lock. Since this will not be the case when using fibers, Win32 critical sections and mutexes will be useless in SQL Server.
You may safely use most of the state on a managed System.Thread object, including managed thread local storage and the thread's current UI culture. For programming model reasons, you will not be able to change a thread's current culture when running in SQL Server though (this will be enforced through a new permission).</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Method {0} calls the native method {1}. Remove this call because it is inappropriate for managed threads.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182291.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2004</Id>
          <Category>Microsoft.Reliability</Category>
          <Title>Remove calls to GC.KeepAlive</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>If converting to SafeHandle usage, remove all calls to GC.KeepAlive(object). Classes relying on SafeHandle do not require calls to GC.KeepAlive, and unnecessary calls can make code harder to maintain.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} contains one or more calls to GC.KeepAlive(object) that should be removed (after converting to SafeHandle to encapsulate the unmanaged resource).</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182293.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2006</Id>
          <Category>Microsoft.Reliability</Category>
          <Title>Use SafeHandle to encapsulate native resources</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Use of IntPtr in managed code may indicate a potential security and reliability problem. All uses of IntPtr must be reviewed to determine whether use of a SafeHandle (or similar technology) is required in its place. Problems will occur if the IntPtr represents some native resource (memory, file handle, socket etc.) that managed code is considered to own. I.e. managed code is expected to in some way release the resource and failure to do so would cause resource leakage. In such scenarios security or reliability problems will also exist if multithreaded access is allowed to the IntPtr and a means of releasing the resource represented by the IntPtr. These problems involve recycling of the IntPtr value on resource release while simultaneous use of the resource is being made on another thread, leading to race conditions where one thread can read or write data associated with the wrong resource. For example, if your type stores an OS handle as an IntPtr and allows users to call both Close and any other method using that handle simultaneously (without some kind of synchronization), your code has a handle recycling problem, which causes data corruption and often a security vulnerability. SafeHandle (and its sibling class CriticalHandle) provide a mechanism for encapsulating a native handle to a resource so that such threading problems can be avoided (along with other issues such as the need to carefully control the lifetime of managed objects that contain a copy of the native handle over calls to native methods; ie, you can often remove calls to GC.KeepAlive). There are performance overheads implicit in using SafeHandle (and, to a lesser degree, CriticalHandle) which can often be mitigated through careful design.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Review usage of {0} (a {1} instance) to determine whether it should be replaced with a SafeHandle or CriticalHandle.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182294.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2102</Id>
          <Category>Microsoft.Security</Category>
          <Title>Catch non-CLSCompliant exceptions in general handlers</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Exception handlers which are truly intended to catch all exceptions should handle non-CLSCompliant exceptions if there is a possibility one can be raised. If possible, catch handlers should only catch specific exceptions or exception base types. In circumstances where a handler is required to catch all exceptions (e.g., when a try block wraps arbitrary plug-in code), the handler should also include a generic catch handler (in C#, catch{ ... }) to handle non-CLSCompliant exceptions. It is possible to raise non-CLSCompliant exceptions by modifying and recompiling IL.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is defined in an assembly that is not marked RuntimeCompatibility(WrapNonExceptionThrows = true) and defines a catch(Exception) handler that is not matched with a generic catch clause (catch{{}} in C#, catch(System::Object*){{}} in mc++) for non-CLSCompliant exceptions. Either mark the assembly as RuntimeCompatibility(WrapNonExceptionThrows = true), eliminate the catch(Exception) clause by catching a specific set of Exceptions or add a generic catch handler that duplicates the code contained within the catch(Exception) handler.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264489.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2103</Id>
          <Category>Microsoft.Security</Category>
          <Title>Review imperative security</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Use of imperative demands can lead to unforeseen security problems. The values used to construct a permission should not change within the scope of the demand call. For some components the scope spans from the demand call to end of the method; for others it spans from the demand call until the component is finalized. If the values used to construct the permission are fields or properties, they can be changed within the scope of the demand call. This can lead to race conditions, mutable read-only arrays, and problems with boxed value types.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Review the following for a possible security vulnerability: In {0}, the class member {1} is being passed to a {2} constructor.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182309.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2104</Id>
          <Category>Microsoft.Security</Category>
          <Title>Do not declare read only mutable reference types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182302.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2105</Id>
          <Category>Microsoft.Security</Category>
          <Title>Array fields should not be read only</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Read-only fields that reference arrays might not give the intended effect. Setting a field which references an array to read-only prevents the value of the field from being changed. Note that elements in the array can be changed. You can ignore this violation if protecting the contents of the array is not a concern.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Either replace {0} with a strongly typed collection that cannot be changed, or replace the public field with a method that returns a clone of a private array.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182299.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2106</Id>
          <Category>Microsoft.Security</Category>
          <Title>Secure asserts</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Asserting a security permission without performing any security checks can leave an exploitable security weakness in your code. A security stack walk stops when a security permission is asserted. If you assert a permission without performing any checks on the caller, the caller might be able to indirectly execute code using your permissions. Asserts without security checks are only permissible when you are certain that the assert cannot be used in a harmful fashion, namely, if the code you call is harmless, or users have no way to pass arbitrary information to code that you call.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider adding a security demand to {0}. This method is accessible from outside its assembly, and might therefore provide a way to circumvent security protection.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182314.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2107</Id>
          <Category>Microsoft.Security</Category>
          <Title>Review deny and permit only usage</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Use of Deny or PermitOnly should be carefully reviewed. Use of Deny or PermitOnly should be carefully considered, as they are not useful in some cases. For example, permissions that are path-based (like FileIOPermission and RegistryPermission) should not be used with Deny, because different paths might actually point to the same location. If callers are granted the right to assert permissions by the security policy, then they can terminate a stack walk before it reaches your Deny or PermitOnly. If a caller has been granted powerful permissions (such as the ability to call unmanaged code), then calling Deny or PermitOnly cannot truly stop it from doing whatever it chooses. Also consider that Deny and PermitOnly do not affect a LinkDemand. For instance, if you deny some permission P and call a method with a LinkDemand for P, the Deny will not affect the result of the LinkDemand.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} uses a permission Deny or PermitOnly. Use of Deny or PermitOnly should be carefully reviewed.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182308.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2108</Id>
          <Category>Microsoft.Security</Category>
          <Title>Review declarative security on value types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>A Demand or a LinkDemand on a structure does not prevent creation of an instance of that structure.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the demand or link demand from {0} because it will not prevent the struct from being instantiated. Place the demand on a parameterized constructor instead and make sure that the initial state of the structure is detectably valid or invalid (the struct will only be initialized with default values if the security demand is not satisfied).</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182307.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2109</Id>
          <Category>Microsoft.Security</Category>
          <Title>Review visible event handlers</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>It appears that an event handler is externally visible or that an EventArgs parameter is being exposed in a visible method decorated with a security demand. There can be problems exposing sensitive functionality in an event handler function; the security demand might not do what you expect.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider making {0} not externally visible or ensure that it is benign code.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182312.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2111</Id>
          <Category>Microsoft.Security</Category>
          <Title>Pointers should not be visible</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>IntPtr and UIntPtr fields should be declared as private. Exposing non-private pointers can cause a security weakness.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make {0} private.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182306.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2112</Id>
          <Category>Microsoft.Security</Category>
          <Title>Secured types should not expose fields</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Fields must be secured with a security check other than LinkDemand.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} has a LinkDemand or Demand, and exposes the field {1}. Fields cannot be protected by LinkDemands or Demands. To remove this vulnerability, make the field private and expose a property that has security applied to it.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182318.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2114</Id>
          <Category>Microsoft.Security</Category>
          <Title>Method security should be a superset of type</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>A method has security set at both the type and method levels. This might not have the intended effect. Security actions on the type level are overridden by security actions on the method level. When employing both type-level and method-level security, type-level security actions that are not also on the method will be ignored when the method executes.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Apply {0} security checks that currently exist at the type level only to method {1} as well.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182304.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2115</Id>
          <Category>Microsoft.Security</Category>
          <Title>Call GC.KeepAlive when using native resources</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If a method uses an IntPtr or UIntPtr field in a class with a finalizer and does not call GC.KeepAlive, a race condition might be introduced.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add a call to GC.KeepAlive(this) at the end of method {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182300.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2116</Id>
          <Category>Microsoft.Security</Category>
          <Title>APTCA methods should only call APTCA methods</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Methods with the AllowPartiallyTrustedCallersAttribute that call methods without that attribute might unintentionally expose functionality to partially trusted code. When a method has the AllowPartiallyTrustedCallersAttribute set, it is callable by partially trusted code. If it in turn calls methods without the attribute, a partially trusted caller is, in effect, being allowed to execute code that requires full trust. Depending on what full trust code is called and what parameter values are passed through from the partially trusted caller, malicious code might be able to exploit this security weakness.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The method {0} is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls {1}, which is defined in an assembly ({2}) that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182297.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2117</Id>
          <Category>Microsoft.Security</Category>
          <Title>APTCA types should only extend APTCA base types</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Types with the AllowPartiallyTrustedCallersAttribute that extend types without that attribute might unintentionally expose functionality in the base type to partially trusted callers. When a type has the AllowPartiallyTrustedCallersAttribute set, it is callable by partially trusted code. If the base type does not have this attribute, it requires callers to be fully trusted. If the derived type exposes protected members in the base type, the base type's data is made accessible to partially trusted callers, creating an exploitable security weakness.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do one of the following: 1) Remove the AllowPartiallyTrustedCallersAttribute from {0}. 2) If the attribute is necessary, verify that {0} does not expose any protected members of inherited types. 3) Add AllowPartiallyTrustedCallersAttribute to the base type {1}, if you can ensure that this will not have negative implications on security.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182298.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2118</Id>
          <Category>Microsoft.Security</Category>
          <Title>Review SuppressUnmanagedCodeSecurityAttribute usage</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Calling a method with the SuppressUnmanagedCodeSecurityAttribute applied to it can create a security weakness. Unmanaged code security checks ensure that all callers in the call stack have permission to execute unmanaged code. Disabling code security for P/Invoke methods allows callers that do not have this permission to breach security. This is acceptable only if the code is completely harmless, or callers have no way to pass arbitrary arguments through to the unmanaged code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Review declarative security for {0} and its callers for potential vulnerabilities. This method is accessible from outside its assembly, and might therefore provide a way to circumvent security protection. Consider removing SuppressUnmanagedCodeSecurity from the method or make it private and wrap it with a public method that demands a permission appropriate to the P/Invoke functionality and security risk.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182311.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2119</Id>
          <Category>Microsoft.Security</Category>
          <Title>Seal methods that satisfy private interfaces</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Externally visible types that implement non-public interfaces should not be extensible. Types that extend public types with non-public interfaces can override interface members. This can compromise object behavior or create a security vulnerability.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is an overridable method that satisfies a member on the private interface '{1}'. Mark the method as final, implement it explicitly or seal its declaring type {2}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182313.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2120</Id>
          <Category>Microsoft.Security</Category>
          <Title>Secure serialization constructors</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Serializable types that have a constructor protected by a security demand must apply the same security demands to the serialization constructor. Apply the demand using declarative security.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Security demands were found on {0}. Mark the serialization constructor for this type with the declarative form of the same demand(s).</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182317.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2121</Id>
          <Category>Microsoft.Security</Category>
          <Title>Static constructors should be private</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Non-private static constructors can cause unexpected behaviors, particularly when executed multiple times. This violation can occur if a type declares static data but has not explicitly  declared a static constructor. In this case, some compilers will generate an externally visible static constructor.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Declare an explicit static constructor for '{0}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182320.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2122</Id>
          <Category>Microsoft.Security</Category>
          <Title>Do not indirectly expose methods with link demands</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182303.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2124</Id>
          <Category>Microsoft.Security</Category>
          <Title>Wrap vulnerable finally clauses in outer try</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Finally clauses that restore security-related state should be wrapped in an outer try block. This will prevent an exception filter further up the stack from executing before a secure environment can be restored. Exception filters that run code expressions in the first pass after the guarded try blocks and before the associated finally block represent a possible security vulnerability. Examples of vulnerable functionality in finally clauses that should be protected against this include: calls to RevertAssert on an asserted permission, undoing a temporary impersonation, reversing an internal flag that bypasses a security check, and restoring the culture associated with a thread.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Wrap the finally clause in {0} that calls {1} in an outer try block with an associated catch that simply rethrows.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182322.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2126</Id>
          <Category>Microsoft.Security</Category>
          <Title>Type link demands require inheritance demands</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Unsealed types secured by a LinkDemand should also specify an InheritanceDemand. Without an InheritanceDemand, the link demand can be circumvented by overriding a method in a derived class.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} has one or more overridable methods with link demands that are not matched by an inheritance demand. Apply appropriate inheritance demands to the type.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182321.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2130</Id>
          <Category>Microsoft.Security</Category>
          <Title>Security critical constants should be transparent</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Compilers inline accesses to constants, and as such transparency enforcement is not done for them since there is no runtime access to the field.  These fields should be security transparent so that code reviewers do not assume that transparent code cannot access the constant.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is a literal field which is SecurityCritical; it should be transparent instead.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997446(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2131</Id>
          <Category>Microsoft.Security</Category>
          <Title>Security critical types may not participate in type equivalence</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Type equivalence requires that all participating types, as well as all methods and fields within those types, are transparent or security safe-critical.  The CLR will fail to load any type which violates this rule.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is a critical field contained in a type which is participating in type equivalence.  In order to allow type {1} to participate in equivalence, {0} must become security transparent or safe-critical.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997564(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2132</Id>
          <Category>Microsoft.Security</Category>
          <Title>Default constructors must be at least as critical as base type default constructors</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>On CoreCLR, if a base type has a public or protected non-transparent default constructor than the derived type must obey default constructor inheritance rules.  The derived type must also have a default constructor and that constructor must be at least as critical as the base type's default constructor.  If the base type's default constructor is safe-critical, the derived type's default constructor must be safe-critical or critical.  If the base type's default constructor is critical, then the derived type's default constructor must also be critical.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} derives from {1} but does not have a default constructor.  {1} needs to add a default constructor to obey the security inheritance rules on CoreCLR.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd983956(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2133</Id>
          <Category>Microsoft.Security</Category>
          <Title>Delegates must bind to methods with consistent transparency</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Delegate types and the methods that they bind to must have consistent transparency.  Transparent and safe-critical delegates may only bind to other transparent or safe-critical methods.  Similarly, critical delegates may only bind to critical methods.  These binding rules ensure that the only code which can invoke a method via a delegate could have also invoked the same method directly.  It prevents, for instance, transparent code from calling critical code directly via a transparent delegate.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} binds a critical delegate of type {1} to transparent or safe-critical method {2} in violation of secure delegate binding rules.  {1} should be made transparent or {2} should be made critical in order to allow this delegate binding to succeed.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997710(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2151</Id>
          <Category>Microsoft.Security</Category>
          <Title>Fields with critical types should be security critical.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Fields which have a critical type cannot be used from transparent code, and should therefore be marked security critical.  This makes it obvious to the users of the field that they must also be critical.  Additionally, such fields frequently store sensitive information such as a handle value.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field {0} is transparent or safe-critical but has security critical type {1}.  This field should be marked security critical.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2134</Id>
          <Category>Microsoft.Security</Category>
          <Title>Methods must keep consistent transparency when overriding base methods</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Transparency visibility must be preserved between overriding methods and the methods that are being overridden.  If the virtual method being overridden or interface method being implemented is security safe-critical or security transparent, then the overriding method must also be either security safe-critical or security transparent.  Similarly, if the method being overridden is security critical, the overriding method must be security critical.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Transparent or safe critical method {0} is overriding critical method {1} in violation of method override rules.  {0} must become security critical in order to override a critical virtual method or implement a critical interface method.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997447(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2123</Id>
          <Category>Microsoft.Security</Category>
          <Title>Override link demands should be identical to base</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>If a virtual method has a LinkDemand, in many cases, so should any override of it, and if an override has a LinkDemand, so should the overridden virtual method. Because it is possible to call any of the overrides of a virtual method explicitly, they should all have the same LinkDemand status or, if not, should be reviewed. This also applies to LinkDemand security checks for methods that part of an interface implementation, because the caller might use an interface-typed reference to access the method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The LinkDemands on override {0} do not exactly match the LinkDemands on base method {1}. Add, remove, or modify LinkDemands where required.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182305(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA5122</Id>
          <Category>Microsoft.Security</Category>
          <Title>P/Invoke declarations should not be safe-critical.</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Since P/Invokes may not be called by transparent code, they should not be marked as safe-critical methods.  Doing so can lead to confusion on the part of developers who may believe that their transparent code should be able to call the P/Invoke method since it is marked safe-critical.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>P/Invoke method {0} is marked safe-critical.  Since P/Invokes may only be called by critical code, this declaration should either be marked as security critical, or have its annotation removed entirely to avoid being misleading.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2135</Id>
          <Category>Microsoft.Security</Category>
          <Title>Level 2 assemblies should not contain LinkDemands</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>LinkDemands are deprecated in the level 2 security rule set.  Instead of using LinkDemands to enforce JIT time security, SecurityCritical methods, types, and fields should be used instead.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is protected with a LinkDemand for {1}.  In the level 2 security rule set, it should be protected by being security critical instead.  Remove the LinkDemand and mark {0} security critical.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997569(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2136</Id>
          <Category>Microsoft.Security</Category>
          <Title>Members should not have conflicting transparency annotations</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Transparency attributes are applied from larger scopes inward.  For instance, if a type is marked as entirely security critical, than all methods introduced by the type will also be security critical.  Members should not have transparency annotations which conflict with larger scoped annotations, as these smaller scoped annotations will be ignored by the CLR and can be misleading during a code review.  Methods not introduced by their type, such as virtual methods being overridden from a base type or interface methods being implemented, do have their annotations considered under the level 2 security rule set and are not considered by this rule.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}, a security critical member, is marked with a safe-critical annotation.  This annotation should be removed.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264493(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2150</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent code may not use security critical attributes</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Transparent code must not use security critical attributes.  This includes using security critical constructors, properties, or fields of attributes.  Violations of this rule will result in an exception when code attempts to retrieve the custom attributes from the transparent target.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}, a security transparent member, uses security critical attribute constructor {1}. Mark this target as security critical or security safe-critical, or remove the attribute from the target.</MessageFormat>
          <HelpLinkUri />
        </Rule>
        <Rule>
          <Id>CA2137</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent methods must contain only verifiable IL</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Transparent code must be fully verifiable.  This rule looks for any use of pointer types to check for unverifiable code, however it is not a complete verifier and PEVerify / transparent must be run on assemblies to ensure that all of their transparent code is verifiable.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Transparent method {0} returns a byref type.  Change the return type of this method, or mark it security critical or safe-critical.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd983954(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2149</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent methods must not call into native code</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Transparent code may not call native code directly.  This rule looks for any transparent code which calls a method stub (such as a P/Invoke declaration) which is really a direct call into native code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Transparent method {0} calls {1} which is a P/Invoke method.  Mark this method as security-critical or remove the call to the P/Invoke method.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ee155709(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2138</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>P/Invoke and COM interop methods with the SuppressUnmanagedCodeSecurity attribute result in a LinkDemand being done against the calling method.  Since security transparent code may not satisfy LinkDemands, it may also not call methods with SuppressUnmanagedCodeSecurity either on the method itself or on the type containing the method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}, a security transparent method, calls {1} which is decorated with the SuppressUnmanagedCodeSecurity attribute.  Remove the attribute from {1}, or mark {0} security critical or safe-critical in order to allow this call to succeed.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997711(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2139</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent methods may not use the HandleProcessCorruptingExceptions attribute</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>The HandleProcessCorruptingExceptions attribute may only be used by security critical methods, and will not be honored if it is applied to a transparent method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}, a transparent method, uses the HandleProcessCorruptingExceptionsAttribute.  In order to handle process corrupting exceptions, this method must become security critical or security safe-critical.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997565(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2140</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent code must not reference security critical items</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Transparent code cannot refer to security critical methods, types, or fields.  At runtime these references will result in MemberAccessExceptions or TypeLoadExceptions.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Transparent method {0} handles security critical exception type {1}.  In order for this exception handler to be allowed under the security transparency rules, either {0} must become security critical or safe-critical, or {1} become security safe-critical or transparent.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264475(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2141</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent methods must not satisfy LinkDemands</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Satisfying a LinkDemand is a security sensitive operation which can cause unintentional elevation of privilege.  Security transparent code must not satisfy LinkDemands, since it is not subject to the same security audit requirements as security critical code.  Transparent methods is security rule set level 1 assemblies will cause all LinkDemands they satisfy to be converted to full demands at runtime, which can cause performance problems.  In security rule set level 2 assemblies, transparent methods will fail to JIT if they attempt to satisfy a LinkDemand.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Security transparent method {0} calls {1} which is in non-APTCA assembly {2}.  Non-APTCA assemblies have implicit LinkDemands on their public surface area, and cannot be called by transparent methods.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997445(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2147</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent code may not use security asserts</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Transparent code may not use security asserts, since asserting permissions can result in elevating the effective permissions of the call stack.  Transparent code which attempts to assert will receive an InvalidOperationException at runtime.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}, a transparent type or method, contains a declarative security assert for {1}.  {0} should be made security critical or security safe-critical, or the assert should be removed from the transparent code.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264482(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2142</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent code should not be protected with LinkDemands</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Security transparent code should not be responsible for verifying the security of an operation, and therefore should not be protected from partial trust callers with LinkDemands.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Transparent method {0} is protected with a LinkDemand for {1}.  Remove this LinkDemand, or make the method security critical or safe-critical.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997567(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2143</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent methods should not use security demands</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions.  Any code which is performing security checks, such as security demands, should be safe-critical instead.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}, a transparent type or method, contains a declarative security demand for {1}.  {0} should be made security-safe critical or the demand should be removed from the transparent code.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997566(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2144</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent code should not load assemblies from byte arrays</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Assemblies loaded from byte arrays inherit the grant set of the loading assembly.  Since this means that the loaded assembly may be fully trusted, any calls to load from byte array from trusted code should be reviewed to ensure that it is secure.  Transparent code is not subjected to the same audit scrutiny as critical code, and therefore should not load assemblies from byte arrays.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Transparent method {0} calls {1} to load an assembly from a byte array.  This method should be marked security critical or safe-critical if it wishes to load assemblies from byte arrays.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997568(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2145</Id>
          <Category>Microsoft.Security</Category>
          <Title>Transparent methods should not be decorated with the SuppressUnmanagedCodeSecurityAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Methods decorated with the SuppressUnmanagedCodeSecurity attribute have an implicit LinkDemand placed upon all of their callers.  This LinkDemand requires that the calling code be security critical.  Marking the method which uses SuppressUnmanagedCodeSecurity as security critical makes this requirement more obvious for callers of the method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Transparent or safe-critical method {0} uses the SuppressUnmanagedCodeSecurityAttribute, either directly on the method or on the containing type.  Remove the SuppressUnmanagedCodeSecurity attribute or mark the method as security critical.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997570(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2146</Id>
          <Category>Microsoft.Security</Category>
          <Title>Types must be at least as critical as their base types and interfaces</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>While any type may derive from a transparent type or interface, restrictions apply as to the types that can inherit from or implement safe-critical or critical types.  Only safe-critical or critical types may derive from or implement safe-critical interfaces and base types.  Only critical types may derive from or implement critical interfaces and base types.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Transparent or safe-critical type {0} derives from critical type {1} in violation of the transparency inheritance rules.  {0} must be critical to derive from a critical type or implement a critical interface.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/dd997443(VS.100).aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1801</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Review unused parameters</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182268.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1806</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Do not ignore method results</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} creates a new instance of {1} which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182273.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2200</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Rethrow to preserve stack details</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182363.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2201</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Do not raise reserved exception types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182338.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2205</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Use managed equivalents of Win32 API</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Use managed equivalents to Win32 API whenever possible.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the declaration for {0}. Callers should use the following managed alternative: {1}</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182365.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2207</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Initialize value type static fields inline</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Do not declare explicit static constructors on value types. Initializing static data in explicit static constructors results in a value type that is not marked in metadata as 'beforefieldinit'. In this case, the static constructor is not always guaranteed to be called before instance members on the value type are called.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182346.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2208</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Instantiate argument exceptions correctly</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Call the {0} constructor that contains a message and/or paramName parameter.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182347.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2211</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Non-constant fields should not be visible</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Consider making {0} non-public or a constant.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182353.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2212</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Do not mark serviced components with WebMethod</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Types that extend ServicedComponent should not have the WebMethod attribute applied to members. Marking members of types that extend ServicedComponent with WebMethod is not a supported scenario.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} has the WebMethod attribute applied to it and its declaring type extends ServicedComponent. This is not a supported scenario.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182336.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2213</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Disposable fields should be disposed</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182328.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2214</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Do not call overridable methods in constructors</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182331.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2216</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Disposable types should declare finalizer</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>If a type implements a Dispose method and has unmanaged resources, it should provide a Finalize method in case Dispose is not explicitly called. The runtime calls the Finalize method or destructor of an object prior to reclaiming its managed resources in a process known as garbage collection. The Finalize method should free any unmanaged resources before they become inaccessible.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Implement a finalizer or destructor on {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182329.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2217</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Do not mark enums with FlagsAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>The enumeration does not appear to contain a consistent set values that can be combined using  the OR (|) and AND (&amp;amp;amp;) operators. Using the Flags attribute on an enumeration suggests that the enumeration values are meant to be combined using the AND and OR operators. Typically, a flags enumeration uses values that are either powers of two, or combine other values that are powers of two.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} is marked with FlagsAttribute but a discrete member cannot be found for every settable bit that is used across the range of enum values. Remove FlagsAttribute from the type or define new members for the following (currently missing) values: {1}</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182335.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2218</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Override GetHashCode on overriding Equals</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>When overriding Equals, you must also override GetHashCode to guarantee correct behavior with hashtables.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Since {0} redefines Equals, it should also redefine GetHashCode.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182358.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2219</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Do not raise exceptions in exception clauses</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Raising exceptions in exception clauses greatly increases the difficulty of debugging. Exceptions raised in finally and fault clauses will hide any exceptions raised in the corresponding try block. If an exception is raised in a filter, it is ignored and treated as if the filter had returned false.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Modify member {0} so that it does not raise an exception from within a finally clause. When an exception is raised from within a finally clause, the new exception hides the active exception, if present, making the original error hard to detect and debug.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb386041.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2220</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Finalizers should call base class finalizer</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>The Finalize method should call its base class' Finalize method. This is done automatically with the C# destructor syntax.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Modify {0} so that it calls its base class' finalize method.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182341.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2221</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Finalizers should be protected</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Finalize methods should be declared as protected.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Mark the finalizer for type {0} as protected.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182340.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2222</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Do not decrease inherited member visibility</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>It is incorrect to override a public method from an inherited class with a private implementation, unless the type is sealed or the method is marked final. It is considered bad form to hide a method signature halfway down an inheritance tree.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Make {0} non-private, mark it as final, or seal its declaring type. This method was originally defined in base class {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182332.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2223</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Members should differ by more than return type</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Methods in the same type that differ only by return type can be difficult for developers and tools to properly recognize. When extending a type, be sure not to define new methods that differ from base type methods only by type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>'{0}' should differ from other members by more than its return type.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182352.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2224</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Override Equals on overloading operator equals</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Types that redefine the equality operator should redefine Equals as well to ensure that these members return the same results. This helps ensure that types that rely on Equals (such as ArrayList and Hashtable) behave in a manner that is expected and consistent with the equality operator.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Override Equals on {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182357.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2225</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Operator overloads have named alternates</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>When redefining operators, implement named methods to provide access to the operator functionality from languages that do not support operator overloading. For example, the functionality of the '+' operator should also be accessible using an 'Add' method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Provide a method named '{0}' as a friendly alternate for operator {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182355.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2226</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Operators should have symmetrical overloads</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Overload operators that have related meanings so that their behavior is consistent. For example, when overloading the equality operator, you should also overload the inequality operator to ensure they return opposite results for the same input values.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Since '{0}' redefines operator '{1}', it should also redefine operator '{2}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182356.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2227</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Collection properties should be read only</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change {0} to be read-only by removing the property setter.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182327.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2228</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Do not ship unreleased resource formats</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Resources generated by pre-release versions of the .NET Framework might contain incorrect or incomplete type references. Pre-release versions of the .NET Framework can generate partial or incomplete references to types. Resources built with pre-release software are not guaranteed to work correctly in released versions.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Rebuild resource file {0} with a released version of .NET. The '{1}' key specified an unrecognized version '{2}'. The version found in the current mscorlib is '{3}'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182339.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2229</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Implement serialization constructors</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>The constructor signature accepts the same arguments as ISerializable.GetObjectData, namely, a SerializationInfo instance and a StreamingContext instance. The constructor should be protected for non-sealed classes and private for sealed classes. Failure to implement a serialization constructor will cause deserialization to fail, and throw a SerializationException.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add a constructor to {0} with the following signature: 'protected {0}(SerializationInfo info, StreamingContext context)'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182343.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2230</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Use params for variable arguments</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Do not use the varargs calling convention to accept a variable number of arguments. In the managed world, the 'params' and 'ParamArray' keywords provide this functionality..</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change {0} to use parameter arrays instead of varargs. For C#, use 'params'. For Visual Basic .NET and C++, use 'ParamArray'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182366.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2231</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Overload operator equals on overriding ValueType.Equals</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Value types that redefine System.ValueType.Equals should redefine the equality operator as well to ensure that these members return the same results. This helps ensure that types that rely on Equals (such as ArrayList and Hashtable) behave in a manner that is expected and consistent with the equality operator.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because {0} is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182359.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2232</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Mark Windows Forms entry points with STAThread</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Assemblies that reference System.Windows.Forms should have the STAThreadAttribute. Failure to apply this attribute will most likely result in an application that does not work. Windows Forms relies on a number of components that use the STA model.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Mark the entry point method {0} in assembly {1} with an STAThreadAttribute.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182351.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2233</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Operations should not overflow</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Correct the potential overflow in the operation '{0}' in {1}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182354.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2234</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Pass System.Uri objects instead of strings</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If there are two overloads one taking System.Uri and one taking System.String, library code should never call the string-based overload.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Modify {0} to call {1} instead of {2}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182360.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2235</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Mark all non-serializable fields</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>All fields that cannot be serialized directly should have the NonSerializedAttribute. Types that have the SerializableAttribute should not have fields of types that do not have the SerializableAttribute unless the fields are marked with the NonSerializedAttribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field {0} is a member of type {1}, which is serializable, but is of type {2}, which is not serializable. Add the NonSerializedAttribute to {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182349.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2236</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Call base class methods on ISerializable types</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Derived ISerializable types must call the base class magic constructor and the base class GetObjectData method.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Method {0} should be modified to call its base class implementation.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182326.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2237</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Mark ISerializable types with SerializableAttribute</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add [Serializable] to {0} as this type implements ISerializable.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182350.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2238</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Implement serialization methods correctly</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>Methods marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, must be non-generic, private, return void (Sub in Visual Studio) and take a single parameter of type StreamingContext.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change its accessibility to private.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182344.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2239</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Provide deserialization methods for optional fields</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>If a type contains fields attributed as OptionalField, then it should implement the corresponding special deserialization methods.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add a 'private void OnDeserialized(StreamingContext)' method to type {0} and attribute it with the System.Runtime.Serialization.OnDeserializedAttribute.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182362.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2240</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Implement ISerializable correctly</Title>
          <CustomTags />
          <DefaultSeverity>Error</DefaultSeverity>
          <Description>If a type is assignable to ISerializable, it should implement GetObjectData. For unsealed types, the GetObjectData method should be callable and overridable by derived types.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Add an implementation of GetObjectData to type {0}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182342.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2242</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Test for NaN correctly</Title>
          <CustomTags />
          <DefaultSeverity>CriticalError</DefaultSeverity>
          <Description>Direct comparisons against 'Single.NaN' or 'Double.NaN' (not a number) always return true for inequality and false for all other comparisons; use 'Single.IsNaN' or 'Double.IsNaN' to check if a floating point value is NaN.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because direct comparisons to 'Single.NaN' or 'Double.NaN' will always return true for inequality and false for all other comparisons, replace the comparison in {0} with a call to 'Single.IsNaN' or 'Double.IsNaN'.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264491.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA2243</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Attribute string literals should parse correctly</Title>
          <CustomTags />
          <DefaultSeverity>Warning</DefaultSeverity>
          <Description>Literal strings used as attribute parameters that represent URLs, version numbers, or GUIDs, should have the appropriate format.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>In the constructor of {0}, change the value of argument {1}, which is currently "{2}", to something that can be correctly parsed as {3}.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/bb264490.aspx</HelpLinkUri>
        </Rule>
        <Rule>
          <Id>CA1816</Id>
          <Category>Microsoft.Usage</Category>
          <Title>Call GC.SuppressFinalize correctly</Title>
          <CustomTags />
          <DefaultSeverity>CriticalWarning</DefaultSeverity>
          <Description>Call GC.SuppressFinalize to suppress finalization of your instance once Dispose has been called. Objects that implement IDisposable should call SuppressFinalize from the IDisposable.Dispose method to prevent the garbage collector from calling Object.Finalize on an object that does not require it.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Change {0} to call {1}. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</MessageFormat>
          <HelpLinkUri>https://msdn.microsoft.com/en-us/library/ms182269.aspx</HelpLinkUri>
        </Rule>
      </Rules>
    </RuleCollection>
    <RuleCollection>
      <Name>StyleCop</Name>
      <Rules>
        <Rule>
          <Id>SA0100</Id>
          <Category>C#</Category>
          <Title>File must be readable</Title>
          <CustomTags />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The file could not be read.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA0101</Id>
          <Category>C#</Category>
          <Title>Exception occurred</Title>
          <CustomTags />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>An exception occurred while parsing the file: {0}, {1}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA0102</Id>
          <Category>C#</Category>
          <Title>Syntax exception</Title>
          <CustomTags />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0}</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1100</Id>
          <Category>Readability</Category>
          <Title>Do not prefix calls with base unless local implementation exists</Title>
          <CustomTags />
          <Description>Verifies that the 'base.' prefix is not misused.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The call to {0} should only use the 'base.' prefix if the item is declared virtual in the base class and an override (or new) is defined in the local class.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1101</Id>
          <Category>Readability</Category>
          <Title>Prefix local calls with this</Title>
          <CustomTags />
          <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The call to {0} must begin with the 'this.' prefix to indicate that the item is a member of the class.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1126</Id>
          <Category>Readability</Category>
          <Title>Prefix calls correctly</Title>
          <CustomTags />
          <Description>Verifies that calls to members are prefixed with the correct notation. In some case from sourcecode analysis we cannot be sure which prefix is required.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The call to {0} must begin with the 'this.', 'base.', 'object.' or '{1}.' prefix to indicate the intended method call. </MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1102</Id>
          <Category>Readability</Category>
          <Title>Query clause must follow previous clause</Title>
          <CustomTags />
          <Description>Validates that blank lines are not placed between clauses within a query expression.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The query clause must begin on the line after the previous clause, with no blank lines in between.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1103</Id>
          <Category>Readability</Category>
          <Title>Query clauses must be on separate lines or all on one line</Title>
          <CustomTags />
          <Description>Verifies that each clause in a query expression must begin on a new line, unless the entire expression is on a single line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All clauses in the query expression must be placed on the same line, or each clause must begin on a new line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1104</Id>
          <Category>Readability</Category>
          <Title>Query clause must begin on new line when previous clause spans multiple lines</Title>
          <CustomTags />
          <Description>Verifies that a query clause begins on a new line if the previous clause spans multiple lines.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A query clause must begin on a new line if the previous clause spans multiple lines.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1105</Id>
          <Category>Readability</Category>
          <Title>Query clauses spanning multiple lines must begin on own line</Title>
          <CustomTags />
          <Description>Validates that a query clause spanning multiple lines begins on a new line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>If a query clause spans multiple lines, it must begin on its own line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1106</Id>
          <Category>Readability</Category>
          <Title>Code must not contain empty statements</Title>
          <CustomTags />
          <Description>Detects the presense of extra, unnecessary semicolons in the code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The code contains an extra semicolon.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1107</Id>
          <Category>Readability</Category>
          <Title>Code must not contain multiple statements on one line</Title>
          <CustomTags />
          <Description>Validates that multiple statements are not placed on a single line of code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A line may only contain a single statement.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1108</Id>
          <Category>Readability</Category>
          <Title>Block statements must not contain embedded comments</Title>
          <CustomTags />
          <Description>Validates that there are no comments placed between the declaration and opening bracket in a bracketed statement.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A comment may not be placed within the bracketed statement.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1109</Id>
          <Category>Readability</Category>
          <Title>Block statements must not contain embedded regions</Title>
          <CustomTags />
          <Description>Validates that there are no regions placed between the declaration and opening bracket in a bracketed statement.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A region may not be placed within the bracketed statement.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1110</Id>
          <Category>Readability</Category>
          <Title>Opening parenthesis must be on declaration line</Title>
          <CustomTags />
          <Description>Verifies that the opening bracket of a parameter list is placed just after the name of the method, on the same line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The opening parenthesis or bracket must be placed on the same line as the name of the {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1111</Id>
          <Category>Readability</Category>
          <Title>Closing parenthesis must be on line of last parameter</Title>
          <CustomTags />
          <Description>Verifies that the closing bracket of a parameter list is placed just after the last parameter, on the same line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The closing parenthesis or bracket must be placed on the same line as the last parameter in the parameter list.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1112</Id>
          <Category>Readability</Category>
          <Title>Closing parenthesis must be on line of opening parenthesis</Title>
          <CustomTags />
          <Description>Verifies that the closing bracket of a parameter list is placed just after the opening bracket when the method has no parameters.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The closing parenthesis or bracket must be placed on the same line as the opening parenthesis or bracket.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1113</Id>
          <Category>Readability</Category>
          <Title>Comma must be on same line as previous parameter</Title>
          <CustomTags />
          <Description>Verifies that a comma between two parameters is placed just after the previous parameter, on the same line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The comma must be placed on the same line as the previous parameter.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1114</Id>
          <Category>Readability</Category>
          <Title>Parameter list must follow declaration</Title>
          <CustomTags />
          <Description>Verifies that the first parameter in a parameter list is placed on the same line as the opening bracket, parenthesis or on the next line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The first parameter in the parameter list must be placed on the same line as the opening bracket, parenthesis or on the next line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1115</Id>
          <Category>Readability</Category>
          <Title>Parameter must follow comma</Title>
          <CustomTags />
          <Description>Verifies that a parameter is placed on the line after the previous comma, in a multi-line parameter list.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The parameter must begin on the line after the previous parameter.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1116</Id>
          <Category>Readability</Category>
          <Title>Split parameters must start on line after declaration</Title>
          <CustomTags />
          <Description>Verifies that the first parameter in a parameter list is placed on the line beneath the opening bracket, in a multi-line parameter list.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>If the {0} parameters are on separate lines, the first parameter must begin on the line beneath the name of the {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1117</Id>
          <Category>Readability</Category>
          <Title>Parameters must be on same line or separate lines</Title>
          <CustomTags />
          <Description>Verifies that each parameter in a parameter list is placed on its own line, unless all parameters are on the same line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All {0} parameters must be placed on the same line, or each parameter must be placed on a separate line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1118</Id>
          <Category>Readability</Category>
          <Title>Parameter must not span multiple lines</Title>
          <CustomTags />
          <Description>Validates that no parameter spans across multiple lines, other than the first parameter in a parameter list.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>
          The parameter spans multiple lines. If the parameter is short, place the entire parameter on a single line. Otherwise, save the contents
          of the parameter in a temporary variable and pass the temporary variable as a parameter.
        </MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1120</Id>
          <Category>Readability</Category>
          <Title>Comments must contain text</Title>
          <CustomTags />
          <Description>Validates that a comment contains description text.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The comment is empty. Add text to the comment or remove it.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1121</Id>
          <Category>Readability</Category>
          <Title>Use built in type alias</Title>
          <CustomTags />
          <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use the built-in type alias '{0}' rather than {1} or {2}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1125</Id>
          <Category>Readability</Category>
          <Title>Use shorthand for nullable types</Title>
          <CustomTags />
          <Description>Enforces the use of the shorthand of a nullable type rather than the Nullable&lt;T&gt; except inside a typeof().</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use the shorthand of the nullable type.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1122</Id>
          <Category>Readability</Category>
          <Title>Use string empty for empty strings</Title>
          <CustomTags />
          <Description>Enforces the use of the string.Empty property for empty strings.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Use string.Empty rather than "".</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1123</Id>
          <Category>Readability</Category>
          <Title>Do not place regions within elements</Title>
          <CustomTags />
          <Description>Prevents the use of regions within code elements, which limits code readability.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The use of regions is not allowed within code elements. Remove the #region and #endregion tags.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1124</Id>
          <Category>Readability</Category>
          <Title>Do not use regions</Title>
          <CustomTags />
          <Description>Prevents the use of regions anywhere within the code.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The use of regions is not allowed. Remove the #region and #endregion tags.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1500</Id>
          <Category>Layout</Category>
          <Title>Curly brackets for multi line statements must not share line</Title>
          <CustomTags />
          <Description>Validates that the opening or closing curly bracket in a bracketed statement is placed on its own line if the statement spans multiple lines.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>If a statement spans multiple lines, the {0} curly bracket must be placed on its own line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1501</Id>
          <Category>Layout</Category>
          <Title>Statement must not be on single line</Title>
          <CustomTags />
          <Description>Validates that a bracketed statement is not placed on a single line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A statement containing curly brackets must not be placed on a single line. The opening and closing curly brackets must each be placed on their own line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1502</Id>
          <Category>Layout</Category>
          <Title>Element must not be on single line</Title>
          <CustomTags />
          <Description>Validates that a bracketed element is not placement on a single line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The {0} must not be placed on a single line. The opening and closing curly brackets must each be placed on their own line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1503</Id>
          <Category>Layout</Category>
          <Title>Curly brackets must not be omitted</Title>
          <CustomTags />
          <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The body of the {0} must be wrapped in opening and closing curly brackets.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1504</Id>
          <Category>Layout</Category>
          <Title>All accessors must be multi line or single line</Title>
          <CustomTags />
          <Description>Validates that an accessor in a property or indexer is only placed on a single line if all accessors in the property or indexer are placed on a single line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>An accessor can only be placed on a single line if all of the accessors in the {0} are placed on a single line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1505</Id>
          <Category>Layout</Category>
          <Title>Opening curly brackets must not be followed by blank line</Title>
          <CustomTags />
          <Description>Validates that an opening curly bracket in a bracketed statement or element is not followed by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>An opening curly bracket must not be followed by a blank line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1506</Id>
          <Category>Layout</Category>
          <Title>Element documentation headers must not be followed by blank line</Title>
          <CustomTags />
          <Description>Validates that a documentation header is not followed by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A documentation header line must not be followed by a blank line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1507</Id>
          <Category>Layout</Category>
          <Title>Code must not contain multiple blank lines in a row</Title>
          <CustomTags />
          <Description>Validates that the code does not contain multiple blank lines in a row.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The code must not contain multiple blank lines in a row.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1508</Id>
          <Category>Layout</Category>
          <Title>Closing curly brackets must not be preceded by blank line</Title>
          <CustomTags />
          <Description>Validates that a closing curly bracket in a bracketed statement or element is not preceded by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A closing curly bracket must not be preceded by a blank line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1509</Id>
          <Category>Layout</Category>
          <Title>Opening curly brackets must not be preceded by blank line</Title>
          <CustomTags />
          <Description>Validates that an opening curly bracket in a bracketed statement or element is not preceded by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>An opening curly bracket must not be preceded by a blank line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1510</Id>
          <Category>Layout</Category>
          <Title>Chained statement blocks must not be preceded by blank line</Title>
          <CustomTags />
          <Description>Validates than an else, catch, or finally statement is not preceded by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>An else, catch, or finally statement must not be preceded by a blank line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1511</Id>
          <Category>Layout</Category>
          <Title>While do footer must not be preceded by blank line</Title>
          <CustomTags />
          <Description>Validates that the while keyword in a do-while statement is not preceded by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The while keyword in a do-while statement must not be preceded by a blank line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1512</Id>
          <Category>Layout</Category>
          <Title>Single line comments must not be followed by blank line</Title>
          <CustomTags />
          <Description>Validates that a comment is not followed by a blank line. (This does not apply to C-style comments.)</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A single-line comment must not be followed by a blank line. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1513</Id>
          <Category>Layout</Category>
          <Title>Closing curly bracket must be followed by blank line</Title>
          <CustomTags />
          <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Statements or elements wrapped in curly brackets must be followed by a blank line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1514</Id>
          <Category>Layout</Category>
          <Title>Element documentation header must be preceded by blank line</Title>
          <CustomTags />
          <Description>Validates that a documentation header is preceded by a blank line, or is the first item in its scope.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A documentation header must be preceded by a blank line or must be the first item in its scope.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1515</Id>
          <Category>Layout</Category>
          <Title>Single line comment must be preceded by blank line</Title>
          <CustomTags />
          <Description>Validates that a comment is preceded by a blank line, or is the first item in its scope.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1516</Id>
          <Category>Layout</Category>
          <Title>Elements must be separated by blank line</Title>
          <CustomTags />
          <Description>Validates that adjacent elements are separated by a blank line.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Adjacent elements must be separated by a blank line.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1517</Id>
          <Category>Layout</Category>
          <Title>Code must not contain blank lines at start of file</Title>
          <CustomTags />
          <Description>Validates that the code does not contain blank lines at the start of the file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The code must not contain blank lines at the start of the file.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1518</Id>
          <Category>Layout</Category>
          <Title>Code must not contain blank lines at end of file</Title>
          <CustomTags />
          <Description>Validates that the code does not contain blank lines at the end of the file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The code must not contain blank lines at the end of the file.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1600</Id>
          <Category>Documentation</Category>
          <Title>Elements must be documented</Title>
          <CustomTags />
          <Description>Validates that an element contains a properly formatted documentation header.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The {0} must have a documentation header.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1601</Id>
          <Category>Documentation</Category>
          <Title>Partial elements must be documented</Title>
          <CustomTags />
          <Description>Validates that a partial class, struct, etc. contains a valid documentation header which contains either a summary tag or a content tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The partial {0} element must have a documentation header containing either a summary tag or a content tag.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1602</Id>
          <Category>Documentation</Category>
          <Title>Enumeration items must be documented</Title>
          <CustomTags />
          <Description>Validates that an item within an enumeration contains a properly formatted documentation header.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The enumeration sub-item must have a documentation header.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1603</Id>
          <Category>Documentation</Category>
          <Title>Documentation must contain valid xml</Title>
          <CustomTags />
          <Description>Indicates that a documentation header is composed of invalid Xml and cannot be parsed.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation header is composed of invalid Xml: {0}</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1604</Id>
          <Category>Documentation</Category>
          <Title>Element documentation must have summary</Title>
          <CustomTags />
          <Description>Validates that a documentation header contains a properly formatted summary tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation header must have a summary tag.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1605</Id>
          <Category>Documentation</Category>
          <Title>Partial element documentation must have summary</Title>
          <CustomTags />
          <Description>Validates that a partial class, struct, etc. contains a documentation header with a properly formatted summary tag or content tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The partial element's documentation header must contain either a summary tag or content tag.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1606</Id>
          <Category>Documentation</Category>
          <Title>Element documentation must have summary text</Title>
          <CustomTags />
          <Description>Validates that an element's summary tag contains a filled-in description.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The summary section in the documentation header must not be empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1607</Id>
          <Category>Documentation</Category>
          <Title>Partial element documentation must have summary text</Title>
          <CustomTags />
          <Description>Validates that a partial class, struct, etc. contains a documentation header with a filled-in summary description.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The summary or content section in the documentation header must not be empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1608</Id>
          <Category>Documentation</Category>
          <Title>Element documentation must not have default summary</Title>
          <CustomTags />
          <Description>Validates that the summary tag in an element's documentation header is not the default text generated by Visual Studio.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation header still contains the default summary text generated by Visual Studio.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1609</Id>
          <Category>Documentation</Category>
          <Title>Property documentation must have value</Title>
          <CustomTags />
          <Description>Validates that a public or protected property contains a documentation header with a value tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The public or protected property's documentation header must contain a value tag.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1610</Id>
          <Category>Documentation</Category>
          <Title>Property documentation must have value text</Title>
          <CustomTags />
          <Description>Validates that a property's value tag contains a filled-in description.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The value section in the property's documentation header must not be empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1611</Id>
          <Category>Documentation</Category>
          <Title>Element parameters must be documented</Title>
          <CustomTags />
          <Description>Validates that an element's documentation header contains a param tag for each item in the element's parameter list.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation header must contain param tags matching the element's parameter list.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1612</Id>
          <Category>Documentation</Category>
          <Title>Element parameter documentation must match element parameters</Title>
          <CustomTags />
          <Description>Validates that an element's documentation header does not contain param tags for parameters which do not exist in the element's parameter list.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The param tags in the documentation header must match the element's parameter list.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1613</Id>
          <Category>Documentation</Category>
          <Title>Element parameter documentation must declare parameter name</Title>
          <CustomTags />
          <Description>Validates that all param tags in an element's documentation header contain a filled-in name attribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All param tags in the documentation header must contain a 'name' attribute.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1614</Id>
          <Category>Documentation</Category>
          <Title>Element parameter documentation must have text</Title>
          <CustomTags />
          <Description>Validates that an element's documentation header contains filled-in descriptions for each parameter in the element's parameter list.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the param tag for the '{0}' parameter must not be empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1615</Id>
          <Category>Documentation</Category>
          <Title>Element return value must be documented</Title>
          <CustomTags />
          <Description>Validates that an element's documentation header contains a returns tag if the element has a return value.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation header must contain a returns tag since the element has a return value.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1616</Id>
          <Category>Documentation</Category>
          <Title>Element return value documentation must have text</Title>
          <CustomTags />
          <Description>Validates that an element's returns tag contains a filled-in description.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The returns section in the documentation header must not be empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1617</Id>
          <Category>Documentation</Category>
          <Title>Void return value must not be documented</Title>
          <CustomTags />
          <Description>Validates that an element's documentation header does not contain a returns tag if the element has no return value.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation header should not contain a returns tag, since the element has no return value.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1618</Id>
          <Category>Documentation</Category>
          <Title>Generic type parameters must be documented</Title>
          <CustomTags />
          <Description>Validates that an element's documentation header contains a typeparam tag for each of the element's generic types.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation header must contain typeparam tags matching the generic types for the {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1619</Id>
          <Category>Documentation</Category>
          <Title>Generic type parameters must be documented partial class</Title>
          <CustomTags />
          <Description>Validates that a partial class, struct, etc. contains a documentation header with a typeparam tag for each of the element's generic types, unless these types are documented on another part of the element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>
          The documentation header must contain typeparam tags matching the generic types for the {0}. If the typeparam
          tags are documented on another part of the partial {0}, change the 'summary' tag to a 'content' tag to indicate that the
          primary documentation is placed on another part of the partial {0}.
        </MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1620</Id>
          <Category>Documentation</Category>
          <Title>Generic type parameter documentation must match type parameters</Title>
          <CustomTags />
          <Description>Validates that an element's documentation header does not contain typeparam tags for types which are not part of the element's generic type list.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The typeparam tags in the documentation header must match the generic types for the {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1621</Id>
          <Category>Documentation</Category>
          <Title>Generic type parameter documentation must declare parameter name</Title>
          <CustomTags />
          <Description>Validates that all typeparam tags in an element's documentation header contain a filled-in name attribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All typeparam tags in the documentation header must contain a 'name' attribute.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1622</Id>
          <Category>Documentation</Category>
          <Title>Generic type parameter documentation must have text</Title>
          <CustomTags />
          <Description>Validates that an element's documentation header contains filled-in descriptions for each item in the element's generic type list.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the typeparam tag for the '{0}' parameter must not be empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1623</Id>
          <Category>Documentation</Category>
          <Title>Property summary documentation must match accessors</Title>
          <CustomTags />
          <Description>Validates that a property's summary description text begins with the correct syntax, depending upon whether the property exposes get or set accessors.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The property's documentation summary text must begin with: {0}</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1624</Id>
          <Category>Documentation</Category>
          <Title>Property summary documentation must omit set accessor with restricted access</Title>
          <CustomTags />
          <Description>Validates that a property's summary description text does not include a description for a set accessor when the property exposes only a get accessor.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Because the property only contains a visible get accessor, the documentation summary text must begin with '{0}'.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1625</Id>
          <Category>Documentation</Category>
          <Title>Element documentation must not be copied and pasted</Title>
          <CustomTags />
          <Description>Validates that an element's documentation header does not contain repeated documentation text.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation header contains two or more identical documentation strings. The only documentation text which may be duplicated is '{0}'.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1626</Id>
          <Category>Documentation</Category>
          <Title>Single line comments must not use documentation style slashes</Title>
          <CustomTags />
          <Description>Validates that comments do not begin with three forward slashes in a row, making them difficult to distinguish from documentation headers.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Single-line comments must not begin with three slashes, which are reserved for lines within an Xml documentation header.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1627</Id>
          <Category>Documentation</Category>
          <Title>Documentation text must not be empty</Title>
          <CustomTags />
          <Description>Validates that the description within a documentation tag is filled-in.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the {0} tag must not be empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1628</Id>
          <Category>Documentation</Category>
          <Title>Documentation text must begin with a capital letter</Title>
          <CustomTags />
          <Description>Validates that the documentation text within a documentation section begins with a capital letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the {0} tag must begin with a capital letter.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1629</Id>
          <Category>Documentation</Category>
          <Title>Documentation text must end with a period</Title>
          <CustomTags />
          <Description>Validates that the documentation text within a documentation section ends with a period.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the {0} tag must end with a period.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1630</Id>
          <Category>Documentation</Category>
          <Title>Documentation text must contain whitespace</Title>
          <CustomTags />
          <Description>Verifies that the documentation text within a documentation section contains at least two words, separated by whitespace.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the {0} tag does not contain any whitespace between words, indicating that it
          most likely does not follow a proper grammatical structure required for documentation text.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1631</Id>
          <Category>Documentation</Category>
          <Title>Documentation must meet character percentage</Title>
          <CustomTags />
          <Description>Verifies that the documentation text within a documentation section does not contain an excessive amount of symbols, making it difficult to read.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the {0} tag does not appear to follow a proper grammatical structure required for documentation text.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1632</Id>
          <Category>Documentation</Category>
          <Title>Documentation text must meet minimum character length</Title>
          <CustomTags />
          <Description>Verifies that the documentation text within a documentation section meets or exceeds the minimum length.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the {0} tag must be at least {1} characters in length. Documentation
          failing to meet this guideline most likely does not follow a proper grammatical structure required for documentation text.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1642</Id>
          <Category>Documentation</Category>
          <Title>Constructor summary documentation must begin with standard text</Title>
          <CustomTags />
          <Description>Verifies that a constructor's summary text begins with the appropriate wording.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the constructor's summary tag must begin with the text: {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1643</Id>
          <Category>Documentation</Category>
          <Title>Destructor summary documentation must begin with standard text</Title>
          <CustomTags />
          <Description>Verifies that a destructor's summary text begins with the appropriate wording.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the destructor's summary tag must begin with the text: {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1644</Id>
          <Category>Documentation</Category>
          <Title>Documentation headers must not contain blank lines</Title>
          <CustomTags />
          <Description>Verifies that a documentation header does not contain blank lines.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1645</Id>
          <Category>Documentation</Category>
          <Title>Included documentation file does not exist</Title>
          <CustomTags />
          <Description>Verifies that an included documentation header file can be loaded.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The included documentation header file does not exist or cannot be loaded: {0}</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1646</Id>
          <Category>Documentation</Category>
          <Title>Included documentation x path does not exist</Title>
          <CustomTags />
          <Description>Verifies that an included documentation tag's XPath expression is valid.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The XPath string '{0}' cannot be loaded from the included documentation file: {1}</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1647</Id>
          <Category>Documentation</Category>
          <Title>Include node does not contain valid file and path</Title>
          <CustomTags />
          <Description>Verifies that an 'include' tag contains a valid file and path attribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The 'include' tag does not contain a valid 'file' and 'path' attribute: {0}</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1648</Id>
          <Category>Documentation</Category>
          <Title>Inherit doc must be used with inheriting class</Title>
          <CustomTags />
          <Description>Verifies that an 'inheritdoc' tag is not used when the class or interface does not inherit from a base class or interface.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The 'inheritdoc' tag should not be used when the class or interface does not inherit from a base class or interface.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1650</Id>
          <Category>Documentation</Category>
          <Title>Element documentation must be spelled correctly</Title>
          <CustomTags />
          <Description>Validates that an element's documentation header contains correctly spelled words.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation text within the {0} tag contains incorrectly spelled words: {1}</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1633</Id>
          <Category>Documentation</Category>
          <Title>File must have header</Title>
          <CustomTags />
          <Description>Validates that a file contains a properly formatted file header.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The file has no header, the header Xml is invalid, or the header is not located at the top of the file.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1634</Id>
          <Category>Documentation</Category>
          <Title>File header must show copyright</Title>
          <CustomTags />
          <Description>Validates that a file header contains a copyright tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The file header must contain a copyright tag.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1635</Id>
          <Category>Documentation</Category>
          <Title>File header must have copyright text</Title>
          <CustomTags />
          <Description>Validates that a file header contains a filled-in copyright tag.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The copyright tag in the file header must not be empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1636</Id>
          <Category>Documentation</Category>
          <Title>File header copyright text must match</Title>
          <CustomTags />
          <Description>Validates that a file header contains a copyright matching specific copyright text.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The copyright tag in the file header must contain the following text: {0}</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1637</Id>
          <Category>Documentation</Category>
          <Title>File header must contain file name</Title>
          <CustomTags />
          <Description>Validates that a file header contains a file attribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The copyright tag in the file header must contain a 'file' attribute which contains the name of the file.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1638</Id>
          <Category>Documentation</Category>
          <Title>File header file name documentation must match file name</Title>
          <CustomTags />
          <Description>Validates that a file header contains a file attribute which contains the name of the file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The file attribute in the file header's copyright tag must contain the name of the file.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1639</Id>
          <Category>Documentation</Category>
          <Title>File header must have summary</Title>
          <CustomTags />
          <Description>Validates that a file header contains a filled-in summary description.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The file header must contain a non-empty summary tag.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1640</Id>
          <Category>Documentation</Category>
          <Title>File header must have valid company text</Title>
          <CustomTags />
          <Description>Validates that a file header contains a filled-in company attribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The copyright tag in the file header must contain a company attribute which contains the name of the company.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1641</Id>
          <Category>Documentation</Category>
          <Title>File header company name text must match</Title>
          <CustomTags />
          <Description>Validates that a file header contains a company attribute which contains a specific company name.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The company attribute in the file header must contain the following company name: {0}</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1649</Id>
          <Category>Documentation</Category>
          <Title>File header file name documentation must match type name</Title>
          <CustomTags />
          <Description>Validates that a file header contains a file attribute which contains the name of the first type in the file.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The file attribute in the file header's copyright tag must contain the name of the first type in the file and can be any of these: {0}</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1300</Id>
          <Category>Naming</Category>
          <Title>Element must begin with upper case letter</Title>
          <CustomTags />
          <Description>Validates that names of certain types of elements begin with an upper-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} names begin with an upper-case letter: {1}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1301</Id>
          <Category>Naming</Category>
          <Title>Element must begin with lower case letter</Title>
          <CustomTags />
          <Description>Validates that names of certain types of elements begin with a lower-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>{0} names must start with a lower-case letter: {1}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1302</Id>
          <Category>Naming</Category>
          <Title>Interface names must begin with i</Title>
          <CustomTags />
          <Description>Validates that the name of an interface begins with the capital letter 'I'.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Interface names must start with the capital letter 'I': {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1303</Id>
          <Category>Naming</Category>
          <Title>Const field names must begin with upper case letter</Title>
          <CustomTags />
          <Description>Validates that the name of a constant begins with an upper-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Constants must start with an upper-case letter: {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1304</Id>
          <Category>Naming</Category>
          <Title>Non private readonly fields must begin with upper case letter</Title>
          <CustomTags />
          <Description>Validates that the name of a non-private readonly field begins with an upper-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Readonly variables that are not declared private must start with an upper-case letter: {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1305</Id>
          <Category>Naming</Category>
          <Title>Field names must not use hungarian notation</Title>
          <CustomTags />
          <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The variable name '{0}' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1306</Id>
          <Category>Naming</Category>
          <Title>Field names must begin with lower case letter</Title>
          <CustomTags />
          <Description>Validates that the name of a variable or field begins with a lower-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Variable names and private field names must start with a lower-case letter: {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1307</Id>
          <Category>Naming</Category>
          <Title>Accessible fields must begin with upper case letter</Title>
          <CustomTags />
          <Description>Validates that the name of a public or internal field must begin with an upper-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Public and internal fields must start with an upper-case letter: {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1308</Id>
          <Category>Naming</Category>
          <Title>Variable names must not be prefixed</Title>
          <CustomTags />
          <Description>Validates that the name of a member variable does not begin with the 'm_' or '_s' syntax.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Variable names must not start with 'm_' or 's_'.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1309</Id>
          <Category>Naming</Category>
          <Title>Field names must not begin with underscore</Title>
          <CustomTags />
          <Description>Validates that the name of a field does not begin with an underscore.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field names must not start with an underscore.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1310</Id>
          <Category>Naming</Category>
          <Title>Field names must not contain underscore</Title>
          <CustomTags />
          <Description>Validates that the name of a field does not contain underscores.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Field names must not contain underscores.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1311</Id>
          <Category>Naming</Category>
          <Title>Static readonly fields must begin with upper case letter</Title>
          <CustomTags />
          <Description>Validates that the name of a static readonly field begins with an upper-case letter.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Static readonly fields must start with an upper-case letter: {0}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1200</Id>
          <Category>Ordering</Category>
          <Title>Using directives must be placed within namespace</Title>
          <CustomTags />
          <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file unless used in an assembly attribute.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All using directives must be placed inside of the namespace.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1201</Id>
          <Category>Ordering</Category>
          <Title>Elements must appear in the correct order</Title>
          <CustomTags />
          <Description>Validates that elements are placed in the correct order.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All {0} must be placed after all {1}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1202</Id>
          <Category>Ordering</Category>
          <Title>Elements must be ordered by access</Title>
          <CustomTags />
          <Description>Validates that elements of the same type are placed in order by access.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All {0} {1} must be placed after all {2} {3}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1203</Id>
          <Category>Ordering</Category>
          <Title>Constants must appear before fields</Title>
          <CustomTags />
          <Description>Validates that all constant elements are placed before non-constant elements of the same type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All constants must be placed before all non-constants.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1204</Id>
          <Category>Ordering</Category>
          <Title>Static elements must appear before instance elements</Title>
          <CustomTags />
          <Description>Validates that all static elements are placed before non-static elements of the same type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All static {0} {1} must be placed before all non-static {2} {3}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1205</Id>
          <Category>Ordering</Category>
          <Title>Partial elements must declare access</Title>
          <CustomTags />
          <Description>Validates that a partial element has a declared access modifier, which is necessary for determining the order of partial elements.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>
          The partial {0} does not have an access modifier defined. StyleCop may not be able to determine the correct
          placement of the elements in the file. Please declare an access modifier for all partial {1}.
        </MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1206</Id>
          <Category>Ordering</Category>
          <Title>Declaration keywords must follow order</Title>
          <CustomTags />
          <Description>Verifies the ordering of keywords in an element declaration.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The {0} keyword must come before the {1} keyword in the element declaration.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1207</Id>
          <Category>Ordering</Category>
          <Title>Protected must come before internal</Title>
          <CustomTags />
          <Description>Verifies the ordering of the internal and protected keywords in an element with protected internal access.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The keyword 'protected' must come before 'internal'.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1212</Id>
          <Category>Ordering</Category>
          <Title>Property accessors must follow order</Title>
          <CustomTags />
          <Description>Verifies that get-accessors are placed before set-accessors within properties and indexers.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A get-accessor within a property or indexer must be placed before a set-accessor.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1213</Id>
          <Category>Ordering</Category>
          <Title>Event accessors must follow order</Title>
          <CustomTags />
          <Description>Verifies that add-accessors are placed before remove-accessors within events.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>An add-accessor within an event must be placed before a remove-accessor.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1214</Id>
          <Category>Ordering</Category>
          <Title>Static readonly elements must appear before static non readonly elements</Title>
          <CustomTags />
          <Description>Validates that all static readonly elements are placed before all static non-readonly elements of the same type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All static readonly {0} {1} must be placed before all static non-readonly {2} {3}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1215</Id>
          <Category>Ordering</Category>
          <Title>Instance readonly elements must appear before instance non readonly elements</Title>
          <CustomTags />
          <Description>Validates that all non-static readonly elements are placed before non-static non-readonly elements of the same type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>All non-static readonly {0} {1} must be placed before all non-static non-readonly {2} {3}.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1216</Id>
          <Category>Ordering</Category>
          <Title>No value first comparison</Title>
          <CustomTags />
          <Description>Validates that value first comparison is not used.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not use comparison where value goes first, reverse order of operands in '{0}'.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1208</Id>
          <Category>Ordering</Category>
          <Title>System using directives must be placed before other using directives</Title>
          <CustomTags />
          <Description>Verifies that all using directives within the System namespace are placed before all other using directives.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>System using directives must be placed before all other using directives.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1209</Id>
          <Category>Ordering</Category>
          <Title>Using alias directives must be placed after other using directives</Title>
          <CustomTags />
          <Description>Verifies that all using alias directives are placed after all other using directives.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Using alias directives must be placed after all using namespace directives.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1210</Id>
          <Category>Ordering</Category>
          <Title>Using directives must be ordered alphabetically by namespace</Title>
          <CustomTags />
          <Description>Verifies that using directives are sorted alphabetically by the namespaces.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Using directives must be sorted alphabetically by the namespaces.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1211</Id>
          <Category>Ordering</Category>
          <Title>Using alias directives must be ordered alphabetically by alias name</Title>
          <CustomTags />
          <Description>Verifies that using alias directives are sorted alphabetically by the alias names.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Using alias directives must be sorted alphabetically by the alias names.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1217</Id>
          <Category>Ordering</Category>
          <Title>Using static directives must be placed after using namespace directives</Title>
          <CustomTags />
          <Description>Verifies that all using static directives are placed after all using namespace directives.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Using static directives must be placed after using namespace directives.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1000</Id>
          <Category>Spacing</Category>
          <Title>Keywords must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a reserved keyword.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The spacing around the keyword '{0}' is invalid.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1001</Id>
          <Category>Spacing</Category>
          <Title>Commas must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and a comma.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the comma.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1002</Id>
          <Category>Spacing</Category>
          <Title>Semicolons must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and a semicolon.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the semicolon.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1003</Id>
          <Category>Spacing</Category>
          <Title>Symbols must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after an operator symbol.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The spacing around the symbol '{0}' is invalid.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1004</Id>
          <Category>Spacing</Category>
          <Title>Documentation lines must begin with single space</Title>
          <CustomTags />
          <Description>Verifies that the forward slashes at the beginning of an documentation header line are followed by a single space.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The documentation header line must start with a single space.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1005</Id>
          <Category>Spacing</Category>
          <Title>Single line comments must begin with single space</Title>
          <CustomTags />
          <Description>Verifies that the forward slashes at the beginning of a comment are followed by a single space.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The comment must start with a single space. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1006</Id>
          <Category>Spacing</Category>
          <Title>Preprocessor keywords must not be preceded by space</Title>
          <CustomTags />
          <Description>Verifies that there is no space between the opening hash mark and keyword within a preprocessor statement.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The preprocessor type keyword must not be preceded by a space.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1007</Id>
          <Category>Spacing</Category>
          <Title>Operator keyword must be followed by space</Title>
          <CustomTags />
          <Description>Verifies that there is a single space between the 'operator' keyword and the operator symbol within an operator overload.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The operator keyword must be followed by a space.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1008</Id>
          <Category>Spacing</Category>
          <Title>Opening parenthesis must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after an opening parenthesis.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the opening parenthesis.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1009</Id>
          <Category>Spacing</Category>
          <Title>Closing parenthesis must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a closing parenthesis.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the closing parenthesis.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1010</Id>
          <Category>Spacing</Category>
          <Title>Opening square brackets must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after an opening square bracket.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the opening square bracket.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1011</Id>
          <Category>Spacing</Category>
          <Title>Closing square brackets must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a closing square bracket.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the closing square bracket.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1012</Id>
          <Category>Spacing</Category>
          <Title>Opening curly brackets must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after an opening curly bracket.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the opening curly bracket.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1013</Id>
          <Category>Spacing</Category>
          <Title>Closing curly brackets must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a closing curly bracket.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the closing curly bracket.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1014</Id>
          <Category>Spacing</Category>
          <Title>Opening generic brackets must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after an opening bracket in a generic type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the opening generic bracket.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1015</Id>
          <Category>Spacing</Category>
          <Title>Closing generic brackets must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a closing bracket in a generic type.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the closing generic bracket.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1016</Id>
          <Category>Spacing</Category>
          <Title>Opening attribute brackets must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after an opening attribute bracket.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the opening attribute bracket.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1017</Id>
          <Category>Spacing</Category>
          <Title>Closing attribute brackets must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a closing attribute bracket.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the closing attribute bracket.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1018</Id>
          <Category>Spacing</Category>
          <Title>Nullable type symbols must not be preceded by space</Title>
          <CustomTags />
          <Description>Verifies that a nullable type symbol is not preceded by white space.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A nullable type symbol should not be preceded by white space.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1019</Id>
          <Category>Spacing</Category>
          <Title>Member access symbols must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a member access symbol.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the member access symbol.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1020</Id>
          <Category>Spacing</Category>
          <Title>Increment decrement symbols must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after an increment or decrement symbol.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the increment or decrement symbol.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1021</Id>
          <Category>Spacing</Category>
          <Title>Negative signs must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a negative sign.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the negative sign.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1022</Id>
          <Category>Spacing</Category>
          <Title>Positive signs must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a positive sign.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the positive sign.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1023</Id>
          <Category>Spacing</Category>
          <Title>Dereference and access of symbols must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a dereference or address-of symbol.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the dereference or address-of symbol.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1024</Id>
          <Category>Spacing</Category>
          <Title>Colons must be spaced correctly</Title>
          <CustomTags />
          <Description>Validates the spacing before and after a colon.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Invalid spacing around the colon.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1025</Id>
          <Category>Spacing</Category>
          <Title>Code must not contain multiple whitespace in a row</Title>
          <CustomTags />
          <Description>Verifies that the code does not contain more than one spacing in a row.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The code contains multiple spaces in a row. Only one space is needed.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1026</Id>
          <Category>Spacing</Category>
          <Title>Code must not contain space after new keyword in implicitly typed array allocation</Title>
          <CustomTags />
          <Description>Verifies that there is no space between the new keyword and the opening square bracket in an implicitly typed array allocation.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>There should be no space between the new keyword and the opening square bracket in an implicitly typed array allocation.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1027</Id>
          <Category>Spacing</Category>
          <Title>Tabs must not be used</Title>
          <CustomTags />
          <Description>Verifies that the code does not contain tabs.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Tabs are not allowed. Use spaces instead.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1029</Id>
          <Category>Spacing</Category>
          <Title>Do not split null conditional operators</Title>
          <CustomTags />
          <Description>Verifies that the code does not contain new rows or spaces.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Do not split null conditional operator ('?.') or ('?').</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1400</Id>
          <Category>Maintainability</Category>
          <Title>Access modifier must be declared</Title>
          <CustomTags />
          <Description>Validates that an access modifier is declared for an element.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The {0} must have an access modifier.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1401</Id>
          <Category>Maintainability</Category>
          <Title>Fields must be private</Title>
          <CustomTags />
          <Description>Validates that a field is declared with private access.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Fields must be declared with private access. Use properties to expose fields.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1402</Id>
          <Category>Maintainability</Category>
          <Title>File may only contain a single class</Title>
          <CustomTags />
          <Description>Validates that a C# document does not contain more than one class at the root level.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A C# document may only contain a single class at the root level unless all of the classes are partial and are of the same type.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1403</Id>
          <Category>Maintainability</Category>
          <Title>File may only contain a single namespace</Title>
          <CustomTags />
          <Description>Validates that a C# document does not contain more than one namespace directive.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A C# document may only contain a single namespace.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1404</Id>
          <Category>Maintainability</Category>
          <Title>Code analysis suppression must have justification</Title>
          <CustomTags />
          <Description>Validates that a Code Analysis suppression contains a justifiction describing the reason for the suppression.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A Code Analysis suppression must contain a non-empty justification describing the reason for the suppression.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1405</Id>
          <Category>Maintainability</Category>
          <Title>Debug assert must provide message text</Title>
          <CustomTags />
          <Description>Validates that calls to Debug.Assert provide a message in the second parameter describing the reason for the assert.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A call to Debug.Assert must provide a message in the second parameter describing the reason for the assert.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1406</Id>
          <Category>Maintainability</Category>
          <Title>Debug fail must provide message text</Title>
          <CustomTags />
          <Description>Validates that calls to Debug.Fail provide a message in the first parameter describing the reason for the failure.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>A call to Debug.Fail must provide a message in the first parameter describing the reason for the failure.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1119</Id>
          <Category>Maintainability</Category>
          <Title>Statement must not use unnecessary parenthesis</Title>
          <CustomTags />
          <Description>Verifies that the code does not contain extra, unnecessary parenthesis.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The line contains unnecessary parenthesis.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1407</Id>
          <Category>Maintainability</Category>
          <Title>Arithmetic expressions must declare precedence</Title>
          <CustomTags />
          <Description>Verifies that the code does not rely on implied arithmetic operator precedence.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Insert parenthesis within the arithmetic expression to declare the operator precedence.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1408</Id>
          <Category>Maintainability</Category>
          <Title>Conditional expressions must declare precedence</Title>
          <CustomTags />
          <Description>Verifies that the code does not rely on implied conditional operator precedence.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Insert parenthesis within the conditional AND and OR expressions to declare the operator precedence.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1410</Id>
          <Category>Maintainability</Category>
          <Title>Remove delegate parenthesis when possible</Title>
          <CustomTags />
          <Description>Verifies that parenthesis are removed from anonymous methods when there are no method parameters.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>Remove the parenthesis from the anonymous method, since the delegate's parameter list is empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1411</Id>
          <Category>Maintainability</Category>
          <Title>Attribute constructor must not use unnecessary parenthesis</Title>
          <CustomTags />
          <Description>Verifies that parenthesis are removed from attribute constructors when there are no parameters.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The attribute constructor does not need parenthesis, since it's parameter list is empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA1409</Id>
          <Category>Maintainability</Category>
          <Title>Remove unnecessary code</Title>
          <CustomTags />
          <Description>Verifies that the code does not contain empty code elements.</Description>
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>The {0} should be removed as it is empty.</MessageFormat>
        </Rule>
        <Rule>
          <Id>SA0001</Id>
          <Category>NotUsed</Category>
          <Title>Exception occurred</Title>
          <CustomTags />
          <IsEnabledByDefault>true</IsEnabledByDefault>
          <MessageFormat>An exception occurred while parsing the file: {0}, {1}.</MessageFormat>
        </Rule>
      </Rules>
    </RuleCollection>
  </NonRoslynCollections>
  <RuleRelationships>
    <RuleRelationship>
      <Rule1Id>S100</Rule1Id>
      <Rule2Id>SA1300</Rule2Id>
      <Relationship>Rule1IsSubsetOfRule2</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>S101</Rule1Id>
      <Rule2Id>SA1300</Rule2Id>
      <Relationship>Rule1IsSubsetOfRule2</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>S121</Rule1Id>
      <Rule2Id>SA1503</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>S1117</Rule1Id>
      <Rule2Id>SA1126</Rule2Id>
      <Relationship>Related</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>S1541</Rule1Id>
      <Rule2Id>CA1502</Rule2Id>
      <Relationship>Related</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>S2681</Rule1Id>
      <Rule2Id>SA1503</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Wintellect003</Rule1Id>
      <Rule2Id>SA1500</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Wintellect004</Rule1Id>
      <Rule2Id>SA1121</Rule2Id>
      <Relationship>Opposite</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Wintellect011</Rule1Id>
      <Rule2Id>SA1404</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>SX1309</Rule1Id>
      <Rule2Id>SA1310</Rule2Id>
      <Relationship>Opposite</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>SX1309S</Rule1Id>
      <Rule2Id>SA1310</Rule2Id>
      <Relationship>Opposite</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>SX1101</Rule1Id>
      <Rule2Id>SA1101</Rule2Id>
      <Relationship>Opposite</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Wintellect014</Rule1Id>
      <Rule2Id>S2486</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Wintellect014</Rule1Id>
      <Rule2Id>CC0004</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0004</Rule1Id>
      <Rule2Id>S2486</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0012</Rule1Id>
      <Rule2Id>S3445</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0015</Rule1Id>
      <Rule2Id>S3235</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Wintellect012</Rule1Id>
      <Rule2Id>CC0023</Rule2Id>
      <Relationship>Related</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0037</Rule1Id>
      <Rule2Id>S125</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>DNA200</Rule1Id>
      <Rule2Id>Wintellect001</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0003</Rule1Id>
      <Rule2Id>CA1031</Rule2Id>
      <Relationship>Rule1IsSubsetOfRule2</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0011</Rule1Id>
      <Rule2Id>S2971</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0034</Rule1Id>
      <Rule2Id>S3052</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0049</Rule1Id>
      <Rule2Id>S1125</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0052</Rule1Id>
      <Rule2Id>S2933</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0062</Rule1Id>
      <Rule2Id>SA1302</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0065</Rule1Id>
      <Rule2Id>SA1028</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0074</Rule1Id>
      <Rule2Id>S2223</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0084</Rule1Id>
      <Rule2Id>SA1122</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0088</Rule1Id>
      <Rule2Id>SA1122</Rule2Id>
      <Relationship>Opposite</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CC0088</Rule1Id>
      <Rule2Id>CC0084</Rule2Id>
      <Relationship>Opposite</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>RECS0154</Rule1Id>
      <Rule2Id>CA1801</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>RECS0163</Rule1Id>
      <Rule2Id>CC0021</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>RECS0163</Rule1Id>
      <Rule2Id>CC0108</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>RECS0165</Rule1Id>
      <Rule2Id>S3168</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>InconsistentNaming</Rule1Id>
      <Rule2Id>CA1709</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UseObjectOrCollectionInitializer</Rule1Id>
      <Rule2Id>CC0008</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UseObjectOrCollectionInitializer</Rule1Id>
      <Rule2Id>CC0009</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UnusedMember.Local</Rule1Id>
      <Rule2Id>AvoidUncalledPrivateCode</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>EmptyConstructor</Rule1Id>
      <Rule2Id>S3253</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UnusedVariable</Rule1Id>
      <Rule2Id>S1481</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>ReplaceWithSingleCallToFirstOrDefault</Rule1Id>
      <Rule2Id>S2971</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UseMethodAny.0</Rule1Id>
      <Rule2Id>S1155</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>SpecifyStringComparison</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>EmptyGeneralCatchClause</Rule1Id>
      <Rule2Id>S2486</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CompareOfFloatsByEqualityOperator</Rule1Id>
      <Rule2Id>S1244</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>StringIndexOfIsCultureSpecific.1</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>RedundantToStringCall</Rule1Id>
      <Rule2Id>S1858</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UnusedField.Compiler</Rule1Id>
      <Rule2Id>S1144</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>RedundantBoolCompare</Rule1Id>
      <Rule2Id>S1125</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UseIsOperator.1</Rule1Id>
      <Rule2Id>S2219</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>LocalVariableHidesMember</Rule1Id>
      <Rule2Id>S1117</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>FieldCanBeMadeReadOnly.Global</Rule1Id>
      <Rule2Id>S2223</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>PublicConstructorInAbstractClass</Rule1Id>
      <Rule2Id>CC0060</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>PossibleIntendedRethrow</Rule1Id>
      <Rule2Id>S3445</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>ValueParameterNotUsed</Rule1Id>
      <Rule2Id>S3237</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>RedundantEmptyDefaultSwitchBranch</Rule1Id>
      <Rule2Id>S3532</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>RedundantStringFormatCall</Rule1Id>
      <Rule2Id>S3457</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>RedundantBaseConstructorCall</Rule1Id>
      <Rule2Id>S3253</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>ObjectCreationAsStatement</Rule1Id>
      <Rule2Id>S1848</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UseMethodAny.2</Rule1Id>
      <Rule2Id>S1155</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>PartialTypeWithSinglePart</Rule1Id>
      <Rule2Id>S2333</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>ReplaceWithSingleCallToAny</Rule1Id>
      <Rule2Id>S2971</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>ReplaceWithSingleCallToCount</Rule1Id>
      <Rule2Id>S2971</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>NotAccessedVariable.Compiler</Rule1Id>
      <Rule2Id>S1481</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>OperatorIsCanBeUsed</Rule1Id>
      <Rule2Id>S2219</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>RedundantOverridenMember</Rule1Id>
      <Rule2Id>S1185</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>StringCompareIsCultureSpecific.3</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>EmptyNamespace</Rule1Id>
      <Rule2Id>S3261</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>EmptyStatement</Rule1Id>
      <Rule2Id>S1116</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>ReplaceWithSingleCallToSingleOrDefault</Rule1Id>
      <Rule2Id>S2971</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>StringLastIndexOfIsCultureSpecific.1</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>StringCompareToIsCultureSpecific</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UnusedVariable.Compiler</Rule1Id>
      <Rule2Id>S1481</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>StringIndexOfIsCultureSpecific.2</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>ReplaceWithSingleCallToFirst</Rule1Id>
      <Rule2Id>S2971</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>ReplaceWithSingleCallToSingle</Rule1Id>
      <Rule2Id>S2971</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UseMethodAny.1</Rule1Id>
      <Rule2Id>S1155</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UseMethodAny.3</Rule1Id>
      <Rule2Id>S1155</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UseMethodAny.4</Rule1Id>
      <Rule2Id>S1155</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>StringCompareIsCultureSpecific.1</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>StringCompareIsCultureSpecific.2</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>StringCompareIsCultureSpecific.4</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>StringCompareIsCultureSpecific.5</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>StringCompareIsCultureSpecific.6</Rule1Id>
      <Rule2Id>S1449</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>CSharpWarnings::CS0659</Rule1Id>
      <Rule2Id>CA2218</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UnusedParameter.Local</Rule1Id>
      <Rule2Id>CA1801</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UnusedParameter.Local</Rule1Id>
      <Rule2Id>RECS0154</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Avoidemptyinterfaces</Rule1Id>
      <Rule2Id>CA1040</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Declaretypesinnamespaces</Rule1Id>
      <Rule2Id>CA1050</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Don&amp;apos;tuseobsoletetypesmethodsorfields</Rule1Id>
      <Rule2Id>CSharpWarnings::CS0618</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Exceptionclassnameshouldbesuffixedwith&amp;apos;Exception&amp;apos;</Rule1Id>
      <Rule2Id>S3376</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Fieldsshouldbedeclaredasprivate</Rule1Id>
      <Rule2Id>S2357</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>FieldsshouldbemarkedasReadOnlywhenpossible</Rule1Id>
      <Rule2Id>CC0052</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Fieldsthatcouldhavealowervisibility</Rule1Id>
      <Rule2Id>S2357</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>FloatandDateParsingmustbecultureaware</Rule1Id>
      <Rule2Id>CA1304</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Interfacenameshouldbeginwitha&amp;apos;I&amp;apos;</Rule1Id>
      <Rule2Id>SA1302</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>MarkassemblieswithComVisible</Rule1Id>
      <Rule2Id>CA1017</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>MarkISerializabletypeswithSerializableAttribute</Rule1Id>
      <Rule2Id>CA2237</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>MarkattributeswithAttributeUsageAttribute</Rule1Id>
      <Rule2Id>CA1018</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>MethodsnameshouldbeginwithanUppercharacter</Rule1Id>
      <Rule2Id>SA1300</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Methodsshouldbedeclaredstaticifpossible</Rule1Id>
      <Rule2Id>CA1822</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Namespacenameshouldcorrespondtofilelocation</Rule1Id>
      <Rule2Id>RECS0125</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Overrideequalsandoperatorequalsonvaluetypes</Rule1Id>
      <Rule2Id>CA1815</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>PotentiallydeadFields</Rule1Id>
      <Rule2Id>CA1823</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>PotentiallydeadMethods</Rule1Id>
      <Rule2Id>CC0068</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>TypesnameshouldbeginwithanUppercharacter</Rule1Id>
      <Rule2Id>SA1300</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>UrifieldsshouldbeoftypeSystem.Uri</Rule1Id>
      <Rule2Id>CA1054</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Typeswithsourcefilesstoredinthesamedirectoryshouldbedeclaredinthesamenamespace</Rule1Id>
      <Rule2Id>CheckNamespace</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Avoidnamespaceswithfewtypes</Rule1Id>
      <Rule2Id>CA1020</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>DoimplementmethodsthatthrowNotImplementedException</Rule1Id>
      <Rule2Id>RECS0083</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Astatelessclassorstructuremightbeturnedintoastatictype</Rule1Id>
      <Rule2Id>RECS0014</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
    <RuleRelationship>
      <Rule1Id>Collectionpropertiesshouldbereadonly</Rule1Id>
      <Rule2Id>CA2227</Rule2Id>
      <Relationship>Duplicate</Relationship>
    </RuleRelationship>
  </RuleRelationships>
</RuleCollections>